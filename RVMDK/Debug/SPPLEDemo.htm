<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Debug\Objects\..\SPPLEDemo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Debug\Objects\..\SPPLEDemo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Nov 30 20:40:22 2016
<BR><P>
<H3>Maximum Stack Usage =       1376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
L2CA_Event_Callback &rArr; ATT_PDU_Event &rArr; ReadByUUIDRequestEvent &rArr; DispatchServerReadRequestEvent &rArr; HandleReadRequestEvent &rArr; GATT_Read_Response &rArr; ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[38f]">SendHCIPacketToLowerDriver</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38f]">SendHCIPacketToLowerDriver</a><BR>
 <LI><a href="#[445]">SPP_Data_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[445]">SPP_Data_Write</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[fd]">AcknowledgeTimerExpired</a> from TWUART.o(i.AcknowledgeTimerExpired) referenced from TWUART.o(.constdata)
 <LI><a href="#[cb]">AdvertiseLE</a> from sppledemo.o(i.AdvertiseLE) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[cb]">AdvertiseLE</a> from sppledemo.o(i.AdvertiseLE) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[8a]">AsynchronousACLDataCallback</a> from HCI.o(i.AsynchronousACLDataCallback) referenced from HCI.o(i.HCI_Initialize)
 <LI><a href="#[a5]">AsynchronousCallback</a> from GATT.o(i.AsynchronousCallback) referenced from GATT.o(i.ScheduleAsynchronousDispatch)
 <LI><a href="#[89]">AsynchronousHCIEventCallback</a> from HCI.o(i.AsynchronousHCIEventCallback) referenced from HCI.o(i.HCI_Initialize)
 <LI><a href="#[61]">AsynchronousPairingStatusCallbackFunction</a> from GAPLE.o(i.AsynchronousPairingStatusCallbackFunction) referenced from GAPLE.o(i.AuthenticationResponseZeroLengthResponse)
 <LI><a href="#[8b]">AsynchronousSCODataCallback</a> from HCI.o(i.AsynchronousSCODataCallback) referenced from HCI.o(i.HCI_Initialize)
 <LI><a href="#[c4]">AutomaticReadMode</a> from sppledemo.o(i.AutomaticReadMode) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[c4]">AutomaticReadMode</a> from sppledemo.o(i.AutomaticReadMode) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[6c]">BSC_Event_Callback</a> from GAP.o(i.BSC_Event_Callback) referenced from GAP.o(i.GAP_Initialize)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d0]">CancelConnectLE</a> from sppledemo.o(i.CancelConnectLE) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[d0]">CancelConnectLE</a> from sppledemo.o(i.CancelConnectLE) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[ca]">ChangeLEPairingParameters</a> from sppledemo.o(i.ChangeLEPairingParameters) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[ca]">ChangeLEPairingParameters</a> from sppledemo.o(i.ChangeLEPairingParameters) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[b1]">ChangeSimplePairingParameters</a> from sppledemo.o(i.ChangeSimplePairingParameters) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[b1]">ChangeSimplePairingParameters</a> from sppledemo.o(i.ChangeSimplePairingParameters) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[7c]">CharacteristicDiscoveryResponseEvent</a> from GATT.o(i.CharacteristicDiscoveryResponseEvent) referenced from GATT.o(i.GATT_Discover_Characteristics)
 <LI><a href="#[e3]">ClientMode</a> from sppledemo.o(i.ClientMode) referenced from sppledemo.o(i.UserInterface_Selection)
 <LI><a href="#[bb]">CloseRemoteServer</a> from sppledemo.o(i.CloseRemoteServer) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[e5]">CloseServer</a> from sppledemo.o(i.CloseServer) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[d7]">ConfigureSPPLE</a> from sppledemo.o(i.ConfigureSPPLE) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[d7]">ConfigureSPPLE</a> from sppledemo.o(i.ConfigureSPPLE) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[ce]">ConnectLE</a> from sppledemo.o(i.ConnectLE) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[ce]">ConnectLE</a> from sppledemo.o(i.ConnectLE) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[88]">DelayedAuthenticationProcess</a> from L2CAP.o(i.DelayedAuthenticationProcess) referenced from L2CAP.o(i.HCI_Event_Callback)
 <LI><a href="#[cf]">DisconnectLE</a> from sppledemo.o(i.DisconnectLE) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[cf]">DisconnectLE</a> from sppledemo.o(i.DisconnectLE) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[7b]">DiscoverAllCharactisticDescriptorsResponseEvent</a> from GATT.o(i.DiscoverAllCharactisticDescriptorsResponseEvent) referenced from GATT.o(i.GATT_Discover_Characteristic_Descriptors)
 <LI><a href="#[7e]">DiscoverAllPrimaryServicesResponseEvent</a> from GATT.o(i.DiscoverAllPrimaryServicesResponseEvent) referenced from GATT.o(i.GATT_Discover_Services)
 <LI><a href="#[d8]">DiscoverGAPS</a> from sppledemo.o(i.DiscoverGAPS) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[d8]">DiscoverGAPS</a> from sppledemo.o(i.DiscoverGAPS) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[d5]">DiscoverSPPLE</a> from sppledemo.o(i.DiscoverSPPLE) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[d5]">DiscoverSPPLE</a> from sppledemo.o(i.DiscoverSPPLE) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[7a]">Discoverability_Timeout_Callback</a> from GAP.o(i.Discoverability_Timeout_Callback) referenced from GAP.o(i.GAP_Set_Discoverability_Mode)
 <LI><a href="#[e0]">DisplayHelp</a> from sppledemo.o(i.DisplayHelp) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[e0]">DisplayHelp</a> from sppledemo.o(i.DisplayHelp) referenced from sppledemo.o(i.UserInterface_Selection)
 <LI><a href="#[e0]">DisplayHelp</a> from sppledemo.o(i.DisplayHelp) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[a8]">DisplayInquiryList</a> from sppledemo.o(i.DisplayInquiryList) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[a8]">DisplayInquiryList</a> from sppledemo.o(i.DisplayInquiryList) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[c3]">DisplayRawModeData</a> from sppledemo.o(i.DisplayRawModeData) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[c3]">DisplayRawModeData</a> from sppledemo.o(i.DisplayRawModeData) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from hcitrans.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[aa]">EndPairing</a> from sppledemo.o(i.EndPairing) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[aa]">EndPairing</a> from sppledemo.o(i.EndPairing) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[7f]">ExchangeMtuRequestResponseEvent</a> from GATT.o(i.ExchangeMtuRequestResponseEvent) referenced from GATT.o(i.GATT_Exchange_MTU_Request)
 <LI><a href="#[b9]">ExitSniffMode</a> from sppledemo.o(i.ExitSniffMode) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[b9]">ExitSniffMode</a> from sppledemo.o(i.ExitSniffMode) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7d]">FindIncludedServicesResponseEvent</a> from GATT.o(i.FindIncludedServicesResponseEvent) referenced from GATT.o(i.GATT_Discover_Included_Services)
 <LI><a href="#[6d]">GAPBondingEventHandler</a> from GAP.o(i.GAPBondingEventHandler) referenced from GAP.o(i.GAP_Initiate_Bonding)
 <LI><a href="#[78]">GAPInquiryEventHandler</a> from GAP.o(i.GAPInquiryEventHandler) referenced from GAP.o(i.GAP_Perform_Inquiry)
 <LI><a href="#[73]">GAPLEConnectionUpdateIndicationEventHandler</a> from GAPLE.o(i.GAPLEConnectionUpdateIndicationEventHandler) referenced from GAPLE.o(i.GAP_LE_Create_Connection)
 <LI><a href="#[77]">GAPLEScanningEventHandler</a> from GAPLE.o(i.GAPLEScanningEventHandler) referenced from GAPLE.o(i.GAP_LE_Perform_Scan)
 <LI><a href="#[74]">GAPLESecurityManagerMasterEventHandler</a> from GAPLE.o(i.GAPLESecurityManagerMasterEventHandler) referenced from GAPLE.o(i.GAP_LE_Create_Connection)
 <LI><a href="#[70]">GAPLESecurityManagerSlaveEventHandler</a> from GAPLE.o(i.GAPLESecurityManagerSlaveEventHandler) referenced from GAPLE.o(i.GAP_LE_Advertising_Enable)
 <LI><a href="#[79]">GAPRemoteNameEventHandler</a> from GAP.o(i.GAPRemoteNameEventHandler) referenced from GAP.o(i.GAP_Query_Remote_Device_Name)
 <LI><a href="#[84]">GAP_Event_Callback</a> from sppledemo.o(i.GAP_Event_Callback) referenced from sppledemo.o(i.GetRemoteName)
 <LI><a href="#[84]">GAP_Event_Callback</a> from sppledemo.o(i.GAP_Event_Callback) referenced from sppledemo.o(i.Inquiry)
 <LI><a href="#[84]">GAP_Event_Callback</a> from sppledemo.o(i.GAP_Event_Callback) referenced from sppledemo.o(i.Pair)
 <LI><a href="#[84]">GAP_Event_Callback</a> from sppledemo.o(i.GAP_Event_Callback) referenced from sppledemo.o(i.SetPairable)
 <LI><a href="#[5f]">GAP_LE_Event_Callback</a> from sppledemo.o(i.GAP_LE_Event_Callback) referenced from sppledemo.o(i.AdvertiseLE)
 <LI><a href="#[5f]">GAP_LE_Event_Callback</a> from sppledemo.o(i.GAP_LE_Event_Callback) referenced from sppledemo.o(i.ConnectLEDevice)
 <LI><a href="#[5f]">GAP_LE_Event_Callback</a> from sppledemo.o(i.GAP_LE_Event_Callback) referenced 2 times from sppledemo.o(i.GAP_LE_Event_Callback)
 <LI><a href="#[5f]">GAP_LE_Event_Callback</a> from sppledemo.o(i.GAP_LE_Event_Callback) referenced from sppledemo.o(i.SendPairingRequest)
 <LI><a href="#[5f]">GAP_LE_Event_Callback</a> from sppledemo.o(i.GAP_LE_Event_Callback) referenced from sppledemo.o(i.SetPairable)
 <LI><a href="#[5f]">GAP_LE_Event_Callback</a> from sppledemo.o(i.GAP_LE_Event_Callback) referenced from sppledemo.o(i.StartScan)
 <LI><a href="#[65]">GATT_ClientEventCallback</a> from GATT.o(i.GATT_ClientEventCallback) referenced from GATT.o(i.CharacteristicDescriptorDiscoveryRequest)
 <LI><a href="#[65]">GATT_ClientEventCallback</a> from GATT.o(i.GATT_ClientEventCallback) referenced from GATT.o(i.CharacteristicDiscoveryRequest)
 <LI><a href="#[65]">GATT_ClientEventCallback</a> from GATT.o(i.GATT_ClientEventCallback) referenced from GATT.o(i.GATT_ClientEventCallback)
 <LI><a href="#[65]">GATT_ClientEventCallback</a> from GATT.o(i.GATT_ClientEventCallback) referenced from GATT.o(i.IncludeDiscoveryRequest)
 <LI><a href="#[65]">GATT_ClientEventCallback</a> from GATT.o(i.GATT_ClientEventCallback) referenced from GATT.o(i.StartServiceDiscovery)
 <LI><a href="#[9c]">GATT_ClientEventCallback_GAPS</a> from sppledemo.o(i.GATT_ClientEventCallback_GAPS) referenced from sppledemo.o(i.ReadRemoteAppearance)
 <LI><a href="#[9c]">GATT_ClientEventCallback_GAPS</a> from sppledemo.o(i.GATT_ClientEventCallback_GAPS) referenced from sppledemo.o(i.ReadRemoteName)
 <LI><a href="#[66]">GATT_ClientEventCallback_SPPLE</a> from sppledemo.o(i.GATT_ClientEventCallback_SPPLE) referenced from sppledemo.o(i.ConfigureSPPLE)
 <LI><a href="#[66]">GATT_ClientEventCallback_SPPLE</a> from sppledemo.o(i.GATT_ClientEventCallback_SPPLE) referenced from sppledemo.o(i.GATT_Connection_Event_Callback)
 <LI><a href="#[99]">GATT_Connection_Event_Callback</a> from sppledemo.o(i.GATT_Connection_Event_Callback) referenced from sppledemo.o(i.OpenStack)
 <LI><a href="#[a6]">GATT_Request_Timeout</a> from GATT.o(i.GATT_Request_Timeout) referenced from GATT.o(i.StartTimerAndSendPDU)
 <LI><a href="#[6a]">GATT_ServerEventCallback</a> from GAPS.o(i.GATT_ServerEventCallback) referenced from GAPS.o(i.GAPSRegisterService)
 <LI><a href="#[81]">GATT_ServerEventCallback</a> from GATT.o(i.GATT_ServerEventCallback) referenced from GATT.o(i.GATT_Initialize)
 <LI><a href="#[9d]">GATT_ServerEventCallback</a> from sppledemo.o(i.GATT_ServerEventCallback) referenced from sppledemo.o(i.RegisterSPPLE)
 <LI><a href="#[69]">GATT_Service_Discovery_Event_Callback</a> from sppledemo.o(i.GATT_Service_Discovery_Event_Callback) referenced from sppledemo.o(i.DiscoverGAPS)
 <LI><a href="#[69]">GATT_Service_Discovery_Event_Callback</a> from sppledemo.o(i.GATT_Service_Discovery_Event_Callback) referenced from sppledemo.o(i.DiscoverSPPLE)
 <LI><a href="#[b6]">GetClassOfDevice</a> from sppledemo.o(i.GetClassOfDevice) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[b6]">GetClassOfDevice</a> from sppledemo.o(i.GetClassOfDevice) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[be]">GetConfigParams</a> from sppledemo.o(i.GetConfigParams) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[be]">GetConfigParams</a> from sppledemo.o(i.GetConfigParams) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[b2]">GetLocalAddress</a> from sppledemo.o(i.GetLocalAddress) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[b2]">GetLocalAddress</a> from sppledemo.o(i.GetLocalAddress) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[b4]">GetLocalName</a> from sppledemo.o(i.GetLocalName) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[b4]">GetLocalName</a> from sppledemo.o(i.GetLocalName) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[c0]">GetQueueParams</a> from sppledemo.o(i.GetQueueParams) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[c0]">GetQueueParams</a> from sppledemo.o(i.GetQueueParams) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[b7]">GetRemoteName</a> from sppledemo.o(i.GetRemoteName) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[b7]">GetRemoteName</a> from sppledemo.o(i.GetRemoteName) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[93]">HAL_ConsoleWrite</a> from hal.o(i.HAL_ConsoleWrite) referenced from main.o(i.MainThread)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e6]">HCIInquiryEventHandler</a> from HCI.o(i.HCIInquiryEventHandler) referenced from HCI.o(i._HCI_Inquiry)
 <LI><a href="#[e6]">HCIInquiryEventHandler</a> from HCI.o(i.HCIInquiryEventHandler) referenced from HCI.o(i._HCI_Periodic_Inquiry_Mode)
 <LI><a href="#[e7]">HCILEAdvertisingEventHandler</a> from HCI.o(i.HCILEAdvertisingEventHandler) referenced from HCI.o(i._HCI_LE_Set_Advertise_Enable)
 <LI><a href="#[e8]">HCILEScanningEventHandler</a> from HCI.o(i.HCILEScanningEventHandler) referenced from HCI.o(i._HCI_LE_Set_Scan_Enable)
 <LI><a href="#[e8]">HCILEScanningEventHandler</a> from HCI.o(i.HCILEScanningEventHandler) referenced from HCI.o(i._HCI_LE_Set_Scan_Parameters)
 <LI><a href="#[f5]">HCILL_ReceiveBytes</a> from HCILL.o(i.HCILL_ReceiveBytes) referenced from HCIComm.o(.constdata)
 <LI><a href="#[f2]">HCILL_Reconfigure</a> from HCILL.o(i.HCILL_Reconfigure) referenced from HCIComm.o(.constdata)
 <LI><a href="#[f3]">HCILL_Resynchronize</a> from HCILL.o(i.HCILL_Resynchronize) referenced from HCIComm.o(.constdata)
 <LI><a href="#[f1]">HCILL_Shutdown</a> from HCILL.o(i.HCILL_Shutdown) referenced from HCIComm.o(.constdata)
 <LI><a href="#[f4]">HCILL_TransmitBytes</a> from HCILL.o(i.HCILL_TransmitBytes) referenced from HCIComm.o(.constdata)
 <LI><a href="#[e9]">HCIRemoteNameEventHandler</a> from HCI.o(i.HCIRemoteNameEventHandler) referenced from HCI.o(i._HCI_Remote_Name_Request)
 <LI><a href="#[97]">HCITR_COMDataCallback_UART</a> from HCIComm.o(i.HCITR_COMDataCallback_UART) referenced from HCIComm.o(i.OpenComm)
 <LI><a href="#[92]">HCI_ACL_Data_Callback</a> from L2CAP.o(i.HCI_ACL_Data_Callback) referenced from L2CAP.o(i.L2CAP_Initialize)
 <LI><a href="#[8c]">HCI_DriverCallback</a> from HCIDrv.o(i.HCI_DriverCallback) referenced from HCIDrv.o(i.HCI_OpenDriver)
 <LI><a href="#[6b]">HCI_Event_Callback</a> from GAP.o(i.HCI_Event_Callback) referenced from GAP.o(i.GAP_Initialize)
 <LI><a href="#[6e]">HCI_Event_Callback</a> from GAPLE.o(i.HCI_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Advertising_Enable)
 <LI><a href="#[6e]">HCI_Event_Callback</a> from GAPLE.o(i.HCI_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Create_Connection)
 <LI><a href="#[6e]">HCI_Event_Callback</a> from GAPLE.o(i.HCI_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Perform_Scan)
 <LI><a href="#[8d]">HCI_Event_Callback</a> from sppledemo.o(i.HCI_Event_Callback) referenced from sppledemo.o(i.InitializeApplication)
 <LI><a href="#[91]">HCI_Event_Callback</a> from L2CAP.o(i.HCI_Event_Callback) referenced from L2CAP.o(i.L2CAP_Initialize)
 <LI><a href="#[94]">HCI_Sleep_Callback</a> from main.o(i.HCI_Sleep_Callback) referenced from main.o(i.MainThread)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[96]">IdleFunction</a> from main.o(i.IdleFunction) referenced from main.o(i.MainThread)
 <LI><a href="#[fb]">IdleTimerExpired</a> from TWUART.o(i.IdleTimerExpired) referenced from TWUART.o(.constdata)
 <LI><a href="#[a7]">Inquiry</a> from sppledemo.o(i.Inquiry) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[a7]">Inquiry</a> from sppledemo.o(i.Inquiry) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[67]">L2CAP_ConnectionTimeout</a> from L2CAP.o(i.L2CAP_ConnectionTimeout) referenced from L2CAP.o(i.DelayedAuthenticationProcess)
 <LI><a href="#[67]">L2CAP_ConnectionTimeout</a> from L2CAP.o(i.L2CAP_ConnectionTimeout) referenced from L2CAP.o(i.HCI_Event_Callback)
 <LI><a href="#[67]">L2CAP_ConnectionTimeout</a> from L2CAP.o(i.L2CAP_ConnectionTimeout) referenced from L2CAP.o(i.HandleChannelDisconnection)
 <LI><a href="#[67]">L2CAP_ConnectionTimeout</a> from L2CAP.o(i.L2CAP_ConnectionTimeout) referenced from L2CAP.o(i._L2CA_Connect_Request)
 <LI><a href="#[85]">L2CAP_ReceiveTimeout</a> from L2CAP.o(i.L2CAP_ReceiveTimeout) referenced from L2CAP.o(i.HCI_ACL_Data_Callback)
 <LI><a href="#[90]">L2CAP_RequestTimeout</a> from L2CAP.o(i.L2CAP_RequestTimeout) referenced from L2CAP.o(i.L2CAP_ConnectResponseEvent)
 <LI><a href="#[90]">L2CAP_RequestTimeout</a> from L2CAP.o(i.L2CAP_RequestTimeout) referenced from L2CAP.o(i.ProcessSendQueueData)
 <LI><a href="#[8f]">L2CAP_StateTimeout</a> from L2CAP.o(i.L2CAP_StateTimeout) referenced from L2CAP.o(i.L2CAP_ConfigRequestEvent)
 <LI><a href="#[8f]">L2CAP_StateTimeout</a> from L2CAP.o(i.L2CAP_StateTimeout) referenced from L2CAP.o(i.L2CAP_ConnectRequestEvent)
 <LI><a href="#[8f]">L2CAP_StateTimeout</a> from L2CAP.o(i.L2CAP_StateTimeout) referenced from L2CAP.o(i.L2CAP_ConnectResponseEvent)
 <LI><a href="#[8f]">L2CAP_StateTimeout</a> from L2CAP.o(i.L2CAP_StateTimeout) referenced from L2CAP.o(i._L2CA_Config_Request)
 <LI><a href="#[8f]">L2CAP_StateTimeout</a> from L2CAP.o(i.L2CAP_StateTimeout) referenced from L2CAP.o(i._L2CA_Connect_Response)
 <LI><a href="#[6f]">L2CA_Event_Callback</a> from GAPLE.o(i.L2CA_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Advertising_Enable)
 <LI><a href="#[6f]">L2CA_Event_Callback</a> from GAPLE.o(i.L2CA_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Create_Connection)
 <LI><a href="#[80]">L2CA_Event_Callback</a> from GATT.o(i.L2CA_Event_Callback) referenced from GATT.o(i.GATT_Initialize)
 <LI><a href="#[a0]">L2CA_Event_Callback</a> from SDP.o(i.L2CA_Event_Callback) referenced from SDP.o(i.SDP_Initialize)
 <LI><a href="#[ea]">L2CA_Event_Callback</a> from RFCOMM.o(i.L2CA_Event_Callback) referenced from RFCOMM.o(i._RFCOMM_Open_Request)
 <LI><a href="#[ea]">L2CA_Event_Callback</a> from RFCOMM.o(i.L2CA_Event_Callback) referenced from RFCOMM.o(i._RFCOMM_Register_Server_Channel)
 <LI><a href="#[d2]">LEPassKeyResponse</a> from sppledemo.o(i.LEPassKeyResponse) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[d2]">LEPassKeyResponse</a> from sppledemo.o(i.LEPassKeyResponse) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[d3]">LEQueryEncryption</a> from sppledemo.o(i.LEQueryEncryption) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[d3]">LEQueryEncryption</a> from sppledemo.o(i.LEQueryEncryption) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[d4]">LESetPasskey</a> from sppledemo.o(i.LESetPasskey) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[d4]">LESetPasskey</a> from sppledemo.o(i.LESetPasskey) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[c2]">Loopback</a> from sppledemo.o(i.Loopback) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[c2]">Loopback</a> from sppledemo.o(i.Loopback) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[86]">MailboxDeleteDataCallback</a> from HCI.o(i.MailboxDeleteDataCallback) referenced from HCI.o(i.HCI_Cleanup)
 <LI><a href="#[86]">MailboxDeleteDataCallback</a> from HCI.o(i.MailboxDeleteDataCallback) referenced from HCI.o(i.HCI_Initialize)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ba]">OpenRemoteServer</a> from sppledemo.o(i.OpenRemoteServer) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[e4]">OpenServer</a> from sppledemo.o(i.OpenServer) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[ab]">PINCodeResponse</a> from sppledemo.o(i.PINCodeResponse) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[ab]">PINCodeResponse</a> from sppledemo.o(i.PINCodeResponse) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a9]">Pair</a> from sppledemo.o(i.Pair) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[a9]">Pair</a> from sppledemo.o(i.Pair) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[d1]">PairLE</a> from sppledemo.o(i.PairLE) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[d1]">PairLE</a> from sppledemo.o(i.PairLE) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[ac]">PassKeyResponse</a> from sppledemo.o(i.PassKeyResponse) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[ac]">PassKeyResponse</a> from sppledemo.o(i.PassKeyResponse) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[71]">PasskeyEventDispatcher</a> from GAPLE.o(i.PasskeyEventDispatcher) referenced from GAPLE.o(i.GAP_LE_Authentication_Response)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[72]">Phase3DistributionScheduler</a> from GAPLE.o(i.Phase3DistributionScheduler) referenced from GAPLE.o(i.GAP_LE_Authentication_Response)
 <LI><a href="#[72]">Phase3DistributionScheduler</a> from GAPLE.o(i.Phase3DistributionScheduler) referenced from GAPLE.o(i.L2CA_Event_Callback)
 <LI><a href="#[95]">ProcessCharacters</a> from main.o(i.ProcessCharacters) referenced from main.o(i.MainThread)
 <LI><a href="#[8e]">ProtocolEventCallback</a> from HCIComm.o(i.ProtocolEventCallback) referenced from HCIComm.o(i.InitializeProtocol)
 <LI><a href="#[9a]">ProtocolTimerCallback</a> from HCIComm.o(i.ProtocolTimerCallback) referenced from HCIComm.o(i.ProtocolEventCallback)
 <LI><a href="#[e1]">QueryMemory</a> from sppledemo.o(i.QueryMemory) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[e1]">QueryMemory</a> from sppledemo.o(i.QueryMemory) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[eb]">RFCOMMCleanupHandler</a> from RFCOMM.o(i.RFCOMMCleanupHandler) referenced from RFCOMM.o(i._RFCOMM_Open_Request)
 <LI><a href="#[eb]">RFCOMMCleanupHandler</a> from RFCOMM.o(i.RFCOMMCleanupHandler) referenced from RFCOMM.o(i._RFCOMM_Register_Server_Channel)
 <LI><a href="#[ec]">RFCOMMClientSABMMessageHandler</a> from RFCOMM.o(i.RFCOMMClientSABMMessageHandler) referenced from RFCOMM.o(i._RFCOMM_Open_Request)
 <LI><a href="#[ee]">RFCOMMServerPNMessageHandler</a> from RFCOMM.o(i.RFCOMMServerPNMessageHandler) referenced from RFCOMM.o(i._RFCOMM_Register_Server_Channel)
 <LI><a href="#[ed]">RFCOMMServerSABMMessageHandler</a> from RFCOMM.o(i.RFCOMMServerSABMMessageHandler) referenced from RFCOMM.o(i._RFCOMM_Register_Server_Channel)
 <LI><a href="#[a2]">RFCOMM_Event_Callback</a> from SPP.o(i.RFCOMM_Event_Callback) referenced from SPP.o(i.SPP_Open_Remote_Port)
 <LI><a href="#[a2]">RFCOMM_Event_Callback</a> from SPP.o(i.RFCOMM_Event_Callback) referenced from SPP.o(i.SPP_Open_Server_Port)
 <LI><a href="#[68]">RFCOMM_SignalTimeout</a> from RFCOMM.o(i.RFCOMM_SignalTimeout) referenced from RFCOMM.o(i.Disconnect)
 <LI><a href="#[68]">RFCOMM_SignalTimeout</a> from RFCOMM.o(i.RFCOMM_SignalTimeout) referenced from RFCOMM.o(i.L2CA_Event_Callback)
 <LI><a href="#[68]">RFCOMM_SignalTimeout</a> from RFCOMM.o(i.RFCOMM_SignalTimeout) referenced from RFCOMM.o(i.ProcessRFCOMMControlMessage)
 <LI><a href="#[68]">RFCOMM_SignalTimeout</a> from RFCOMM.o(i.RFCOMM_SignalTimeout) referenced from RFCOMM.o(i.RFCOMMClientSABMMessageHandler)
 <LI><a href="#[68]">RFCOMM_SignalTimeout</a> from RFCOMM.o(i.RFCOMM_SignalTimeout) referenced from RFCOMM.o(i.SendFormattedControlMessage)
 <LI><a href="#[68]">RFCOMM_SignalTimeout</a> from RFCOMM.o(i.RFCOMM_SignalTimeout) referenced from RFCOMM.o(i._RFCOMM_Open_Request)
 <LI><a href="#[68]">RFCOMM_SignalTimeout</a> from RFCOMM.o(i.RFCOMM_SignalTimeout) referenced from RFCOMM.o(i._RFCOMM_Release_Request)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[bc]">Read</a> from sppledemo.o(i.Read) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[bc]">Read</a> from sppledemo.o(i.Read) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[df]">ReadDataCommand</a> from sppledemo.o(i.ReadDataCommand) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[df]">ReadDataCommand</a> from sppledemo.o(i.ReadDataCommand) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[db]">ReadLocalAppearance</a> from sppledemo.o(i.ReadLocalAppearance) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[db]">ReadLocalAppearance</a> from sppledemo.o(i.ReadLocalAppearance) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[d9]">ReadLocalName</a> from sppledemo.o(i.ReadLocalName) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[d9]">ReadLocalName</a> from sppledemo.o(i.ReadLocalName) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[dd]">ReadRemoteAppearance</a> from sppledemo.o(i.ReadRemoteAppearance) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[dd]">ReadRemoteAppearance</a> from sppledemo.o(i.ReadRemoteAppearance) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[da]">ReadRemoteName</a> from sppledemo.o(i.ReadRemoteName) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[da]">ReadRemoteName</a> from sppledemo.o(i.ReadRemoteName) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[82]">ReadResponseEvent</a> from GATT.o(i.ReadResponseEvent) referenced from GATT.o(i.GATT_Read_Value_Request)
 <LI><a href="#[d6]">RegisterSPPLE</a> from sppledemo.o(i.RegisterSPPLE) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[d6]">RegisterSPPLE</a> from sppledemo.o(i.RegisterSPPLE) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[fc]">RetransmitTimerExpired</a> from TWUART.o(i.RetransmitTimerExpired) referenced from TWUART.o(.constdata)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a1]">SPPClientHandler</a> from SPP.o(i.SPPClientHandler) referenced from SPP.o(i.SPP_Open_Remote_Port)
 <LI><a href="#[a4]">SPPServerHandler</a> from SPP.o(i.SPPServerHandler) referenced from SPP.o(i.SPP_Open_Server_Port)
 <LI><a href="#[98]">SPP_Event_Callback</a> from sppledemo.o(i.SPP_Event_Callback) referenced from sppledemo.o(i.OpenRemoteServer)
 <LI><a href="#[98]">SPP_Event_Callback</a> from sppledemo.o(i.SPP_Event_Callback) referenced from sppledemo.o(i.OpenServer)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c6]">SendData</a> from sppledemo.o(i.SendData) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[c6]">SendData</a> from sppledemo.o(i.SendData) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[de]">SendDataCommand</a> from sppledemo.o(i.SendDataCommand) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[de]">SendDataCommand</a> from sppledemo.o(i.SendDataCommand) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[e2]">ServerMode</a> from sppledemo.o(i.ServerMode) referenced from sppledemo.o(i.UserInterface_Selection)
 <LI><a href="#[c5]">SetBaudRate</a> from sppledemo.o(i.SetBaudRate) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[c5]">SetBaudRate</a> from sppledemo.o(i.SetBaudRate) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[af]">SetCBConnectabilityMode</a> from sppledemo.o(i.SetCBConnectabilityMode) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[af]">SetCBConnectabilityMode</a> from sppledemo.o(i.SetCBConnectabilityMode) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[ae]">SetCBDiscoverabilityMode</a> from sppledemo.o(i.SetCBDiscoverabilityMode) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[ae]">SetCBDiscoverabilityMode</a> from sppledemo.o(i.SetCBDiscoverabilityMode) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[b0]">SetCBPairabilityMode</a> from sppledemo.o(i.SetCBPairabilityMode) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[b0]">SetCBPairabilityMode</a> from sppledemo.o(i.SetCBPairabilityMode) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[b5]">SetClassOfDevice</a> from sppledemo.o(i.SetClassOfDevice) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[b5]">SetClassOfDevice</a> from sppledemo.o(i.SetClassOfDevice) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[bf]">SetConfigParams</a> from sppledemo.o(i.SetConfigParams) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[bf]">SetConfigParams</a> from sppledemo.o(i.SetConfigParams) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[c8]">SetLEConnectabilityMode</a> from sppledemo.o(i.SetLEConnectabilityMode) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[c8]">SetLEConnectabilityMode</a> from sppledemo.o(i.SetLEConnectabilityMode) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[c7]">SetLEDiscoverabilityMode</a> from sppledemo.o(i.SetLEDiscoverabilityMode) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[c7]">SetLEDiscoverabilityMode</a> from sppledemo.o(i.SetLEDiscoverabilityMode) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[c9]">SetLEPairabilityMode</a> from sppledemo.o(i.SetLEPairabilityMode) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[c9]">SetLEPairabilityMode</a> from sppledemo.o(i.SetLEPairabilityMode) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[dc]">SetLocalAppearance</a> from sppledemo.o(i.SetLocalAppearance) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[dc]">SetLocalAppearance</a> from sppledemo.o(i.SetLocalAppearance) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[b3]">SetLocalName</a> from sppledemo.o(i.SetLocalName) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[b3]">SetLocalName</a> from sppledemo.o(i.SetLocalName) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[c1]">SetQueueParams</a> from sppledemo.o(i.SetQueueParams) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[c1]">SetQueueParams</a> from sppledemo.o(i.SetQueueParams) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[b8]">SniffMode</a> from sppledemo.o(i.SniffMode) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[b8]">SniffMode</a> from sppledemo.o(i.SniffMode) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[cc]">StartScanning</a> from sppledemo.o(i.StartScanning) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[cc]">StartScanning</a> from sppledemo.o(i.StartScanning) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[cd]">StopScanning</a> from sppledemo.o(i.StopScanning) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[cd]">StopScanning</a> from sppledemo.o(i.StopScanning) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i.BuildAndSubmitCommandBD_ADDRByte)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i.BuildAndSubmitCommandBD_ADDRByteVariable)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i.BuildAndSubmitCommandByte)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i.BuildAndSubmitCommandByteVariable)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i.BuildAndSubmitCommandThreeWords)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i.BuildAndSubmitCommandWord)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i.BuildAndSubmitCommandWordByte)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i.HCI_Send_Raw_Command)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_Change_Local_Name)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_Create_Connection)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_Host_Number_Of_Completed_Packets)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_Inquiry)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_LE_Connection_Update)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_LE_Create_Connection)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_LE_Encrypt)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_LE_Long_Term_Key_Request_Reply)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_LE_Set_Advertising_Parameters)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_LE_Set_Scan_Parameters)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_LE_Start_Encryption)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_Periodic_Inquiry_Mode)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_Remote_Name_Request)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_Remote_OOB_Data_Request_Reply)
 <LI><a href="#[64]">SynchronousHCICommandCallback</a> from HCI.o(i.SynchronousHCICommandCallback) referenced from HCI.o(i._HCI_Sniff_Mode)
 <LI><a href="#[9]">SysTick_Handler</a> from btpskrnl.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[fa]">TWUART_ReceiveBytes</a> from TWUART.o(i.TWUART_ReceiveBytes) referenced from HCIComm.o(.constdata)
 <LI><a href="#[f7]">TWUART_Reconfigure</a> from TWUART.o(i.TWUART_Reconfigure) referenced from HCIComm.o(.constdata)
 <LI><a href="#[f8]">TWUART_Resynchronize</a> from TWUART.o(i.TWUART_Resynchronize) referenced from HCIComm.o(.constdata)
 <LI><a href="#[f6]">TWUART_Shutdown</a> from TWUART.o(i.TWUART_Shutdown) referenced from HCIComm.o(.constdata)
 <LI><a href="#[f9]">TWUART_TransmitBytes</a> from TWUART.o(i.TWUART_TransmitBytes) referenced from HCIComm.o(.constdata)
 <LI><a href="#[62]">TimerCallback</a> from BSC.o(i.TimerCallback) referenced from BSC.o(i.BSC_StartTimer)
 <LI><a href="#[60]">Timer_Event_Callback</a> from GAPLE.o(i.Timer_Event_Callback) referenced from GAPLE.o(i.AuthenticationResponsePasskeyConfirmationResponse)
 <LI><a href="#[60]">Timer_Event_Callback</a> from GAPLE.o(i.Timer_Event_Callback) referenced from GAPLE.o(i.GAPLESecurityManagerMasterEventHandler)
 <LI><a href="#[60]">Timer_Event_Callback</a> from GAPLE.o(i.Timer_Event_Callback) referenced from GAPLE.o(i.GAPLESecurityManagerSlaveEventHandler)
 <LI><a href="#[60]">Timer_Event_Callback</a> from GAPLE.o(i.Timer_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Authentication_Response)
 <LI><a href="#[60]">Timer_Event_Callback</a> from GAPLE.o(i.Timer_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Pair_Remote_Device)
 <LI><a href="#[60]">Timer_Event_Callback</a> from GAPLE.o(i.Timer_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Reestablish_Security)
 <LI><a href="#[60]">Timer_Event_Callback</a> from GAPLE.o(i.Timer_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Request_Security)
 <LI><a href="#[60]">Timer_Event_Callback</a> from GAPLE.o(i.Timer_Event_Callback) referenced from GAPLE.o(i.L2CA_Event_Callback)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from hal.o(i.USART2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from hcitrans.o(i.USART3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[87]">UpdateHCICallbackThread</a> from HCI.o(i.UpdateHCICallbackThread) referenced from HCI.o(i.HCI_Cleanup)
 <LI><a href="#[87]">UpdateHCICallbackThread</a> from HCI.o(i.UpdateHCICallbackThread) referenced from HCI.o(i.HCI_Initialize)
 <LI><a href="#[63]">UpdateTimerModule</a> from BTPSTMR.o(i.UpdateTimerModule) referenced from BTPSTMR.o(i.BTPS_CleanupTimerModule)
 <LI><a href="#[63]">UpdateTimerModule</a> from BTPSTMR.o(i.UpdateTimerModule) referenced from BTPSTMR.o(i.BTPS_InitializeTimerModule)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ad]">UserConfirmationResponse</a> from sppledemo.o(i.UserConfirmationResponse) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[ad]">UserConfirmationResponse</a> from sppledemo.o(i.UserConfirmationResponse) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[bd]">Write</a> from sppledemo.o(i.Write) referenced from sppledemo.o(i.UserInterface_Client)
 <LI><a href="#[bd]">Write</a> from sppledemo.o(i.Write) referenced from sppledemo.o(i.UserInterface_Server)
 <LI><a href="#[83]">WriteResponseEvent</a> from GATT.o(i.WriteResponseEvent) referenced from GATT.o(i.GATT_Write_Request)
 <LI><a href="#[75]">_HCI_Event_Callback</a> from GAPLE.o(i._HCI_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Initialize)
 <LI><a href="#[9e]">_HCI_Event_Callback</a> from SCO.o(i._HCI_Event_Callback) referenced from SCO.o(i.SCO_Initialize)
 <LI><a href="#[9f]">_HCI_SCO_Callback</a> from SCO.o(i._HCI_SCO_Callback) referenced from SCO.o(i.SCO_Initialize)
 <LI><a href="#[76]">_L2CA_Event_Callback</a> from GAPLE.o(i._L2CA_Event_Callback) referenced from GAPLE.o(i.GAP_LE_Initialize)
 <LI><a href="#[9b]">_L2CA_Event_Callback</a> from RFCOMM.o(i._L2CA_Event_Callback) referenced from RFCOMM.o(i.RFCOMM_Initialize)
 <LI><a href="#[9b]">_L2CA_Event_Callback</a> from RFCOMM.o(i._L2CA_Event_Callback) referenced from RFCOMM.o(i._RFCOMM_Open_Request)
 <LI><a href="#[a3]">_RFCOMM_Event_Callback</a> from SPP.o(i._RFCOMM_Event_Callback) referenced from SPP.o(i.SPP_Open_Remote_Port)
 <LI><a href="#[a3]">_RFCOMM_Event_Callback</a> from SPP.o(i._RFCOMM_Event_Callback) referenced from SPP.o(i.SPP_Open_Server_Port)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[ef]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[f0]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[5c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[471]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[fe]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[111]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[472]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[473]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[474]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[475]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[476]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[477]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Event_Callback
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_OOB_Data_Request_Reply
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPInquiryEventHandler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Start_Encryption
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Long_Term_Key_Request_Reply
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Encrypt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingRandom
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingConfirmPDU
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendEncryptKey
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAttributeTypeUUID
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalizeUUID
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCallback
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Supported_Commands
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLELinkEntry
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCallback
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseOptionsToAPI
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewChannel
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemMove
</UL>

<P><STRONG><a name="[478]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[47a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[47b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[47c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1e3]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
</UL>

<P><STRONG><a name="[1d7]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCompare
</UL>

<P><STRONG><a name="[1e2]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringCopy
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SniffMode
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SniffMode
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SniffMode
</UL>

<P><STRONG><a name="[47e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[47f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[480]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[106]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[46d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ff]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[481]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[482]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[483]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[484]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[485]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>AcquireBluetoothStackInformation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, BSC.o(i.AcquireBluetoothStackInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTStackEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_QueryActiveFeatures
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reconfigure_Driver
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Version_Supported
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Command_Supported
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_EnableFeature
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPLEContext
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discoverability_Timeout_Callback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackACLInfo
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Initialize
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Cleanup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Initialize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Cleanup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Initialize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Schedule_Asynchronous_Callback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Cleanup
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOEP_Initialize
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOEP_Cleanup
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifySharedBufferPointer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySharedBuffer
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnRegisterEventCallback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StopTimer
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StartTimer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ScheduleAsynchronousCallback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_RegisterEventCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DisableFeature
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AuthenticateDevice
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustSharedBuffer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Event_Callback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackInformation
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_SCO_Callback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Event_Callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SignalTimeout
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireRFCOMMStackInformation
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSDPStackInformation
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Change_SCO_Configuration_Handles
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Change_SCO_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHCICallbackThread
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataPacket
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>

<P><STRONG><a name="[12f]"></a>AcquireGAPLEContext</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, GAP.o(i.AcquireGAPLEContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AcquireGAPLEContext &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cleanup
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Enable
</UL>

<P><STRONG><a name="[165]"></a>AdjustSharedBuffer</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, BSC.o(i.AdjustSharedBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = AdjustSharedBuffer &rArr; VerifySharedBufferPointer &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifySharedBufferPointer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Data_Write
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataPacket
</UL>

<P><STRONG><a name="[142]"></a>BSC_AcquireListLock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, BSC.o(i.BSC_AcquireListLock))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cleanup
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CloseDriver
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommPacket
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReconfigureComm
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseComm
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupCOMMList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommSCOConfiguration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DriverCallback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEventHandler
</UL>

<P><STRONG><a name="[156]"></a>BSC_AddGenericListEntry</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, BSC.o(i.BSC_AddGenericListEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareListEntryKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPacketQueueEntry
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCallback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscoveredServiceInfoEntry
</UL>

<P><STRONG><a name="[14f]"></a>BSC_AddGenericListEntry_Actual</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, BSC.o(i.BSC_AddGenericListEntry_Actual))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareListEntryKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewDeviceInfoEntry
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPInquiryEventHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCallbackEntry
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StartTimer
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewTransactionInfoEntry
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewHandleInfoEntry
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewConnectionCallbackInfoEntry
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddServiceInfoEntry
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Register_Server_Channel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPortInformationEntry
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddL2CAPConnectionInfoEntry
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddServiceRecordEntry
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddConnectionInfoEntry
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFixedChannelInfoEntry
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueACLPacket
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewIdentifierEntry
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewChannel
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRegistryInfoEntry
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddConnectionInfoEntry
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
</UL>

<P><STRONG><a name="[191]"></a>BSC_AuthenticateDevice</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, BSC.o(i.BSC_AuthenticateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BSC_AuthenticateDevice &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayedAuthenticationProcess
</UL>

<P><STRONG><a name="[192]"></a>BSC_DeleteGenericListEntry</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, BSC.o(i.BSC_DeleteGenericListEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareListEntryKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDeviceInfoEntry
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Delete_Service_Record
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackEntry
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLLinkEntryConnection_Handle
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CloseDriver
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteBTStackEntry
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteBSCTimerEntry
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLELinkEntryConnection_Handle
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeletePacketQueueEntry
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCallback
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTransactionInfoEntryByTimerID
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTransactionInfoEntry
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteServiceDiscoveryInfoEntry
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteHandleInfoEntryByEntryPointer
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteGATTContextInfoEntry
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Un_Register_Server_Channel
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeletePortInformationEntry
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCOMEntry
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveRFCOMMChannelInfoEntry
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveL2CAPConnectionInfoEntry
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntryCID
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRegistryInfoEntry
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntry
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChannelInfoEntry
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackEntry
</UL>

<P><STRONG><a name="[193]"></a>BSC_DisableFeature</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, BSC.o(i.BSC_DisableFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = BSC_DisableFeature &rArr; HCI_VS_DisableFeature &rArr; VS_DisableBLE &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_DisableFeature
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Enable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_EnableFeature
</UL>

<P><STRONG><a name="[196]"></a>BSC_EnableFeature</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, BSC.o(i.BSC_EnableFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = BSC_EnableFeature &rArr; HCI_VS_EnableFeature &rArr; DownloadPatch &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_EnableFeature
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DisableFeature
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[199]"></a>BSC_FreeGenericListEntryList</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, BSC.o(i.BSC_FreeGenericListEntryList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDeviceInfoList
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeInquiryResultList
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCallbackList
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeACLLinkList
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCallbackInfoList
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDriverStructureResources
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoEntryMemory
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceDiscoveryInfoEntryMemory
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGATTContextInfoEntryMemory
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDiscoveredServiceInfoEntryMemory
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceAttributeList
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCallbackList
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeACLLinkList
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMCleanupHandler
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRFCOMMChannelInfoList
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeL2CAPConnectionInfoList
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRegistryInfoList
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFixedChannelInfoList
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeACLDataList
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCallbackList
</UL>

<P><STRONG><a name="[19a]"></a>BSC_FreeGenericListEntryMemory</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, BSC.o(i.BSC_FreeGenericListEntryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDeviceInfoEntryMemory
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Delete_Service_Record
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Scan
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Disable
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueRemoteNameCallback
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueBondingCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondingEventHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StopTimer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeBSCTimerEntryList
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSecurityManagerResources
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchSecurityEstablishmentCallback
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHCIPacketToLowerDriver
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DriverCallback
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestResponse
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestResponse
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareWriteRequestResponse
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Un_Register_Server_Channel
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectionResponse
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSDPConnectionRequest
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceRecordList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeL2CAPConnectionInfoList
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectChannel
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInfoEntryMemory
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupSDPConnection
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeIdentifierInfoList
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeConnectionInfoList
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRegistryInfoEntry
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntry
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChannelInfoEntry
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendPacket
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CancelPacket
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHCICallbackThread
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
</UL>

<P><STRONG><a name="[279]"></a>BSC_GetNextGenericListEntry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, BSC.o(i.BSC_GetNextGenericListEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSC_GetNextGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextTransactionInfoEntry
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextServiceInfoEntry
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextHandleInfoEntry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextConnectionInfoEntry
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchConnectionEvent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMCleanupHandler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextRFCOMMServerInfoEntry
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextRFCOMMChannelInfoEntry
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReceiveTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextChannelInfoEntry
</UL>

<P><STRONG><a name="[19b]"></a>BSC_Initialize</STRONG> (Thumb, 778 bytes, Stack size 64 bytes, BSC.o(i.BSC_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = BSC_Initialize &rArr; HCI_Initialize &rArr; HCI_Reset &rArr; HCI_VS_InitializeAfterHCIReset &rArr; DownloadPatch &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeBeforeHCIOpen
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeBeforeHCIClose
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIOpen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_BD_ADDR
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Initialize
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Cleanup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Initialize
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Cleanup
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Cleanup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Initialize
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Cleanup
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Initialize
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Cleanup
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeCertificateModule
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Query_LE_Controller_Support
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CloseDriver
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Cleanup
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertPtr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertLength
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertCurrentDate
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccess
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOEP_Initialize
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOEP_Cleanup
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupCertificateModule
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_InitializeTimerModule
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_CleanupTimerModule
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeBSCModule
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeBSCTimerEntryList
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteBTStackEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[141]"></a>BSC_LockBluetoothStack</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, BSC.o(i.BSC_LockBluetoothStack))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cleanup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
</UL>

<P><STRONG><a name="[1c0]"></a>BSC_QueryActiveFeatures</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, BSC.o(i.BSC_QueryActiveFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSC_QueryActiveFeatures &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_EnableFeature
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_DisableFeature
</UL>

<P><STRONG><a name="[1c1]"></a>BSC_RegisterEventCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, BSC.o(i.BSC_RegisterEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSC_RegisterEventCallback &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
</UL>

<P><STRONG><a name="[144]"></a>BSC_ReleaseListLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, BSC.o(i.BSC_ReleaseListLock))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cleanup
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CloseDriver
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommPacket
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReconfigureComm
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseComm
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupCOMMList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommSCOConfiguration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DriverCallback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEventHandler
</UL>

<P><STRONG><a name="[18c]"></a>BSC_ScheduleAsynchronousCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, BSC.o(i.BSC_ScheduleAsynchronousCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = BSC_ScheduleAsynchronousCallback &rArr; HCI_Schedule_Asynchronous_Callback &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Schedule_Asynchronous_Callback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponseZeroLengthResponse
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleAsynchronousDispatch
</UL>

<P><STRONG><a name="[13c]"></a>BSC_SearchGenericListEntry</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, BSC.o(i.BSC_SearchGenericListEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareListEntryKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackEntry
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLLinkEntryConnection_Handle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLLinkEntryBD_ADDR
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTStackEntry
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchLELinkEntryConnection_Handle
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchLELinkEntryBD_ADDR
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackInfoByType
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionInfoEntry
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceHandleInfoEntry
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceDiscoveryInfoEntry
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchHandleInfoEntry
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchGATTContextInfoEntry
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCharacteristicInfoEntry
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByConnectionID
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchPortInformationEntry
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceRecordEntry
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntry
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCOMEntry
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByCID
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByBD_ADDR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SignalTimeout
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerPNMessageHandler
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRegistryByValue
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRegistryByID
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchIdentifierInfoEntryByIdentifier
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFixedChannelInfoEntry
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLPacketEntryByIdentifier
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLPacketEntryByConnectionHandle
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
</UL>

<P><STRONG><a name="[1c3]"></a>BSC_Shutdown</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, BSC.o(i.BSC_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = BSC_Shutdown &rArr; SDP_Cleanup &rArr; FreeConnectionInfoList &rArr; CleanupSDPConnection &rArr; _L2CA_Disconnect_Request &rArr; L2CAP_DisconnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeBeforeHCIClose
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIClose
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Cleanup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Cleanup
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Cleanup
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Cleanup
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Cleanup
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CloseDriver
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Cleanup
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOEP_Cleanup
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_CleanupTimerModule
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTStackEntry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeBSCTimerEntryList
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteBTStackEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseStack
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHCICallbackThread
</UL>

<P><STRONG><a name="[1c5]"></a>BSC_StartTimer</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, BSC.o(i.BSC_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = BSC_StartTimer &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimerAndSendPDU
</UL>

<P><STRONG><a name="[115]"></a>BSC_StopTimer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, BSC.o(i.BSC_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSC_StopTimer &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteBSCTimerEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimerAndSendPDU
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[13d]"></a>BSC_UnLockBluetoothStack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, BSC.o(i.BSC_UnLockBluetoothStack))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Without_Response_Request
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Response
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Queuing_Parameters
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Register_Service
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Handle_Value_Notification
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Exchange_MTU_Request
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cleanup
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Set_Device_Name
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Set_Device_Appearance
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Query_Device_Name
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Query_Device_Appearance
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Cleanup_Service
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cancel_Transaction
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Request_Timeout
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousCallback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByServerTransactionID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByConnectionID
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPSRegisterService
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
</UL>

<P><STRONG><a name="[1c7]"></a>BSC_UnRegisterEventCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, BSC.o(i.BSC_UnRegisterEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSC_UnRegisterEventCallback &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
</UL>

<P><STRONG><a name="[1d5]"></a>BTPS_AddFunctionToScheduler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, btpskrnl.o(i.BTPS_AddFunctionToScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTPS_AddFunctionToScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_InitializeTimerModule
</UL>

<P><STRONG><a name="[173]"></a>BTPS_AddMailbox</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, btpskrnl.o(i.BTPS_AddMailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BTPS_AddMailbox &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Schedule_Asynchronous_Callback
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousSCODataCallback
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousACLDataCallback
</UL>

<P><STRONG><a name="[15a]"></a>BTPS_AllocateMemory</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, btpskrnl.o(i.BTPS_AllocateMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_TestDebugZone
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemAlloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenServer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalName
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_GAPS
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewDeviceInfoEntry
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_CreateMailbox
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Server_Port
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Register_Service
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_Device_Name
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Scan_Response_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Advertising_Data
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSecurityManagerContext
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLELinkEntry
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPInquiryEventHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Initialize
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Initialize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Initialize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Schedule_Asynchronous_Callback
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOEP_Initialize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StartTimer
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AuthenticateDevice
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Register_Fixed_Channel
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAdvertisingDataRecords
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLEScanningEventHandler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponseZeroLengthResponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleAsynchronousDispatch
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCallback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindIncludedServicesResponseEvent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverAllPrimaryServicesResponseEvent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverAllCharactisticDescriptorsResponseEvent
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewTransactionInfoEntry
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewHandleInfoEntry
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewConnectionCallbackInfoEntry
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharacteristicDiscoveryResponseEvent
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Register_Server_Channel
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Create_Service_Record
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Add_Raw_Attribute
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchRequest
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReliablePacket
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_TransmitBytes
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_ReceiveBytes
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Initialize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_TransmitBytes
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_Initialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolEventCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMDataCallback_UART
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerSABMMessageHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Register_PSM
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFixedChannelInfoEntry
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectRequest
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectIndication
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewIdentifierEntry
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewChannel
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataPacket
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILEScanningEventHandler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>

<P><STRONG><a name="[38d]"></a>BTPS_ChangeTimer</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, BTPSTMR.o(i.BTPS_ChangeTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTPS_ChangeTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
</UL>

<P><STRONG><a name="[1bf]"></a>BTPS_CleanupTimerModule</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, BTPSTMR.o(i.BTPS_CleanupTimerModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTPS_CleanupTimerModule &rArr; BTPS_DeleteFunctionFromScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_DeleteFunctionFromScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1cb]"></a>BTPS_CreateMailbox</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, btpskrnl.o(i.BTPS_CreateMailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BTPS_CreateMailbox &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
</UL>

<P><STRONG><a name="[226]"></a>BTPS_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btpskrnl.o(i.BTPS_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseStack
</UL>

<P><STRONG><a name="[1cc]"></a>BTPS_Delay</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, btpskrnl.o(i.BTPS_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BTPS_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_GetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIReset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConsoleWrite
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
</UL>

<P><STRONG><a name="[1ca]"></a>BTPS_DeleteFunctionFromScheduler</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, btpskrnl.o(i.BTPS_DeleteFunctionFromScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BTPS_DeleteFunctionFromScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Cleanup
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_CleanupTimerModule
</UL>

<P><STRONG><a name="[1ce]"></a>BTPS_DeleteMailbox</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, btpskrnl.o(i.BTPS_DeleteMailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BTPS_DeleteMailbox &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Cleanup
</UL>

<P><STRONG><a name="[1cf]"></a>BTPS_ExecuteScheduler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, btpskrnl.o(i.BTPS_ExecuteScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTPS_ExecuteScheduler &rArr; BTPS_ProcessScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_ProcessScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
</UL>

<P><STRONG><a name="[174]"></a>BTPS_FreeMemory</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, btpskrnl.o(i.BTPS_FreeMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenServer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalName
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_GAPS
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewDeviceInfoEntry
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_DeleteMailbox
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Server_Port
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Register_Service
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_Device_Name
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Scan_Response_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Advertising_Data
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousPairingStatusCallbackFunction
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cleanup
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPInquiryEventHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Initialize
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Cleanup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Initialize
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Cleanup
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Cleanup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Initialize
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Cleanup
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Schedule_Asynchronous_Callback
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CloseDriver
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Cleanup
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOEP_Cleanup
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StartTimer
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AuthenticateDevice
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Register_Fixed_Channel
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAdvertisingDataRecords
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLEScanningEventHandler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSecurityManagerResources
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeLELinkEntryMemory
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponseZeroLengthResponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseComm
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupCOMMList
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DriverCallback
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleAsynchronousDispatch
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoEntryMemory
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceDiscoveryInfoEntryMemory
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGATTContextInfoEntryMemory
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDiscoveredServiceInfoEntryMemory
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeConnectionInfoEntryMemory
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCallback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindIncludedServicesResponseEvent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverAllPrimaryServicesResponseEvent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverAllCharactisticDescriptorsResponseEvent
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewTransactionInfoEntry
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewHandleInfoEntry
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewConnectionCallbackInfoEntry
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharacteristicDiscoveryResponseEvent
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousCallback
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Register_Server_Channel
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInformationEntryMemory
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Create_Service_Record
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Add_Raw_Attribute
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchRequest
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessConnectionError
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartPacketizer
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeBufferListHead
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransmitBufferListHead
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_TransmitBytes
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Shutdown
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Initialize
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_Shutdown
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolEventCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMDataCallback_UART
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerSABMMessageHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInfoEntryMemory
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupSDPConnection
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Register_PSM
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFixedChannelInfoEntry
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectRequest
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectIndication
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeL2CAPContextInformation
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChannelInfoEntry
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewIdentifierEntry
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewChannel
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckQueuedDataWrite
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHCICallbackThread
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronousHCICommandCallback
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataPacket
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxDeleteDataCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILEScanningEventHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousSCODataCallback
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousACLDataCallback
</UL>

<P><STRONG><a name="[1cd]"></a>BTPS_GetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, btpskrnl.o(i.BTPS_GetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_ProcessScheduler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_Delay
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAndExpireTimers
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
</UL>

<P><STRONG><a name="[1d2]"></a>BTPS_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, btpskrnl.o(i.BTPS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BTPS_Init &rArr; HeapInit &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[19d]"></a>BTPS_InitializeTimerModule</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, BTPSTMR.o(i.BTPS_InitializeTimerModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTPS_InitializeTimerModule &rArr; BTPS_AddFunctionToScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AddFunctionToScheduler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1d6]"></a>BTPS_MemCompare</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, btpskrnl.o(i.BTPS_MemCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCommand
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandInterpreter
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareListEntryKeys
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAPIUUIDs
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTWUARTMessage
</UL>

<P><STRONG><a name="[154]"></a>BTPS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, btpskrnl.o(i.BTPS_MemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMWrite
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMClose
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSuspendGPIO
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendData
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEDataIndicationEvent
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveDataFromBuffer
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCodeResponse
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_GAPS
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBufferWithString
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDataToBuffer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_WaitMailbox
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AddMailbox
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConsoleWrite
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConsoleRead
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Without_Response_Request
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Set_Device_Name
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Query_Device_Name
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Name
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Random_Address_Hash
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Key_Generation
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Diversify_Function
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Confirm_Value_Generation
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAdvertisingDataRecords
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DivMaskGeneration
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPacketQueueEntry
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedWriteCommandEvent
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestResponse
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetServiceUUID
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindIncludedServicesResponseEvent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverAllPrimaryServicesResponseEvent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverAllCharactisticDescriptorsResponseEvent
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharacteristicDiscoveryResponseEvent
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildRecordTwoWordsVariable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPacketByteTwoWordsVariable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Add_Raw_Attribute
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseRecordAttributes
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAPIUUIDs
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalizeUUID
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTWUARTMessage
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReliablePacket
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_TransmitBytes
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_TransmitBytes
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolEventCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMDataCallback_UART
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Data_Write
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control_Message
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareServiceRecordWithServiceList
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_InformationRequestResponse
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_EchoRequestResponse
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestResponse
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestEvent
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronousHCICommandCallback
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataPacket
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIRemoteNameEventHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILEScanningEventHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIInquiryEventHandler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventBD_ADDRVariableData
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByteVariable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
</UL>

<P><STRONG><a name="[16c]"></a>BTPS_MemInitialize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, btpskrnl.o(i.BTPS_MemInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Event_Callback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLocalName
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_GAPS
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLinkKey
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewDeviceInfoEntry
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePortByNumber
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeapStatistics
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_AVPR_Enable
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConfigureHardware
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Update_UART_Baud_Rate
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Server_Port
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Register_Service
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Scan_Response_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Advertising_Data
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Cleanup_Service
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSecurityManagerContext
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Change_Local_Name
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPInquiryEventHandler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Initialize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Initialize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccess
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_InitializeTimerModule
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Register_Fixed_Channel
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Random_Address_Hash
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Diversify_Function
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Confirm_Value_Generation
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskEncryptionKey
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLEScanningEventHandler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DivMaskGeneration
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DriverCallback
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleAsynchronousDispatch
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextCharacteristicDiscoveryService
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatContextPduHeader
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewTransactionInfoEntry
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewHandleInfoEntry
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewConnectionCallbackInfoEntry
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPSRegisterService
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Register_Server_Channel
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildRemotePortNegotiationStructure
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPortInformationStructure
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Create_Service_Record
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Add_Raw_Attribute
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAPIUUIDs
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextServiceAttribute
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReliablePacket
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartPacketizer
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Initialize
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_Initialize
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerSABMMessageHandler
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Register_PSM
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFixedChannelInfoEntry
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectRequest
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectIndication
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewIdentifierEntry
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewChannel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILEScanningEventHandler
</UL>

<P><STRONG><a name="[1d8]"></a>BTPS_MemMove</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, btpskrnl.o(i.BTPS_MemMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTPS_MemMove &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
</UL>

<P><STRONG><a name="[168]"></a>BTPS_OutputMessage</STRONG> (Thumb, 52 bytes, Stack size 288 bytes, btpskrnl.o(i.BTPS_OutputMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxInterrupt
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIReset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserConfirmationResponse
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConnectionID
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopScan
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScan
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SniffMode
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePairingRequestResponse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetQueueParams
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalName
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAppearance
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEPairabilityMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDiscoverabilityMode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEConnectabilityMode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfigParams
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBPairabilityMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBDiscoverabilityMode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBConnectabilityMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPairingRequest
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCommand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Event_Callback
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendProcess
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendData
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEDataIndicationEvent
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveRemoteAddressHelper
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSPPLE
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteName
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteAppearance
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLocalName
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLocalAppearance
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataCommand
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryMemory
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassKeyResponse
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PairLE
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCodeResponse
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenServer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenRemoteServer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loopback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LESetPasskey
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEQueryEncryption
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEPassKeyResponse
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueueParams
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalName
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalAddress
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfigParams
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClassOfDevice
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Service_Discovery_Event_Callback
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_SPPLE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_GAPS
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Event_Callback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitSniffMode
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptionInformationRequestResponse
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpAppearanceMappings
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUUID
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRawModeData
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPairingInformation
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInquiryList
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIOCapabilities
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayHelp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionSuccess
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFWVersion
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayConnectLEUsage
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayClassOfDevice
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAdvertisingData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverSPPLE
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverGAPS
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectLEDevice
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectLE
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLEDevice
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureSPPLE
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineInterpreter
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseStack
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePortByNumber
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLEPairingParameters
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelConnectLEDevice
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelConnectLE
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutomaticReadMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCharacters
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
</UL>

<P><STRONG><a name="[1db]"></a>BTPS_ProcessAsynchronousTimers</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, BTPSTMR.o(i.BTPS_ProcessAsynchronousTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BTPS_ProcessAsynchronousTimers &rArr; UpdateAndExpireTimers
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAndExpireTimers
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
</UL>

<P><STRONG><a name="[1d0]"></a>BTPS_ProcessScheduler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, btpskrnl.o(i.BTPS_ProcessScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTPS_ProcessScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_GetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_ExecuteScheduler
</UL>

<P><STRONG><a name="[1dd]"></a>BTPS_QueryMemoryUsage</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, btpskrnl.o(i.BTPS_QueryMemoryUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BTPS_QueryMemoryUsage &rArr; GetHeapStatistics &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeapStatistics
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryMemory
</UL>

<P><STRONG><a name="[18f]"></a>BTPS_SprintF</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, btpskrnl.o(i.BTPS_SprintF))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BTPS_SprintF &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenServer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
</UL>

<P><STRONG><a name="[188]"></a>BTPS_StartTimer</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, BTPSTMR.o(i.BTPS_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BTPS_StartTimer &rArr; GetNextTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextTimerID
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StartTimer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Release_Request
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolEventCallback
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMClientSABMMessageHandler
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Response
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectResponseEvent
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestEvent
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestEvent
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayedAuthenticationProcess
</UL>

<P><STRONG><a name="[186]"></a>BTPS_StopTimer</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, BTPSTMR.o(i.BTPS_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTPS_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StopTimer
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StartTimer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeBSCTimerEntryList
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchSecurityEstablishmentCallback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingFailedPDU
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Release_Request
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Response
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolEventCallback
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveRFCOMMMessageInfoEntryByTEIAndMessage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveRFCOMMChannelInfoEntry
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerSABMMessageHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMClientSABMMessageHandler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMDataMessage
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectChannel
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupSDPConnection
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Response
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Response
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfm
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectResponseEvent
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionParameterUpdateResponseEvent
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectResponseEvent
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestEvent
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigResponseEvent
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeIdentifierInfoList
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupChannel
</UL>

<P><STRONG><a name="[1e1]"></a>BTPS_StringCopy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, btpskrnl.o(i.BTPS_StringCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTPS_StringCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_Device_Name
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Change_Local_Name
</UL>

<P><STRONG><a name="[16a]"></a>BTPS_StringLength</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, btpskrnl.o(i.BTPS_StringLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTPS_StringLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToUnsignedInteger
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringParser
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalName
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCommand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteName
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteAppearance
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataCommand
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassKeyResponse
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PairLE
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCodeResponse
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LESetPasskey
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEQueryEncryption
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEPassKeyResponse
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCommand
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverSPPLE
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverGAPS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectLE
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLE
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureSPPLE
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandInterpreter
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelConnectLE
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_Device_Name
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Set_Device_Name
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Change_Local_Name
</UL>

<P><STRONG><a name="[1c9]"></a>BTPS_TestDebugZone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, btpskrnl.o(i.BTPS_TestDebugZone))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxInterrupt
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIReset
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>

<P><STRONG><a name="[1e4]"></a>BTPS_WaitMailbox</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, btpskrnl.o(i.BTPS_WaitMailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BTPS_WaitMailbox &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHCICallbackThread
</UL>

<P><STRONG><a name="[1fd]"></a>ChangeCommSCOConfiguration</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, HCIComm.o(i.ChangeCommSCOConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ChangeCommSCOConfiguration &rArr; SearchCOMEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCOMEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ChangeSCOConfiguration
</UL>

<P><STRONG><a name="[20a]"></a>CleanupCOMMList</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, HCIComm.o(i.CleanupCOMMList))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CleanupCOMMList &rArr; FreeCOMStructureResources &rArr; HCITR_COMClose &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCOMStructureResources
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CloseDriver
</UL>

<P><STRONG><a name="[1a9]"></a>CleanupCertificateModule</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, BTPSC.o(i.CleanupCertificateModule))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[21b]"></a>CloseComm</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, HCIComm.o(i.CloseComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CloseComm &rArr; DeleteCOMEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCOMStructureResources
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCOMEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDriverStructureResources
</UL>

<P><STRONG><a name="[15c]"></a>CompareBluetoothAddress</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, BSC.o(i.CompareBluetoothAddress))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_End_Bonding
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLELinkEntry
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Encryption_Mode
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate_Remote_Device
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfmNeg
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[159]"></a>CompareNULLBluetoothAddress</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, BSC.o(i.CompareNULLBluetoothAddress))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Query_Encryption_Mode
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Disconnect
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Connection_Parameter_Update_Response
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLELinkEntry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Update_Connection_Parameters
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectRequest
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectIndication
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfmNeg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestEvent
</UL>

<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hcitrans.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EXTI15_10_IRQHandler &rArr; SetSuspendGPIO &rArr; ConfigureGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSuspendGPIO
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[290]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[37e]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMClose
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSuspendGPIO
</UL>

<P><STRONG><a name="[223]"></a>GAPS_Cleanup_Service</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, GAPS.o(i.GAPS_Cleanup_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = GAPS_Cleanup_Service &rArr; GATT_Un_Register_Service &rArr; GATT_Error_Response &rArr; PrepareWriteRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseStack
</UL>

<P><STRONG><a name="[2de]"></a>GAPS_Initialize_Service</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, GAPS.o(i.GAPS_Initialize_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = GAPS_Initialize_Service &rArr; GAPSRegisterService &rArr; GATT_Register_Service &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPSRegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[2df]"></a>GAPS_Query_Device_Appearance</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, GAPS.o(i.GAPS_Query_Device_Appearance))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GAPS_Query_Device_Appearance &rArr; AcquireServiceInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLocalAppearance
</UL>

<P><STRONG><a name="[2e0]"></a>GAPS_Query_Device_Name</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, GAPS.o(i.GAPS_Query_Device_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GAPS_Query_Device_Name &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLocalName
</UL>

<P><STRONG><a name="[2e1]"></a>GAPS_Set_Device_Appearance</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, GAPS.o(i.GAPS_Set_Device_Appearance))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GAPS_Set_Device_Appearance &rArr; AcquireServiceInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAppearance
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[2e2]"></a>GAPS_Set_Device_Name</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, GAPS.o(i.GAPS_Set_Device_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GAPS_Set_Device_Name &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalName
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[198]"></a>GAP_Authenticate_Remote_Device</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, GAP.o(i.GAP_Authenticate_Remote_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GAP_Authenticate_Remote_Device &rArr; _HCI_Authentication_Requested &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Authentication_Requested
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Get_Link_Connection_State
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackACLInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondingEventHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Event_Callback
</UL>

<P><STRONG><a name="[2e4]"></a>GAP_Authentication_Response</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, GAP.o(i.GAP_Authentication_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = GAP_Authentication_Response &rArr; _HCI_PIN_Code_Request_Reply &rArr; BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Passkey_Request_Reply
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Passkey_Request_Negative_Reply
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Confirmation_Request_Reply
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Confirmation_Request_Negative_Reply
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Send_Keypress_Notification
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_OOB_Data_Request_Reply
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_OOB_Data_Request_Negative_Reply
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_PIN_Code_Request_Reply
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_PIN_Code_Request_Negative_Reply
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Link_Key_Request_Reply
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Link_Key_Request_Negative_Reply
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_IO_Capability_Request_Reply
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_IO_Capability_Request_Negative_Reply
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackEntry
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserConfirmationResponse
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassKeyResponse
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCodeResponse
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Event_Callback
</UL>

<P><STRONG><a name="[2f2]"></a>GAP_Cancel_Bonding</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, GAP.o(i.GAP_Cancel_Bonding))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = GAP_Cancel_Bonding &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Command_Supported
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Disconnect
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Create_Connection_Cancel
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Get_Link_Connection_State
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLLinkEntryBD_ADDR
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackEntry
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Pairability_Mode
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_End_Bonding
</UL>

<P><STRONG><a name="[1b4]"></a>GAP_Cleanup</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, GAP.o(i.GAP_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GAP_Cleanup &rArr; GAP_LE_Cleanup &rArr; FreeLELinkList &rArr; FreeLELinkEntryMemory &rArr; FreeSecurityManagerResources &rArr; DeleteCallbackInfoByType &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cleanup
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeInquiryResultList
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCallbackList
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeACLLinkList
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnRegisterEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[297]"></a>GAP_End_Bonding</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, GAP.o(i.GAP_End_Bonding))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = GAP_End_Bonding &rArr; GAP_Cancel_Bonding &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackEntry
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPairing
</UL>

<P><STRONG><a name="[1ae]"></a>GAP_Initialize</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, GAP.o(i.GAP_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = GAP_Initialize &rArr; GAP_LE_Initialize &rArr; HCI_Query_LE_Controller_Support &rArr; DetermineLEControllerSupport &rArr; _HCI_Read_Local_Supported_Features &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Version_Supported
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Register_Event_Callback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_BD_ADDR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnRegisterEventCallback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_RegisterEventCallback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[2f9]"></a>GAP_Initiate_Bonding</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, GAP.o(i.GAP_Initiate_Bonding))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = GAP_Initiate_Bonding &rArr; HCI_Build_ACL_Packet_Type_Mask &rArr; _HCI_Read_Local_Supported_Features &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Delete_Stored_Link_Key
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Create_Connection
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Build_ACL_Packet_Type_Mask
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackEntry
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLLinkEntryBD_ADDR
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackEntry
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCallbackEntry
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair
</UL>

<P><STRONG><a name="[23f]"></a>GAP_LE_Add_Device_To_White_List</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, GAPLE.o(i.GAP_LE_Add_Device_To_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = GAP_LE_Add_Device_To_White_List &rArr; _HCI_LE_Add_Device_To_White_List &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignHCIAddressType
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Add_Device_To_White_List
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLEDevice
</UL>

<P><STRONG><a name="[167]"></a>GAP_LE_Advertising_Disable</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, GAPLE.o(i.GAP_LE_Advertising_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = GAP_LE_Advertising_Disable &rArr; _HCI_LE_Set_Advertise_Enable &rArr; BuildAndSubmitCommandByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertise_Enable
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Enable
</UL>

<P><STRONG><a name="[170]"></a>GAP_LE_Advertising_Enable</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, GAPLE.o(i.GAP_LE_Advertising_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = GAP_LE_Advertising_Enable &rArr; _HCI_LE_Set_Advertising_Parameters &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignHCIAddressType
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertising_Parameters
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertise_Enable
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToBasebandSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
</UL>

<P><STRONG><a name="[296]"></a>GAP_LE_Authentication_Response</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, GAPLE.o(i.GAP_LE_Authentication_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = GAP_LE_Authentication_Response &rArr; AuthenticationResponsePasskeyConfirmationResponse &rArr; BuildAndSendPairingConfirmPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignHCIAddressType
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ScheduleAsynchronousCallback
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Long_Term_Key_Request_Reply
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityManagerChannelWrite
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskEncryptionKey
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSecurityManagerResources
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingPDU
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingFailedPDU
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendEncryptKey
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponseZeroLengthResponse
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePairingRequestResponse
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEPassKeyResponse
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptionInformationRequestResponse
</UL>

<P><STRONG><a name="[1fc]"></a>GAP_LE_Cancel_Create_Connection</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, GAPLE.o(i.GAP_LE_Cancel_Create_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = GAP_LE_Cancel_Create_Connection &rArr; _HCI_LE_Create_Connection_Cancel &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Create_Connection_Cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelConnectLEDevice
</UL>

<P><STRONG><a name="[304]"></a>GAP_LE_Cancel_Scan</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, GAPLE.o(i.GAP_LE_Cancel_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = GAP_LE_Cancel_Scan &rArr; _HCI_LE_Set_Scan_Enable &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Enable
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopScan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Enable
</UL>

<P><STRONG><a name="[2f5]"></a>GAP_LE_Cleanup</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, GAPLE.o(i.GAP_LE_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GAP_LE_Cleanup &rArr; FreeLELinkList &rArr; FreeLELinkEntryMemory &rArr; FreeSecurityManagerResources &rArr; DeleteCallbackInfoByType &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPLEContext
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeLELinkList
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCallbackInfoList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
</UL>

<P><STRONG><a name="[306]"></a>GAP_LE_Connection_Parameter_Update_Response</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, GAPLE.o(i.GAP_LE_Connection_Parameter_Update_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = GAP_LE_Connection_Parameter_Update_Response &rArr; _L2CA_Connection_Parameter_Update_Response &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connection_Parameter_Update_Response
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Update_Connection_Parameters
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestValidConnectionParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[240]"></a>GAP_LE_Create_Connection</STRONG> (Thumb, 426 bytes, Stack size 112 bytes, GAPLE.o(i.GAP_LE_Create_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = GAP_LE_Create_Connection &rArr; _HCI_LE_Create_Connection &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignHCIAddressType
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Create_Connection
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestValidScanParameters
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestValidConnectionParameters
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToTwoBasebandSlots
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToBasebandSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLEDevice
</UL>

<P><STRONG><a name="[274]"></a>GAP_LE_Disconnect</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, GAPLE.o(i.GAP_LE_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = GAP_LE_Disconnect &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Disconnect
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectLEDevice
</UL>

<P><STRONG><a name="[30c]"></a>GAP_LE_Diversify_Function</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, GAPLE.o(i.GAP_LE_Diversify_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GAP_LE_Diversify_Function &rArr; SM_Diversify_Function &rArr; _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Diversify_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[194]"></a>GAP_LE_Enable</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, GAPLE.o(i.GAP_LE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = GAP_LE_Enable &rArr; GAP_LE_Cancel_Scan &rArr; _HCI_LE_Set_Scan_Enable &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Scan
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Disable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseGAPLEContext
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPLEContext
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_EnableFeature
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DisableFeature
</UL>

<P><STRONG><a name="[295]"></a>GAP_LE_Generate_Long_Term_Key</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, GAPLE.o(i.GAP_LE_Generate_Long_Term_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = GAP_LE_Generate_Long_Term_Key &rArr; _HCI_LE_Rand &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Rand
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Diversify_Function
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DivMaskGeneration
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptionInformationRequestResponse
</UL>

<P><STRONG><a name="[2f8]"></a>GAP_LE_Initialize</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, GAPLE.o(i.GAP_LE_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = GAP_LE_Initialize &rArr; HCI_Query_LE_Controller_Support &rArr; DetermineLEControllerSupport &rArr; _HCI_Read_Local_Supported_Features &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Version_Supported
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Register_Event_Callback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_BD_ADDR
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Query_LE_Controller_Support
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Read_White_List_Size
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Register_Fixed_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
</UL>

<P><STRONG><a name="[315]"></a>GAP_LE_Pair_Remote_Device</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, GAPLE.o(i.GAP_LE_Pair_Remote_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = GAP_LE_Pair_Remote_Device &rArr; BuildAndSendPairingPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSecurityManagerContext
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSecurityManagerResources
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPairingRequest
</UL>

<P><STRONG><a name="[316]"></a>GAP_LE_Perform_Scan</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, GAPLE.o(i.GAP_LE_Perform_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = GAP_LE_Perform_Scan &rArr; _HCI_LE_Set_Scan_Enable &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignHCIAddressType
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Parameters
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Enable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestValidScanParameters
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackInfoByType
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToBasebandSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScan
</UL>

<P><STRONG><a name="[318]"></a>GAP_LE_Query_Encryption_Mode</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, GAPLE.o(i.GAP_LE_Query_Encryption_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GAP_LE_Query_Encryption_Mode &rArr; AcquireGAPStackLELinkInfo &rArr; AcquireGAPStackInfo &rArr; AcquireGAPLEContext &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEQueryEncryption
</UL>

<P><STRONG><a name="[30e]"></a>GAP_LE_Reestablish_Security</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, GAPLE.o(i.GAP_LE_Reestablish_Security))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = GAP_LE_Reestablish_Security &rArr; BuildAndSendSlaveSecurityRequestPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Start_Encryption
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskEncryptionKey
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendSlaveSecurityRequestPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[310]"></a>GAP_LE_Regenerate_Long_Term_Key</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, GAPLE.o(i.GAP_LE_Regenerate_Long_Term_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = GAP_LE_Regenerate_Long_Term_Key &rArr; SM_Diversify_Function &rArr; _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Diversify_Function
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DivMaskGeneration
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[319]"></a>GAP_LE_Register_Remote_Authentication</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, GAPLE.o(i.GAP_LE_Register_Remote_Authentication))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = GAP_LE_Register_Remote_Authentication &rArr; CreateCallbackInfoEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackInfoByType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPairable
</UL>

<P><STRONG><a name="[23e]"></a>GAP_LE_Remove_Device_From_White_List</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, GAPLE.o(i.GAP_LE_Remove_Device_From_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = GAP_LE_Remove_Device_From_White_List &rArr; _HCI_LE_Remove_Device_From_White_List &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignHCIAddressType
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Remove_Device_From_White_List
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Clear_White_List
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLEDevice
</UL>

<P><STRONG><a name="[31c]"></a>GAP_LE_Request_Security</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, GAPLE.o(i.GAP_LE_Request_Security))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = GAP_LE_Request_Security &rArr; BuildAndSendSlaveSecurityRequestPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSecurityManagerContext
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSecurityManagerResources
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendSlaveSecurityRequestPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPairingRequest
</UL>

<P><STRONG><a name="[31d]"></a>GAP_LE_Resolve_Address</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, GAPLE.o(i.GAP_LE_Resolve_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GAP_LE_Resolve_Address &rArr; SM_Random_Address_Hash &rArr; _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Random_Address_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveRemoteAddressHelper
</UL>

<P><STRONG><a name="[16d]"></a>GAP_LE_Set_Advertising_Data</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, GAPLE.o(i.GAP_LE_Set_Advertising_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GAP_LE_Set_Advertising_Data &rArr; _HCI_LE_Set_Advertising_Data &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertising_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
</UL>

<P><STRONG><a name="[320]"></a>GAP_LE_Set_Fixed_Passkey</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, GAPLE.o(i.GAP_LE_Set_Fixed_Passkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GAP_LE_Set_Fixed_Passkey &rArr; AcquireGAPStackInfo &rArr; AcquireGAPLEContext &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LESetPasskey
</UL>

<P><STRONG><a name="[321]"></a>GAP_LE_Set_Pairability_Mode</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, GAPLE.o(i.GAP_LE_Set_Pairability_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GAP_LE_Set_Pairability_Mode &rArr; AcquireGAPStackInfo &rArr; AcquireGAPLEContext &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPairable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEPairabilityMode
</UL>

<P><STRONG><a name="[16e]"></a>GAP_LE_Set_Scan_Response_Data</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, GAPLE.o(i.GAP_LE_Set_Scan_Response_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GAP_LE_Set_Scan_Response_Data &rArr; _HCI_LE_Set_Scan_Response_Data &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Response_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
</UL>

<P><STRONG><a name="[308]"></a>GAP_LE_Update_Connection_Parameters</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, GAPLE.o(i.GAP_LE_Update_Connection_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = GAP_LE_Update_Connection_Parameters &rArr; _HCI_LE_Connection_Update &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Connection_Update
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestValidConnectionParameters
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToTwoBasebandSlots
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToBasebandSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Connection_Parameter_Update_Response
</UL>

<P><STRONG><a name="[324]"></a>GAP_Perform_Inquiry</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, GAP.o(i.GAP_Perform_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = GAP_Perform_Inquiry &rArr; _HCI_Periodic_Inquiry_Mode &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Periodic_Inquiry_Mode
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Inquiry
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inquiry
</UL>

<P><STRONG><a name="[327]"></a>GAP_Query_Class_Of_Device</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, GAP.o(i.GAP_Query_Class_Of_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = GAP_Query_Class_Of_Device &rArr; _HCI_Read_Class_of_Device &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Class_of_Device
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClassOfDevice
</UL>

<P><STRONG><a name="[329]"></a>GAP_Query_Connection_Handle</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, GAP.o(i.GAP_Query_Connection_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GAP_Query_Connection_Handle &rArr; AcquireGAPStackACLInfo &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackACLInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Event_Callback
</UL>

<P><STRONG><a name="[32a]"></a>GAP_Query_Local_BD_ADDR</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, GAP.o(i.GAP_Query_Local_BD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GAP_Query_Local_BD_ADDR &rArr; AcquireGAPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalAddress
</UL>

<P><STRONG><a name="[32b]"></a>GAP_Query_Local_Device_Name</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, GAP.o(i.GAP_Query_Local_Device_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = GAP_Query_Local_Device_Name &rArr; _HCI_Read_Local_Name &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringCopy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Name
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalName
</UL>

<P><STRONG><a name="[32d]"></a>GAP_Query_Remote_Device_Name</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, GAP.o(i.GAP_Query_Remote_Device_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = GAP_Query_Remote_Device_Name &rArr; _HCI_Remote_Name_Request &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_Name_Request
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackEntry
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackEntry
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCallbackEntry
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemoteName
</UL>

<P><STRONG><a name="[32f]"></a>GAP_Register_Remote_Authentication</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, GAP.o(i.GAP_Register_Remote_Authentication))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GAP_Register_Remote_Authentication &rArr; AcquireGAPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPairable
</UL>

<P><STRONG><a name="[330]"></a>GAP_Set_Class_Of_Device</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, GAP.o(i.GAP_Set_Class_Of_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = GAP_Set_Class_Of_Device &rArr; _HCI_Write_Class_of_Device &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Class_of_Device
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClassOfDevice
</UL>

<P><STRONG><a name="[332]"></a>GAP_Set_Connectability_Mode</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, GAP.o(i.GAP_Set_Connectability_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = GAP_Set_Connectability_Mode &rArr; _HCI_Read_Scan_Enable &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Scan_Enable
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Scan_Enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConnect
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBConnectabilityMode
</UL>

<P><STRONG><a name="[276]"></a>GAP_Set_Discoverability_Mode</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, GAP.o(i.GAP_Set_Discoverability_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = GAP_Set_Discoverability_Mode &rArr; _HCI_Write_Current_IAC_LAP &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Scan_Enable
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Current_IAC_LAP
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Class_of_Device
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Scan_Enable
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Class_of_Device
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBDiscoverabilityMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discoverability_Timeout_Callback
</UL>

<P><STRONG><a name="[336]"></a>GAP_Set_Encryption_Mode</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, GAP.o(i.GAP_Set_Encryption_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = GAP_Set_Encryption_Mode &rArr; _HCI_Write_Encryption_Mode &rArr; BuildAndSubmitCommandByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Encryption_Mode
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Set_Connection_Encryption
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLLinkEntryBD_ADDR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[339]"></a>GAP_Set_Local_Device_Name</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, GAP.o(i.GAP_Set_Local_Device_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = GAP_Set_Local_Device_Name &rArr; _HCI_Change_Local_Name &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Change_Local_Name
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalName
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[33b]"></a>GAP_Set_Pairability_Mode</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, GAP.o(i.GAP_Set_Pairability_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = GAP_Set_Pairability_Mode &rArr; GAP_Cancel_Bonding &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Version_Supported
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Simple_Pairing_Mode
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPairable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBPairabilityMode
</UL>

<P><STRONG><a name="[33d]"></a>GATT_Cancel_Transaction</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, GATT.o(i.GATT_Cancel_Transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GATT_Cancel_Transaction &rArr; DeleteFreeTransactionInfoEntry &rArr; DeleteTransactionInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionInfoEntry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextConnectionInfoEntry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
</UL>

<P><STRONG><a name="[225]"></a>GATT_Cleanup</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, GATT.o(i.GATT_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GATT_Cleanup &rArr; FreeGATTContextInfoEntryMemory &rArr; L2CA_Un_Register_Fixed_Channel &rArr; AcquireL2CAPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_LockBluetoothStack
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGATTContextInfoEntryMemory
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteGATTContextInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseStack
</UL>

<P><STRONG><a name="[201]"></a>GATT_Discover_Characteristic_Descriptors</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, GATT.o(i.GATT_Discover_Characteristic_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = GATT_Discover_Characteristic_Descriptors &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharacteristicDescriptorDiscoveryRequest
</UL>

<P><STRONG><a name="[203]"></a>GATT_Discover_Characteristics</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, GATT.o(i.GATT_Discover_Characteristics))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = GATT_Discover_Characteristics &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharacteristicDiscoveryRequest
</UL>

<P><STRONG><a name="[34b]"></a>GATT_Discover_Included_Services</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, GATT.o(i.GATT_Discover_Included_Services))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = GATT_Discover_Included_Services &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncludeDiscoveryRequest
</UL>

<P><STRONG><a name="[343]"></a>GATT_Discover_Services</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, GATT.o(i.GATT_Discover_Services))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = GATT_Discover_Services &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[34c]"></a>GATT_Error_Response</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, GATT.o(i.GATT_Error_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = GATT_Error_Response &rArr; PrepareWriteRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareWriteRequestResponse
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextHandleInfoEntry
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestResponse
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByServerTransactionID
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
</UL>

<P><STRONG><a name="[349]"></a>GATT_Exchange_MTU_Request</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, GATT.o(i.GATT_Exchange_MTU_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = GATT_Exchange_MTU_Request &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByConnectionID
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
</UL>

<P><STRONG><a name="[34e]"></a>GATT_Handle_Value_Notification</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, GATT.o(i.GATT_Handle_Value_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPacketByteTwoWordsVariable
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByConnectionID
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendProcess
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendData
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendCredits
</UL>

<P><STRONG><a name="[34f]"></a>GATT_Initialize</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, GATT.o(i.GATT_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = GATT_Initialize &rArr; GATT_Register_Service &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Register_Service
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_LockBluetoothStack
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Register_Fixed_Channel
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeGATTModule
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchGATTContextInfoEntry
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGATTContextInfoEntryMemory
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteGATTContextInfoEntry
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewConnectionCallbackInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[351]"></a>GATT_Read_Response</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, GATT.o(i.GATT_Read_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = GATT_Read_Response &rArr; ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestResponse
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestResponse
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoEntryMemory
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatContextPduHeader
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTransactionInfoEntry
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByServerTransactionID
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
</UL>

<P><STRONG><a name="[340]"></a>GATT_Read_Value_Request</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, GATT.o(i.GATT_Read_Value_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = GATT_Read_Value_Request &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteName
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteAppearance
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[2dd]"></a>GATT_Register_Service</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, GATT.o(i.GATT_Register_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GATT_Register_Service &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateServiceArray
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddServiceInformation
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSPPLE
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPSRegisterService
</UL>

<P><STRONG><a name="[359]"></a>GATT_Set_Queuing_Parameters</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, GATT.o(i.GATT_Set_Queuing_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GATT_Set_Queuing_Parameters &rArr; AcquireGATTStackInformation &rArr; SearchGATTContextInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[275]"></a>GATT_Start_Service_Discovery</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, GATT.o(i.GATT_Start_Service_Discovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = GATT_Start_Service_Discovery &rArr; StartServiceDiscovery &rArr; GATT_Discover_Services &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverSPPLE
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverGAPS
</UL>

<P><STRONG><a name="[224]"></a>GATT_Un_Register_Service</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, GATT.o(i.GATT_Un_Register_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = GATT_Un_Register_Service &rArr; GATT_Error_Response &rArr; PrepareWriteRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextTransactionInfoEntry
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextHandleInfoEntry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextConnectionInfoEntry
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseStack
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Cleanup_Service
</UL>

<P><STRONG><a name="[291]"></a>GATT_Write_Request</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, GATT.o(i.GATT_Write_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = GATT_Write_Request &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableNotificationsIndications
</UL>

<P><STRONG><a name="[355]"></a>GATT_Write_Response</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, GATT.o(i.GATT_Write_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = GATT_Write_Response &rArr; PrepareWriteRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareWriteRequestResponse
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoEntryMemory
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatContextPduHeader
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTransactionInfoEntry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByServerTransactionID
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
</UL>

<P><STRONG><a name="[35b]"></a>GATT_Write_Without_Response_Request</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, GATT.o(i.GATT_Write_Without_Response_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = GATT_Write_Without_Response_Request &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByConnectionID
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendProcess
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendData
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendCredits
</UL>

<P><STRONG><a name="[1b2]"></a>GOEP_Cleanup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, GOEP.o(i.GOEP_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GOEP_Cleanup &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInfoList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1b0]"></a>GOEP_Initialize</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, GOEP.o(i.GOEP_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GOEP_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[237]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureGPIO
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConfigureHardware
</UL>

<P><STRONG><a name="[367]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConfigureHardware
</UL>

<P><STRONG><a name="[36f]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LedToggle
</UL>

<P><STRONG><a name="[36b]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMClose
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LedOff
</UL>

<P><STRONG><a name="[36d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSuspendGPIO
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LedOn
</UL>

<P><STRONG><a name="[1a8]"></a>GetAccess</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, BTPSC.o(i.GetAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetAccess &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1a7]"></a>GetCertCurrentDate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, BTPSC.o(i.GetCertCurrentDate))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1a5]"></a>GetCertLength</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, BTPSC.o(i.GetCertLength))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1a6]"></a>GetCertPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, BTPSC.o(i.GetCertPtr))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[365]"></a>HAL_ConfigureHardware</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, hal.o(i.HAL_ConfigureHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_ConfigureHardware &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[360]"></a>HAL_ConsoleRead</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, hal.o(i.HAL_ConsoleRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ConsoleRead &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInput
</UL>

<P><STRONG><a name="[93]"></a>HAL_ConsoleWrite</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, hal.o(i.HAL_ConsoleWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ConsoleWrite &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_Delay
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MainThread)
</UL>
<P><STRONG><a name="[36a]"></a>HAL_LedOff</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal.o(i.HAL_LedOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LedToggle
</UL>

<P><STRONG><a name="[36c]"></a>HAL_LedOn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal.o(i.HAL_LedOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LedOn
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LedToggle
</UL>

<P><STRONG><a name="[36e]"></a>HAL_LedToggle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(i.HAL_LedToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LedToggle &rArr; HAL_LedOn
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LedOn
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LedOff
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleLED
</UL>

<P><STRONG><a name="[376]"></a>HCILL_Initialize</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, HCILL.o(i.HCILL_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = HCILL_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeProtocol
</UL>

<P><STRONG><a name="[f5]"></a>HCILL_ReceiveBytes</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, HCILL.o(i.HCILL_ReceiveBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCILL_ReceiveBytes &rArr; SendQueuedPackets &rArr; FreeTransmitBufferListHead &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitData
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepIndication
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueuedPackets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>HCILL_Reconfigure</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, HCILL.o(i.HCILL_Reconfigure))
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>HCILL_Resynchronize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HCILL.o(i.HCILL_Resynchronize))
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>HCILL_Shutdown</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, HCILL.o(i.HCILL_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HCILL_Shutdown &rArr; FreeTransmitBufferListHead &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransmitBufferListHead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>HCILL_TransmitBytes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, HCILL.o(i.HCILL_TransmitBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HCILL_TransmitBytes &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitData
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepIndication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(.constdata)
</UL>
<P><STRONG><a name="[2b6]"></a>HCITR_COMClose</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, hcitrans.o(i.HCITR_COMClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HCITR_COMClose &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCOMStructureResources
</UL>

<P><STRONG><a name="[37f]"></a>HCITR_COMOpen</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, hcitrans.o(i.HCITR_COMOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HCITR_COMOpen &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureGPIO
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_Delay
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
</UL>

<P><STRONG><a name="[385]"></a>HCITR_COMProcess</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hcitrans.o(i.HCITR_COMProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HCITR_COMProcess &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessComm
</UL>

<P><STRONG><a name="[387]"></a>HCITR_COMReconfigure</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hcitrans.o(i.HCITR_COMReconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HCITR_COMReconfigure &rArr; SetBaudRate &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReconfigureComm
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolEventCallback
</UL>

<P><STRONG><a name="[388]"></a>HCITR_COMWrite</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, hcitrans.o(i.HCITR_COMWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HCITR_COMWrite &rArr; SetSuspendGPIO &rArr; ConfigureGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSuspendGPIO
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommPacket
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolEventCallback
</UL>

<P><STRONG><a name="[2fb]"></a>HCI_Build_ACL_Packet_Type_Mask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, HCI.o(i.HCI_Build_ACL_Packet_Type_Mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = HCI_Build_ACL_Packet_Type_Mask &rArr; _HCI_Read_Local_Supported_Features &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Supported_Features
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
</UL>

<P><STRONG><a name="[37c]"></a>HCI_CancelPacket</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, HCIDrv.o(i.HCI_CancelPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HCI_CancelPacket &rArr; SendHCIPacketToLowerDriver &rArr;  SendHCIPacketToLowerDriver (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHCIPacketToLowerDriver
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeletePacketQueueEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
</UL>

<P><STRONG><a name="[390]"></a>HCI_ChangeSCOConfiguration</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, HCIDrv.o(i.HCI_ChangeSCOConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HCI_ChangeSCOConfiguration &rArr; ChangeCommSCOConfiguration &rArr; SearchCOMEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommSCOConfiguration
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Change_SCO_Configuration
</UL>

<P><STRONG><a name="[391]"></a>HCI_ChangeSCOConfigurationHandles</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, HCIDrv.o(i.HCI_ChangeSCOConfigurationHandles))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HCI_ChangeSCOConfigurationHandles &rArr; SearchDriverEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Change_SCO_Configuration_Handles
</UL>

<P><STRONG><a name="[392]"></a>HCI_Change_SCO_Configuration</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, HCI.o(i.HCI_Change_SCO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HCI_Change_SCO_Configuration &rArr; HCI_ChangeSCOConfiguration &rArr; ChangeCommSCOConfiguration &rArr; SearchCOMEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ChangeSCOConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Cleanup
</UL>

<P><STRONG><a name="[393]"></a>HCI_Change_SCO_Configuration_Handles</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, HCI.o(i.HCI_Change_SCO_Configuration_Handles))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HCI_Change_SCO_Configuration_Handles &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ChangeSCOConfigurationHandles
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Cleanup
</UL>

<P><STRONG><a name="[1ba]"></a>HCI_Cleanup</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, HCI.o(i.HCI_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HCI_Cleanup &rArr; HCI_UnRegisterCallback &rArr; SearchDriverEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_DeleteMailbox
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_DeleteFunctionFromScheduler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_UnRegisterCallback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCallbackList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1bd]"></a>HCI_CloseDriver</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, HCIDrv.o(i.HCI_CloseDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HCI_CloseDriver &rArr; FreeDriverStructureResources &rArr; CloseComm &rArr; DeleteCOMEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupCOMMList
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDriverStructureResources
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DriverCallback
</UL>

<P><STRONG><a name="[2f3]"></a>HCI_Command_Supported</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, HCI.o(i.HCI_Command_Supported))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HCI_Command_Supported &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
</UL>

<P><STRONG><a name="[25c]"></a>HCI_Delete_Stored_Link_Key</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, HCI.o(i.HCI_Delete_Stored_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = HCI_Delete_Stored_Link_Key &rArr; _HCI_Delete_Stored_Link_Key &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Delete_Stored_Link_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLinkKey
</UL>

<P><STRONG><a name="[29f]"></a>HCI_Exit_Sniff_Mode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, HCI.o(i.HCI_Exit_Sniff_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = HCI_Exit_Sniff_Mode &rArr; _HCI_Exit_Sniff_Mode &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Exit_Sniff_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitSniffMode
</UL>

<P><STRONG><a name="[1a1]"></a>HCI_Initialize</STRONG> (Thumb, 522 bytes, Stack size 56 bytes, HCI.o(i.HCI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = HCI_Initialize &rArr; HCI_Reset &rArr; HCI_VS_InitializeAfterHCIReset &rArr; DownloadPatch &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_DeleteMailbox
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_DeleteFunctionFromScheduler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_CreateMailbox
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AddFunctionToScheduler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_UnRegisterCallback
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySharedBuffer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterSCODataCallback
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterEventCallback
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterACLDataCallback
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_LE_Host_Supported
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Set_Event_Mask
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Version_Information
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Supported_Commands
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineLEControllerSupport
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[3af]"></a>HCI_LE_Read_Buffer_Size</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, HCI.o(i.HCI_LE_Read_Buffer_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = HCI_LE_Read_Buffer_Size &rArr; _HCI_LE_Read_Buffer_Size &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Read_Buffer_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[16f]"></a>HCI_LE_Set_Random_Address</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, HCI.o(i.HCI_LE_Set_Random_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = HCI_LE_Set_Random_Address &rArr; _HCI_LE_Set_Random_Address &rArr; BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Random_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
</UL>

<P><STRONG><a name="[19f]"></a>HCI_OpenDriver</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, HCIDrv.o(i.HCI_OpenDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = HCI_OpenDriver &rArr; OpenComm &rArr; InitializeProtocol &rArr; TWUART_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeCOMMList
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseComm
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextCallbackPacketID
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[37b]"></a>HCI_ProcessHCIDriverInformation</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, HCIDrv.o(i.HCI_ProcessHCIDriverInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCI_ProcessHCIDriverInformation &rArr; ProcessComm &rArr; SearchCOMEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessComm
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHCICallbackThread
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
</UL>

<P><STRONG><a name="[1bc]"></a>HCI_Query_LE_Controller_Support</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, HCI.o(i.HCI_Query_LE_Controller_Support))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = HCI_Query_LE_Controller_Support &rArr; DetermineLEControllerSupport &rArr; _HCI_Read_Local_Supported_Features &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_LE_Host_Supported
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineLEControllerSupport
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
</UL>

<P><STRONG><a name="[284]"></a>HCI_Read_Local_Version_Information</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, HCI.o(i.HCI_Read_Local_Version_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = HCI_Read_Local_Version_Information &rArr; _HCI_Read_Local_Version_Information &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Version_Information
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFWVersion
</UL>

<P><STRONG><a name="[3b7]"></a>HCI_ReconfigureDriver</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, HCIDrv.o(i.HCI_ReconfigureDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = HCI_ReconfigureDriver &rArr; ReconfigureComm &rArr; InitializeProtocol &rArr; TWUART_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReconfigureComm
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reconfigure_Driver
</UL>

<P><STRONG><a name="[3b9]"></a>HCI_Reconfigure_Driver</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, HCI.o(i.HCI_Reconfigure_Driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = HCI_Reconfigure_Driver &rArr; HCI_ReconfigureDriver &rArr; ReconfigureComm &rArr; InitializeProtocol &rArr; TWUART_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReconfigureDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIReset
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Update_UART_Baud_Rate
</UL>

<P><STRONG><a name="[3a8]"></a>HCI_RegisterACLDataCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HCIDrv.o(i.HCI_RegisterACLDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCI_RegisterACLDataCallback &rArr; RegisterCallback &rArr; SearchDriverEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
</UL>

<P><STRONG><a name="[3a7]"></a>HCI_RegisterEventCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HCIDrv.o(i.HCI_RegisterEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCI_RegisterEventCallback &rArr; RegisterCallback &rArr; SearchDriverEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
</UL>

<P><STRONG><a name="[3a9]"></a>HCI_RegisterSCODataCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HCIDrv.o(i.HCI_RegisterSCODataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCI_RegisterSCODataCallback &rArr; RegisterCallback &rArr; SearchDriverEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
</UL>

<P><STRONG><a name="[3bb]"></a>HCI_Register_ACL_Data_Callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HCI.o(i.HCI_Register_ACL_Data_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HCI_Register_ACL_Data_Callback &rArr; RegisterCallback &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
</UL>

<P><STRONG><a name="[2f7]"></a>HCI_Register_Event_Callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HCI.o(i.HCI_Register_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HCI_Register_Event_Callback &rArr; RegisterCallback &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
</UL>

<P><STRONG><a name="[3bd]"></a>HCI_Register_SCO_Data_Callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HCI.o(i.HCI_Register_SCO_Data_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HCI_Register_SCO_Data_Callback &rArr; RegisterCallback &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
</UL>

<P><STRONG><a name="[3aa]"></a>HCI_Reset</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, HCI.o(i.HCI_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = HCI_Reset &rArr; HCI_VS_InitializeAfterHCIReset &rArr; DownloadPatch &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeBeforeHCIReset
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIReset
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AddMailbox
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
</UL>

<P><STRONG><a name="[1c2]"></a>HCI_Schedule_Asynchronous_Callback</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, HCI.o(i.HCI_Schedule_Asynchronous_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HCI_Schedule_Asynchronous_Callback &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AddMailbox
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ScheduleAsynchronousCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[37a]"></a>HCI_SendPacket</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, HCIDrv.o(i.HCI_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHCIPacketToLowerDriver
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextCallbackPacketID
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeletePacketQueueEntry
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPacketQueueEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
</UL>

<P><STRONG><a name="[3c0]"></a>HCI_Send_ACL_Data</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, HCI.o(i.HCI_Send_ACL_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
</UL>

<P><STRONG><a name="[28b]"></a>HCI_Send_Raw_Command</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, HCI.o(i.HCI_Send_Raw_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadPatch
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Update_HCILL_Parameters
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Enable_Sleep_Mode
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_DisableBLE
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_AVPR_Enable
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Update_UART_Baud_Rate
</UL>

<P><STRONG><a name="[3c2]"></a>HCI_Sniff_Mode</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, HCI.o(i.HCI_Sniff_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = HCI_Sniff_Mode &rArr; _HCI_Sniff_Mode &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Sniff_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SniffMode
</UL>

<P><STRONG><a name="[394]"></a>HCI_UnRegisterCallback</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, HCIDrv.o(i.HCI_UnRegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HCI_UnRegisterCallback &rArr; SearchDriverEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Cleanup
</UL>

<P><STRONG><a name="[195]"></a>HCI_VS_DisableFeature</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, btpsvend.o(i.HCI_VS_DisableFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = HCI_VS_DisableFeature &rArr; VS_DisableBLE &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_QueryActiveFeatures
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_DisableBLE
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_AVPR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DisableFeature
</UL>

<P><STRONG><a name="[197]"></a>HCI_VS_EnableFeature</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, btpsvend.o(i.HCI_VS_EnableFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = HCI_VS_EnableFeature &rArr; DownloadPatch &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_QueryActiveFeatures
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadPatch
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_AVPR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_EnableFeature
</UL>

<P><STRONG><a name="[1c4]"></a>HCI_VS_InitializeAfterHCIClose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btpsvend.o(i.HCI_VS_InitializeAfterHCIClose))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
</UL>

<P><STRONG><a name="[1a0]"></a>HCI_VS_InitializeAfterHCIOpen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, btpsvend.o(i.HCI_VS_InitializeAfterHCIOpen))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[3bf]"></a>HCI_VS_InitializeAfterHCIReset</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, btpsvend.o(i.HCI_VS_InitializeAfterHCIReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = HCI_VS_InitializeAfterHCIReset &rArr; DownloadPatch &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadPatch
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_TestDebugZone
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Update_HCILL_Parameters
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Enable_Sleep_Mode
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reconfigure_Driver
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_Delay
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Update_UART_Baud_Rate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
</UL>

<P><STRONG><a name="[1b9]"></a>HCI_VS_InitializeBeforeHCIClose</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, btpsvend.o(i.HCI_VS_InitializeBeforeHCIClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = HCI_VS_InitializeBeforeHCIClose &rArr; VS_Update_UART_Baud_Rate &rArr; HCI_Reconfigure_Driver &rArr; HCI_ReconfigureDriver &rArr; ReconfigureComm &rArr; InitializeProtocol &rArr; TWUART_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Enable_Sleep_Mode
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Update_UART_Baud_Rate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[19e]"></a>HCI_VS_InitializeBeforeHCIOpen</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, btpsvend.o(i.HCI_VS_InitializeBeforeHCIOpen))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[3be]"></a>HCI_VS_InitializeBeforeHCIReset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, btpsvend.o(i.HCI_VS_InitializeBeforeHCIReset))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
</UL>

<P><STRONG><a name="[2f6]"></a>HCI_Version_Supported</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, HCI.o(i.HCI_Version_Supported))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HCI_Version_Supported &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Pairability_Mode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
</UL>

<P><STRONG><a name="[3c9]"></a>HCI_Write_Default_Link_Policy_Settings</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, HCI.o(i.HCI_Write_Default_Link_Policy_Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = HCI_Write_Default_Link_Policy_Settings &rArr; _HCI_Write_Default_Link_Policy_Settings &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Default_Link_Policy_Settings
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[3cb]"></a>HCI_Write_SCO_Flow_Control_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, HCI.o(i.HCI_Write_SCO_Flow_Control_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = HCI_Write_SCO_Flow_Control_Enable &rArr; _HCI_Write_SCO_Flow_Control_Enable &rArr; BuildAndSubmitCommandByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_SCO_Flow_Control_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
</UL>

<P><STRONG><a name="[3cf]"></a>InitializeApplication</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, sppledemo.o(i.InitializeApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = InitializeApplication &rArr; CloseStack &rArr; GAPS_Cleanup_Service &rArr; GATT_Un_Register_Service &rArr; GATT_Error_Response &rArr; PrepareWriteRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Selection
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPairable
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisc
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConnect
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseStack
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Register_Event_Callback
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
</UL>

<P><STRONG><a name="[19c]"></a>InitializeBSCModule</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, BSC.o(i.InitializeBSCModule))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[3b2]"></a>InitializeCOMMList</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, HCIComm.o(i.InitializeCOMMList))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
</UL>

<P><STRONG><a name="[1a4]"></a>InitializeCertificateModule</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, BTPSC.o(i.InitializeCertificateModule))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[350]"></a>InitializeGATTModule</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, GATT.o(i.InitializeGATTModule))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
</UL>

<P><STRONG><a name="[1b8]"></a>L2CAP_Cleanup</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, L2CAP.o(i.L2CAP_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = L2CAP_Cleanup &rArr; HandleChannelDisconnection &rArr; LP_DisconnectReq &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextChannelInfoEntry
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRegistryInfoList
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeL2CAPContextInformation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeIdentifierInfoList
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeConnectionInfoList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeChannelInfoList
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeACLDataList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1ab]"></a>L2CAP_Initialize</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, L2CAP.o(i.L2CAP_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = L2CAP_Initialize &rArr; HCI_Build_ACL_Packet_Type_Mask &rArr; _HCI_Read_Local_Supported_Features &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Version_Supported
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Register_Event_Callback
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Command_Supported
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Build_ACL_Packet_Type_Mask
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySharedBuffer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeL2CAPContextInformation
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Buffer_Size
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Read_Buffer_Size
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Register_ACL_Data_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[3d6]"></a>L2CA_Enhanced_Fixed_Channel_Data_Write</STRONG> (Thumb, 252 bytes, Stack size 88 bytes, L2CAP.o(i.L2CA_Enhanced_Fixed_Channel_Data_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRegistryByID
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFixedChannelInfoEntry
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByBD_ADDRType
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextDataIdentifier
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedFragmentPacket
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckQueuedDataWrite
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Fixed_Channel_Data_Write
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
</UL>

<P><STRONG><a name="[401]"></a>L2CA_Fixed_Channel_Data_Write</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, L2CAP.o(i.L2CA_Fixed_Channel_Data_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Enhanced_Fixed_Channel_Data_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityManagerChannelWrite
</UL>

<P><STRONG><a name="[2d4]"></a>L2CA_Get_Link_Connection_State</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, L2CAP.o(i.L2CA_Get_Link_Connection_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = L2CA_Get_Link_Connection_State &rArr; AcquireL2CAPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByBD_ADDRType
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate_Remote_Device
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondingEventHandler
</UL>

<P><STRONG><a name="[314]"></a>L2CA_Register_Fixed_Channel</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, L2CAP.o(i.L2CA_Register_Fixed_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = L2CA_Register_Fixed_Channel &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRegistryByValue
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextIDNumber
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRegistryInfoEntry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
</UL>

<P><STRONG><a name="[403]"></a>L2CA_Set_Link_Connection_Configuration</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, L2CAP.o(i.L2CA_Set_Link_Connection_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = L2CA_Set_Link_Connection_Configuration &rArr; AcquireL2CAPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[2c3]"></a>L2CA_Un_Register_Fixed_Channel</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, L2CAP.o(i.L2CA_Un_Register_Fixed_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = L2CA_Un_Register_Fixed_Channel &rArr; AcquireL2CAPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRegistryByID
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRegistryInfoEntry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGATTContextInfoEntryMemory
</UL>

<P><STRONG><a name="[1b1]"></a>OTP_Cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, OTP.o(i.OTP_Cleanup))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1bb]"></a>OTP_Initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, OTP.o(i.OTP_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[3b4]"></a>OpenComm</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, HCIComm.o(i.OpenComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = OpenComm &rArr; InitializeProtocol &rArr; TWUART_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_Delay
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeProtocol
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCOMStructureResources
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCOMEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
</UL>

<P><STRONG><a name="[3b5]"></a>ProcessComm</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, HCIComm.o(i.ProcessComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ProcessComm &rArr; SearchCOMEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMProcess
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCOMEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ProcessHCIDriverInformation
</UL>

<P><STRONG><a name="[416]"></a>ProcessCommandLine</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sppledemo.o(i.ProcessCommandLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = ProcessCommandLine &rArr; CommandLineInterpreter &rArr; CloseServer &rArr; ClosePortByNumber &rArr; SPP_Close_Server_Port &rArr; _RFCOMM_Release_Request &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineInterpreter
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCharacters
</UL>

<P><STRONG><a name="[3a6]"></a>QuerySharedBuffer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, BSC.o(i.QuerySharedBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = QuerySharedBuffer &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBufferOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Initialize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchRequest
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
</UL>

<P><STRONG><a name="[366]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConfigureHardware
</UL>

<P><STRONG><a name="[28d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMWrite
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMClose
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConfigureHardware
</UL>

<P><STRONG><a name="[383]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
</UL>

<P><STRONG><a name="[1d4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_Init
</UL>

<P><STRONG><a name="[1b5]"></a>RFCOMM_Cleanup</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, RFCOMM.o(i.RFCOMM_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = RFCOMM_Cleanup &rArr; AcquireRFCOMMStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireRFCOMMStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1ad]"></a>RFCOMM_Initialize</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, RFCOMM.o(i.RFCOMM_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = RFCOMM_Initialize &rArr; _L2CA_Register_PSM &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySharedBuffer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Register_PSM
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[3b8]"></a>ReconfigureComm</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, HCIComm.o(i.ReconfigureComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ReconfigureComm &rArr; InitializeProtocol &rArr; TWUART_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMReconfigure
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCOMEntry
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReconfigureDriver
</UL>

<P><STRONG><a name="[130]"></a>ReleaseBluetoothStackInformation</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, BSC.o(i.ReleaseBluetoothStackInformation))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reconfigure_Driver
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Set_Queuing_Parameters
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Set_Configuration_Parameters
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Respond_Port_Information
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Server_Port
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Get_Queuing_Parameters
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Get_Configuration_Parameters
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Server_Port
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Port
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Delete_Service_Record
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Set_Link_Connection_Configuration
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Version_Supported
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Command_Supported
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Pairability_Mode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Local_Device_Name
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Connectability_Mode
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Class_Of_Device
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Register_Remote_Authentication
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_Device_Name
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_BD_ADDR
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Connection_Handle
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Class_Of_Device
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Perform_Inquiry
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Scan_Response_Data
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Pairability_Mode
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Fixed_Passkey
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Advertising_Data
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Resolve_Address
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Remove_Device_From_White_List
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Register_Remote_Authentication
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Regenerate_Long_Term_Key
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Query_Encryption_Mode
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Generate_Long_Term_Key
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Diversify_Function
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Disconnect
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Connection_Parameter_Update_Response
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Scan
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Create_Connection
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Disable
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Add_Device_To_White_List
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_End_Bonding
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousPairingStatusCallbackFunction
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Simple_Pairing_Mode
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Scan_Enable
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Encryption_Mode
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Current_IAC_LAP
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Class_of_Device
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Passkey_Request_Reply
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Passkey_Request_Negative_Reply
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Confirmation_Request_Reply
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Confirmation_Request_Negative_Reply
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Set_Connection_Encryption
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Send_Keypress_Notification
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_OOB_Data_Request_Reply
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_OOB_Data_Request_Negative_Reply
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_Name_Request
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Scan_Enable
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Name
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Class_of_Device
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Periodic_Inquiry_Mode
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_PIN_Code_Request_Reply
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_PIN_Code_Request_Negative_Reply
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Link_Key_Request_Reply
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Link_Key_Request_Negative_Reply
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Inquiry
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_IO_Capability_Request_Reply
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_IO_Capability_Request_Negative_Reply
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Disconnect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Delete_Stored_Link_Key
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Create_Connection_Cancel
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Create_Connection
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Change_Local_Name
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Authentication_Requested
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Get_Link_Connection_State
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cleanup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseGAPLEContext
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Encryption_Mode
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate_Remote_Device
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPLEContext
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discoverability_Timeout_Callback
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Event_Callback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackACLInfo
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_BD_ADDR
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Initialize
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Cleanup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Initialize
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Cleanup
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Cleanup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Initialize
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Cleanup
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Schedule_Asynchronous_Callback
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Cleanup
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOEP_Initialize
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOEP_Cleanup
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Start_Encryption
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Response_Data
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Parameters
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Enable
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Random_Address
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertising_Parameters
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertising_Data
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertise_Enable
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Remove_Device_From_White_List
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Read_White_List_Size
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Rand
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Long_Term_Key_Request_Reply
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Long_Term_Key_Request_Negative_Reply
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Encrypt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Create_Connection_Cancel
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Create_Connection
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Connection_Update
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Clear_White_List
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Add_Device_To_White_List
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Register_Fixed_Channel
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Update_Connection_Parameters
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Event_Callback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Event_Callback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase3DistributionScheduler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasskeyEventDispatcher
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Send_Break
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Port_Status
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Line_Status
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Event_Callback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackInformation
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Create_Service_Record
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Add_Raw_Attribute
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_SCO_Callback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Event_Callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SignalTimeout
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireRFCOMMStackInformation
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSDPStackInformation
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Un_Register_Fixed_Channel
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Enhanced_Fixed_Channel_Data_Write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_StateTimeout
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReceiveTimeout
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayedAuthenticationProcess
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_SCO_Flow_Control_Enable
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Link_Supervision_Timeout
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_LE_Host_Supported
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Default_Link_Policy_Settings
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Automatic_Flush_Timeout
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Sniff_Mode
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Set_Event_Mask
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Reject_Connection_Request
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Simple_Pairing_Mode
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Remote_Extended_Features
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Version_Information
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Supported_Features
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Supported_Commands
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_LE_Host_Supported
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Buffer_Size
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Read_Buffer_Size
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Host_Number_Of_Completed_Packets
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Flush
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Exit_Sniff_Mode
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Accept_Connection_Request
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Change_SCO_Configuration_Handles
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Change_SCO_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHCICallbackThread
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataPacket
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWordByte
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWord
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandThreeWords
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByte
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByteVariable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>

<P><STRONG><a name="[134]"></a>ReleaseGAPLEContext</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GAP.o(i.ReleaseGAPLEContext))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfoConnection_Handle
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Enable
</UL>

<P><STRONG><a name="[1b7]"></a>SCO_Cleanup</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, SCO.o(i.SCO_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = SCO_Cleanup &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Disconnect
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCallbackList
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeACLLinkList
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Change_SCO_Configuration_Handles
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Change_SCO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1aa]"></a>SCO_Initialize</STRONG> (Thumb, 540 bytes, Stack size 56 bytes, SCO.o(i.SCO_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SCO_Initialize &rArr; _HCI_Read_Buffer_Size &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Version_Supported
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Register_Event_Callback
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Command_Supported
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Supported_Features
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Buffer_Size
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Write_SCO_Flow_Control_Enable
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Register_SCO_Data_Callback
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Change_SCO_Configuration_Handles
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Change_SCO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[43a]"></a>SDP_Add_Raw_Attribute</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, SDP.o(i.SDP_Add_Raw_Attribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SDP_Add_Raw_Attribute &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceRecordEntry
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddServiceAttributeEntry
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSDPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
</UL>

<P><STRONG><a name="[1b6]"></a>SDP_Cleanup</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, SDP.o(i.SDP_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = SDP_Cleanup &rArr; FreeConnectionInfoList &rArr; CleanupSDPConnection &rArr; _L2CA_Disconnect_Request &rArr; L2CAP_DisconnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceRecordList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeL2CAPConnectionInfoList
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeConnectionInfoList
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSDPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[43c]"></a>SDP_Create_Service_Record</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, SDP.o(i.SDP_Create_Service_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SDP_Create_Service_Record &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAPIUUIDs
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceAttributeList
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddServiceRecordEntry
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddServiceAttributeEntry
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSDPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
</UL>

<P><STRONG><a name="[21f]"></a>SDP_Delete_Service_Record</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, SDP.o(i.SDP_Delete_Service_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SDP_Delete_Service_Record &rArr; AcquireSDPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceAttributeList
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSDPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePortByNumber
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
</UL>

<P><STRONG><a name="[1ac]"></a>SDP_Initialize</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, SDP.o(i.SDP_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SDP_Initialize &rArr; _L2CA_Register_PSM &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddServiceRecordEntry
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Register_PSM
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1b3]"></a>SPP_Cleanup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, SPP.o(i.SPP_Cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SPP_Cleanup &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInformationList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[221]"></a>SPP_Close_Port</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, SPP.o(i.SPP_Close_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = SPP_Close_Port &rArr; _RFCOMM_Release_Request &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Release_Request
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupPortInformationEntry
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePortByNumber
</UL>

<P><STRONG><a name="[220]"></a>SPP_Close_Server_Port</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, SPP.o(i.SPP_Close_Server_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = SPP_Close_Server_Port &rArr; _RFCOMM_Release_Request &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Un_Register_Server_Channel
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Release_Request
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInformationEntryMemory
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeletePortInformationEntry
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenServer
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePortByNumber
</UL>

<P><STRONG><a name="[433]"></a>SPP_Data_Read</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, SPP.o(i.SPP_Data_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = SPP_Data_Read &rArr; SPP_Port_Status &rArr; _RFCOMM_Modem_Status &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemMove
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Credits
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Port_Status
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Event_Callback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[445]"></a>SPP_Data_Write</STRONG> (Thumb, 564 bytes, Stack size 72 bytes, SPP.o(i.SPP_Data_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + In Cycle
<LI>Call Chain = SPP_Data_Write &rArr;  SPP_Data_Write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemMove
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Data_With_Credits
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Event_Callback
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueuedData
</UL>

<P><STRONG><a name="[35e]"></a>SPP_Get_Configuration_Parameters</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, SPP.o(i.SPP_Get_Configuration_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SPP_Get_Configuration_Parameters &rArr; AcquireSPPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfigParams
</UL>

<P><STRONG><a name="[363]"></a>SPP_Get_Queuing_Parameters</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, SPP.o(i.SPP_Get_Queuing_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SPP_Get_Queuing_Parameters &rArr; AcquireSPPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Get_Data_Queuing_Parameters
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueueParams
</UL>

<P><STRONG><a name="[1af]"></a>SPP_Initialize</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, SPP.o(i.SPP_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SPP_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Set_System_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[430]"></a>SPP_Line_Status</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, SPP.o(i.SPP_Line_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = SPP_Line_Status &rArr; _RFCOMM_Line_Status_Change &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Line_Status_Change
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
</UL>

<P><STRONG><a name="[409]"></a>SPP_Open_Remote_Port</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, SPP.o(i.SPP_Open_Remote_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = SPP_Open_Remote_Port &rArr; _RFCOMM_Open_Request &rArr; RFCOMM_Start_Link_Negotiation &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSerialPortID
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInformationEntryMemory
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeletePortInformationEntry
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPortInformationEntry
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenRemoteServer
</UL>

<P><STRONG><a name="[40a]"></a>SPP_Open_Server_Port</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, SPP.o(i.SPP_Open_Server_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SPP_Open_Server_Port &rArr; _RFCOMM_Register_Server_Channel &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Un_Register_Server_Channel
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Register_Server_Channel
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSerialPortID
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPortInformationEntry
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenServer
</UL>

<P><STRONG><a name="[42f]"></a>SPP_Port_Status</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, SPP.o(i.SPP_Port_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = SPP_Port_Status &rArr; _RFCOMM_Modem_Status &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Modem_Status
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPServerHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPClientHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
</UL>

<P><STRONG><a name="[40c]"></a>SPP_Register_Raw_SDP_Record</STRONG> (Thumb, 452 bytes, Stack size 88 bytes, SPP.o(i.SPP_Register_Raw_SDP_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = SPP_Register_Raw_SDP_Record &rArr; SDP_Create_Service_Record &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Delete_Service_Record
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataElementSequenceHeader
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Create_Service_Record
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Add_Raw_Attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenServer
</UL>

<P><STRONG><a name="[448]"></a>SPP_Respond_Port_Information</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, SPP.o(i.SPP_Respond_Port_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = SPP_Respond_Port_Information &rArr; _RFCOMM_Remote_Port_Negotiation_Response &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Remote_Port_Negotiation_Response
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildRemotePortNegotiationStructure
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Event_Callback
</UL>

<P><STRONG><a name="[42e]"></a>SPP_Send_Break</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, SPP.o(i.SPP_Send_Break))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = SPP_Send_Break &rArr; _RFCOMM_Modem_Status &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Modem_Status
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
</UL>

<P><STRONG><a name="[451]"></a>SPP_Set_Configuration_Parameters</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, SPP.o(i.SPP_Set_Configuration_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SPP_Set_Configuration_Parameters &rArr; AcquireSPPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Set_System_Parameters
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfigParams
</UL>

<P><STRONG><a name="[452]"></a>SPP_Set_Queuing_Parameters</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, SPP.o(i.SPP_Set_Queuing_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SPP_Set_Queuing_Parameters &rArr; AcquireSPPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Set_Data_Queuing_Parameters
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetQueueParams
</UL>

<P><STRONG><a name="[384]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
</UL>

<P><STRONG><a name="[454]"></a>SendCommPacket</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, HCIComm.o(i.SendCommPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SendCommPacket &rArr; HCITR_COMWrite &rArr; SetSuspendGPIO &rArr; ConfigureGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMWrite
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCOMEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHCIPacketToLowerDriver
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btpskrnl.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[3d5]"></a>TWUART_Initialize</STRONG> (Thumb, 166 bytes, Stack size 80 bytes, TWUART.o(i.TWUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TWUART_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTransportConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeProtocol
</UL>

<P><STRONG><a name="[fa]"></a>TWUART_ReceiveBytes</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, TWUART.o(i.TWUART_ReceiveBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = TWUART_ReceiveBytes &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTTimer
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartPacketizer
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedPacket
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIdle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>TWUART_Reconfigure</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, TWUART.o(i.TWUART_Reconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TWUART_Reconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>TWUART_Resynchronize</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, TWUART.o(i.TWUART_Resynchronize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TWUART_Resynchronize &rArr; SetTWUARTState &rArr; SendTWUARTMessage &rArr; SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTransportConfiguration
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTTimer
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTState
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeBufferListHead
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTWUARTMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>TWUART_Shutdown</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, TWUART.o(i.TWUART_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TWUART_Shutdown &rArr; FreeBufferListHead &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeBufferListHead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>TWUART_TransmitBytes</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, TWUART.o(i.TWUART_TransmitBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TWUART_TransmitBytes &rArr; SendReliablePacket &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTState
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSLIPPacket
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReliablePacket
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIdle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART2_IRQHandler &rArr; HAL_TxInterrupt &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TxInterrupt
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RxInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hcitrans.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = USART3_IRQHandler &rArr; RxInterrupt &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxInterrupt
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[369]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConfigureHardware
</UL>

<P><STRONG><a name="[372]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RxInterrupt
</UL>

<P><STRONG><a name="[28f]"></a>USART_ITConfig</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMWrite
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMProcess
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMClose
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxInterrupt
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxInterrupt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConsoleWrite
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConfigureHardware
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TxInterrupt
</UL>

<P><STRONG><a name="[368]"></a>USART_Init</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConfigureHardware
</UL>

<P><STRONG><a name="[371]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxInterrupt
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RxInterrupt
</UL>

<P><STRONG><a name="[374]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxInterrupt
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TxInterrupt
</UL>

<P><STRONG><a name="[3c5]"></a>VS_AVPR_Enable</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, btvs.o(i.VS_AVPR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = VS_AVPR_Enable &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapSendRawResults
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_EnableFeature
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_DisableFeature
</UL>

<P><STRONG><a name="[3c4]"></a>VS_DisableBLE</STRONG> (Thumb, 82 bytes, Stack size 88 bytes, btvs.o(i.VS_DisableBLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = VS_DisableBLE &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_DisableFeature
</UL>

<P><STRONG><a name="[3c8]"></a>VS_Enable_Sleep_Mode</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, btvs.o(i.VS_Enable_Sleep_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = VS_Enable_Sleep_Mode &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapSendRawResults
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeBeforeHCIClose
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIReset
</UL>

<P><STRONG><a name="[3c7]"></a>VS_Update_HCILL_Parameters</STRONG> (Thumb, 212 bytes, Stack size 80 bytes, btvs.o(i.VS_Update_HCILL_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = VS_Update_HCILL_Parameters &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapSendRawResults
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIReset
</UL>

<P><STRONG><a name="[3c6]"></a>VS_Update_UART_Baud_Rate</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, btvs.o(i.VS_Update_UART_Baud_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = VS_Update_UART_Baud_Rate &rArr; HCI_Reconfigure_Driver &rArr; HCI_ReconfigureDriver &rArr; ReconfigureComm &rArr; InitializeProtocol &rArr; TWUART_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reconfigure_Driver
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeBeforeHCIClose
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIReset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate
</UL>

<P><STRONG><a name="[166]"></a>VerifySharedBufferPointer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, BSC.o(i.VerifySharedBufferPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = VerifySharedBufferPointer &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustSharedBuffer
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchRequest
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Data_Write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeL2CAPContextInformation
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataPacket
</UL>

<P><STRONG><a name="[40f]"></a>WriteDataElementSequenceHeader</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, SDP.o(i.WriteDataElementSequenceHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteDataElementSequenceHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAPIUUIDs
</UL>

<P><STRONG><a name="[405]"></a>_HCI_Accept_Connection_Request</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, HCI.o(i._HCI_Accept_Connection_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _HCI_Accept_Connection_Request &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectIndication
</UL>

<P><STRONG><a name="[2e3]"></a>_HCI_Authentication_Requested</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, HCI.o(i._HCI_Authentication_Requested))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Authentication_Requested &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWord
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate_Remote_Device
</UL>

<P><STRONG><a name="[33a]"></a>_HCI_Change_Local_Name</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, HCI.o(i._HCI_Change_Local_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _HCI_Change_Local_Name &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringCopy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Local_Device_Name
</UL>

<P><STRONG><a name="[2fc]"></a>_HCI_Create_Connection</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, HCI.o(i._HCI_Create_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _HCI_Create_Connection &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectRequest
</UL>

<P><STRONG><a name="[2f4]"></a>_HCI_Create_Connection_Cancel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, HCI.o(i._HCI_Create_Connection_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Create_Connection_Cancel &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
</UL>

<P><STRONG><a name="[2fa]"></a>_HCI_Delete_Stored_Link_Key</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, HCI.o(i._HCI_Delete_Stored_Link_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_Delete_Stored_Link_Key &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Delete_Stored_Link_Key
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
</UL>

<P><STRONG><a name="[2d2]"></a>_HCI_Disconnect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, HCI.o(i._HCI_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWordByte
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Disconnect
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondingEventHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Cleanup
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
</UL>

<P><STRONG><a name="[3a5]"></a>_HCI_Exit_Sniff_Mode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, HCI.o(i._HCI_Exit_Sniff_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Exit_Sniff_Mode &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWord
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Exit_Sniff_Mode
</UL>

<P><STRONG><a name="[39f]"></a>_HCI_Flush</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, HCI.o(i._HCI_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Flush &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWord
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[249]"></a>_HCI_Host_Number_Of_Completed_Packets</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, HCI.o(i._HCI_Host_Number_Of_Completed_Packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _HCI_Host_Number_Of_Completed_Packets &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreditDataPacket
</UL>

<P><STRONG><a name="[2ec]"></a>_HCI_IO_Capability_Request_Negative_Reply</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, HCI.o(i._HCI_IO_Capability_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _HCI_IO_Capability_Request_Negative_Reply &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[2ed]"></a>_HCI_IO_Capability_Request_Reply</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, HCI.o(i._HCI_IO_Capability_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _HCI_IO_Capability_Request_Reply &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[326]"></a>_HCI_Inquiry</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, HCI.o(i._HCI_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _HCI_Inquiry &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEventHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Perform_Inquiry
</UL>

<P><STRONG><a name="[2fe]"></a>_HCI_LE_Add_Device_To_White_List</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, HCI.o(i._HCI_LE_Add_Device_To_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_LE_Add_Device_To_White_List &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Add_Device_To_White_List
</UL>

<P><STRONG><a name="[31b]"></a>_HCI_LE_Clear_White_List</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, HCI.o(i._HCI_LE_Clear_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_LE_Clear_White_List &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Remove_Device_From_White_List
</UL>

<P><STRONG><a name="[323]"></a>_HCI_LE_Connection_Update</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, HCI.o(i._HCI_LE_Connection_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_LE_Connection_Update &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Update_Connection_Parameters
</UL>

<P><STRONG><a name="[30b]"></a>_HCI_LE_Create_Connection</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, HCI.o(i._HCI_LE_Create_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _HCI_LE_Create_Connection &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
</UL>

<P><STRONG><a name="[303]"></a>_HCI_LE_Create_Connection_Cancel</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, HCI.o(i._HCI_LE_Create_Connection_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_LE_Create_Connection_Cancel &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Create_Connection
</UL>

<P><STRONG><a name="[289]"></a>_HCI_LE_Encrypt</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, HCI.o(i._HCI_LE_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Random_Address_Hash
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Key_Generation
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Diversify_Function
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Confirm_Value_Generation
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DivMaskGeneration
</UL>

<P><STRONG><a name="[18a]"></a>_HCI_LE_Long_Term_Key_Request_Negative_Reply</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, HCI.o(i._HCI_LE_Long_Term_Key_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_LE_Long_Term_Key_Request_Negative_Reply &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWord
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponseZeroLengthResponse
</UL>

<P><STRONG><a name="[302]"></a>_HCI_LE_Long_Term_Key_Request_Reply</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, HCI.o(i._HCI_LE_Long_Term_Key_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _HCI_LE_Long_Term_Key_Request_Reply &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[183]"></a>_HCI_LE_Rand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, HCI.o(i._HCI_LE_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_LE_Rand &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Generate_Long_Term_Key
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasskeyEventDispatcher
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
</UL>

<P><STRONG><a name="[3b0]"></a>_HCI_LE_Read_Buffer_Size</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, HCI.o(i._HCI_LE_Read_Buffer_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _HCI_LE_Read_Buffer_Size &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_Read_Buffer_Size
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
</UL>

<P><STRONG><a name="[313]"></a>_HCI_LE_Read_White_List_Size</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, HCI.o(i._HCI_LE_Read_White_List_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_LE_Read_White_List_Size &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
</UL>

<P><STRONG><a name="[31a]"></a>_HCI_LE_Remove_Device_From_White_List</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, HCI.o(i._HCI_LE_Remove_Device_From_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_LE_Remove_Device_From_White_List &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Remove_Device_From_White_List
</UL>

<P><STRONG><a name="[2ff]"></a>_HCI_LE_Set_Advertise_Enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, HCI.o(i._HCI_LE_Set_Advertise_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_LE_Set_Advertise_Enable &rArr; BuildAndSubmitCommandByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEventHandler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByte
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Disable
</UL>

<P><STRONG><a name="[31f]"></a>_HCI_LE_Set_Advertising_Data</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, HCI.o(i._HCI_LE_Set_Advertising_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_LE_Set_Advertising_Data &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Advertising_Data
</UL>

<P><STRONG><a name="[301]"></a>_HCI_LE_Set_Advertising_Parameters</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, HCI.o(i._HCI_LE_Set_Advertising_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_LE_Set_Advertising_Parameters &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
</UL>

<P><STRONG><a name="[3b1]"></a>_HCI_LE_Set_Random_Address</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, HCI.o(i._HCI_LE_Set_Random_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _HCI_LE_Set_Random_Address &rArr; BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_Set_Random_Address
</UL>

<P><STRONG><a name="[305]"></a>_HCI_LE_Set_Scan_Enable</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, HCI.o(i._HCI_LE_Set_Scan_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_LE_Set_Scan_Enable &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEventHandler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Scan
</UL>

<P><STRONG><a name="[317]"></a>_HCI_LE_Set_Scan_Parameters</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, HCI.o(i._HCI_LE_Set_Scan_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _HCI_LE_Set_Scan_Parameters &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEventHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
</UL>

<P><STRONG><a name="[322]"></a>_HCI_LE_Set_Scan_Response_Data</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, HCI.o(i._HCI_LE_Set_Scan_Response_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_LE_Set_Scan_Response_Data &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Scan_Response_Data
</UL>

<P><STRONG><a name="[2da]"></a>_HCI_LE_Start_Encryption</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, HCI.o(i._HCI_LE_Start_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _HCI_LE_Start_Encryption &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
</UL>

<P><STRONG><a name="[2ef]"></a>_HCI_Link_Key_Request_Negative_Reply</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, HCI.o(i._HCI_Link_Key_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Link_Key_Request_Negative_Reply &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2ee]"></a>_HCI_Link_Key_Request_Reply</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, HCI.o(i._HCI_Link_Key_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _HCI_Link_Key_Request_Reply &rArr; BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[2f1]"></a>_HCI_PIN_Code_Request_Negative_Reply</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, HCI.o(i._HCI_PIN_Code_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_PIN_Code_Request_Negative_Reply &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2f0]"></a>_HCI_PIN_Code_Request_Reply</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, HCI.o(i._HCI_PIN_Code_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _HCI_PIN_Code_Request_Reply &rArr; BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[325]"></a>_HCI_Periodic_Inquiry_Mode</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, HCI.o(i._HCI_Periodic_Inquiry_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Periodic_Inquiry_Mode &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEventHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Perform_Inquiry
</UL>

<P><STRONG><a name="[1a3]"></a>_HCI_Read_BD_ADDR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, HCI.o(i._HCI_Read_BD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_Read_BD_ADDR &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Initialize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initialize
</UL>

<P><STRONG><a name="[3e7]"></a>_HCI_Read_Buffer_Size</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, HCI.o(i._HCI_Read_Buffer_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _HCI_Read_Buffer_Size &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
</UL>

<P><STRONG><a name="[328]"></a>_HCI_Read_Class_of_Device</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, HCI.o(i._HCI_Read_Class_of_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_Read_Class_of_Device &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Class_Of_Device
</UL>

<P><STRONG><a name="[3b6]"></a>_HCI_Read_LE_Host_Supported</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, HCI.o(i._HCI_Read_LE_Host_Supported))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _HCI_Read_LE_Host_Supported &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Query_LE_Controller_Support
</UL>

<P><STRONG><a name="[32c]"></a>_HCI_Read_Local_Name</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, HCI.o(i._HCI_Read_Local_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _HCI_Read_Local_Name &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_Device_Name
</UL>

<P><STRONG><a name="[3ae]"></a>_HCI_Read_Local_Supported_Commands</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, HCI.o(i._HCI_Read_Local_Supported_Commands))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_Read_Local_Supported_Commands &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
</UL>

<P><STRONG><a name="[263]"></a>_HCI_Read_Local_Supported_Features</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, HCI.o(i._HCI_Read_Local_Supported_Features))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_Read_Local_Supported_Features &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Build_ACL_Packet_Type_Mask
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Initialize
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineLEControllerSupport
</UL>

<P><STRONG><a name="[3ab]"></a>_HCI_Read_Local_Version_Information</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, HCI.o(i._HCI_Read_Local_Version_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _HCI_Read_Local_Version_Information &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Read_Local_Version_Information
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
</UL>

<P><STRONG><a name="[39b]"></a>_HCI_Read_Remote_Extended_Features</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, HCI.o(i._HCI_Read_Remote_Extended_Features))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Read_Remote_Extended_Features &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWordByte
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[333]"></a>_HCI_Read_Scan_Enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, HCI.o(i._HCI_Read_Scan_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_Read_Scan_Enable &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Connectability_Mode
</UL>

<P><STRONG><a name="[39a]"></a>_HCI_Read_Simple_Pairing_Mode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, HCI.o(i._HCI_Read_Simple_Pairing_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_Read_Simple_Pairing_Mode &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[404]"></a>_HCI_Reject_Connection_Request</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, HCI.o(i._HCI_Reject_Connection_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _HCI_Reject_Connection_Request &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectIndication
</UL>

<P><STRONG><a name="[32e]"></a>_HCI_Remote_Name_Request</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, HCI.o(i._HCI_Remote_Name_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _HCI_Remote_Name_Request &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEventHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
</UL>

<P><STRONG><a name="[2eb]"></a>_HCI_Remote_OOB_Data_Request_Negative_Reply</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, HCI.o(i._HCI_Remote_OOB_Data_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Remote_OOB_Data_Request_Negative_Reply &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[2ea]"></a>_HCI_Remote_OOB_Data_Request_Reply</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, HCI.o(i._HCI_Remote_OOB_Data_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _HCI_Remote_OOB_Data_Request_Reply &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[2e9]"></a>_HCI_Send_Keypress_Notification</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, HCI.o(i._HCI_Send_Keypress_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _HCI_Send_Keypress_Notification &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[338]"></a>_HCI_Set_Connection_Encryption</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, HCI.o(i._HCI_Set_Connection_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Set_Connection_Encryption &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWordByte
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Encryption_Mode
</UL>

<P><STRONG><a name="[3ac]"></a>_HCI_Set_Event_Mask</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, HCI.o(i._HCI_Set_Event_Mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _HCI_Set_Event_Mask &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
</UL>

<P><STRONG><a name="[3c3]"></a>_HCI_Sniff_Mode</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, HCI.o(i._HCI_Sniff_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _HCI_Sniff_Mode &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Sniff_Mode
</UL>

<P><STRONG><a name="[2e6]"></a>_HCI_User_Confirmation_Request_Negative_Reply</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, HCI.o(i._HCI_User_Confirmation_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_User_Confirmation_Request_Negative_Reply &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[2e5]"></a>_HCI_User_Confirmation_Request_Reply</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, HCI.o(i._HCI_User_Confirmation_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_User_Confirmation_Request_Reply &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[2e8]"></a>_HCI_User_Passkey_Request_Negative_Reply</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, HCI.o(i._HCI_User_Passkey_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_User_Passkey_Request_Negative_Reply &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[2e7]"></a>_HCI_User_Passkey_Request_Reply</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, HCI.o(i._HCI_User_Passkey_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_User_Passkey_Request_Reply &rArr; BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
</UL>

<P><STRONG><a name="[465]"></a>_HCI_Write_Automatic_Flush_Timeout</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, HCI.o(i._HCI_Write_Automatic_Flush_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _HCI_Write_Automatic_Flush_Timeout &rArr; BuildAndSubmitCommandThreeWords &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandThreeWords
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
</UL>

<P><STRONG><a name="[331]"></a>_HCI_Write_Class_of_Device</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, HCI.o(i._HCI_Write_Class_of_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _HCI_Write_Class_of_Device &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Class_Of_Device
</UL>

<P><STRONG><a name="[335]"></a>_HCI_Write_Current_IAC_LAP</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, HCI.o(i._HCI_Write_Current_IAC_LAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_Write_Current_IAC_LAP &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
</UL>

<P><STRONG><a name="[3ca]"></a>_HCI_Write_Default_Link_Policy_Settings</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, HCI.o(i._HCI_Write_Default_Link_Policy_Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Write_Default_Link_Policy_Settings &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWord
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Write_Default_Link_Policy_Settings
</UL>

<P><STRONG><a name="[337]"></a>_HCI_Write_Encryption_Mode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, HCI.o(i._HCI_Write_Encryption_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Write_Encryption_Mode &rArr; BuildAndSubmitCommandByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByte
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Encryption_Mode
</UL>

<P><STRONG><a name="[3ad]"></a>_HCI_Write_LE_Host_Supported</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, HCI.o(i._HCI_Write_LE_Host_Supported))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _HCI_Write_LE_Host_Supported &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
</UL>

<P><STRONG><a name="[466]"></a>_HCI_Write_Link_Supervision_Timeout</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, HCI.o(i._HCI_Write_Link_Supervision_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _HCI_Write_Link_Supervision_Timeout &rArr; BuildAndSubmitCommandThreeWords &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandThreeWords
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
</UL>

<P><STRONG><a name="[3cc]"></a>_HCI_Write_SCO_Flow_Control_Enable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, HCI.o(i._HCI_Write_SCO_Flow_Control_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Write_SCO_Flow_Control_Enable &rArr; BuildAndSubmitCommandByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Write_SCO_Flow_Control_Enable
</UL>

<P><STRONG><a name="[334]"></a>_HCI_Write_Scan_Enable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, HCI.o(i._HCI_Write_Scan_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Write_Scan_Enable &rArr; BuildAndSubmitCommandByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByte
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Connectability_Mode
</UL>

<P><STRONG><a name="[33c]"></a>_HCI_Write_Simple_Pairing_Mode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, HCI.o(i._HCI_Write_Simple_Pairing_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _HCI_Write_Simple_Pairing_Mode &rArr; BuildAndSubmitCommandByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByte
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Pairability_Mode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[3f4]"></a>_L2CA_Config_Request</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, L2CAP.o(i._L2CA_Config_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = _L2CA_Config_Request &rArr; L2CAP_ConfigRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAPIOptions
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestResponse
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewIdentifierEntry
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Link_Supervision_Timeout
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Automatic_Flush_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectionResponse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[3f5]"></a>_L2CA_Config_Response</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, L2CAP.o(i._L2CA_Config_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = _L2CA_Config_Response &rArr; L2CAP_ConfigRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAPIOptions
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[468]"></a>_L2CA_Connect_Request</STRONG> (Thumb, 492 bytes, Stack size 80 bytes, L2CAP.o(i._L2CA_Connect_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = _L2CA_Connect_Request &rArr; L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AuthenticateDevice
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByBD_ADDRType
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectRequest
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestResponse
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChannelInfoEntry
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewIdentifierEntry
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewChannel
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Simple_Pairing_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
</UL>

<P><STRONG><a name="[3f1]"></a>_L2CA_Connect_Response</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, L2CAP.o(i._L2CA_Connect_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = _L2CA_Connect_Response &rArr; L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestResponse
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChannelInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectionResponse
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSDPConnectionRequest
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Event_Callback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[2d6]"></a>_L2CA_Connection_Parameter_Update_Response</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, L2CAP.o(i._L2CA_Connection_Parameter_Update_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = _L2CA_Connection_Parameter_Update_Response &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Connection_Parameter_Update_Response
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLEConnectionUpdateIndicationEventHandler
</UL>

<P><STRONG><a name="[2b0]"></a>_L2CA_Data_Write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, L2CAP.o(i._L2CA_Data_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Enhanced_Data_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatResponsePDUHeaderAndSend
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control_Message
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
</UL>

<P><STRONG><a name="[213]"></a>_L2CA_Disconnect_Request</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, L2CAP.o(i._L2CA_Disconnect_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = _L2CA_Disconnect_Request &rArr; L2CAP_DisconnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestResponse
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChannelInfoEntry
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewIdentifierEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeL2CAPConnectionInfoList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatResponsePDUHeaderAndSend
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SignalTimeout
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupSDPConnection
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_StateTimeout
</UL>

<P><STRONG><a name="[3f7]"></a>_L2CA_Disconnect_Response</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, L2CAP.o(i._L2CA_Disconnect_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _L2CA_Disconnect_Response &rArr; SearchChannelInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[42a]"></a>_L2CA_Enhanced_Data_Write</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, L2CAP.o(i._L2CA_Enhanced_Data_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextDataIdentifier
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedFragmentPacket
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckQueuedDataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Data_Write
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Data_Write
</UL>

<P><STRONG><a name="[20d]"></a>_L2CA_Flush_Channel_Data</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, L2CAP.o(i._L2CA_Flush_Channel_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _L2CA_Flush_Channel_Data &rArr; DeleteIdentifierInfoEntryByIdentifier &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestEvent
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupChannel
</UL>

<P><STRONG><a name="[431]"></a>_L2CA_Register_PSM</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, L2CAP.o(i._L2CA_Register_PSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _L2CA_Register_PSM &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextIDNumber
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRegistryInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Initialize
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Initialize
</UL>

<P><STRONG><a name="[449]"></a>_RFCOMM_Get_Data_Queuing_Parameters</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, RFCOMM.o(i._RFCOMM_Get_Data_Queuing_Parameters))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Get_Queuing_Parameters
</UL>

<P><STRONG><a name="[44b]"></a>_RFCOMM_Line_Status_Change</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, RFCOMM.o(i._RFCOMM_Line_Status_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = _RFCOMM_Line_Status_Change &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Line_Status
</UL>

<P><STRONG><a name="[44f]"></a>_RFCOMM_Modem_Status</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, RFCOMM.o(i._RFCOMM_Modem_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = _RFCOMM_Modem_Status &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByCID
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Send_Break
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Port_Status
</UL>

<P><STRONG><a name="[44d]"></a>_RFCOMM_Open_Request</STRONG> (Thumb, 822 bytes, Stack size 64 bytes, RFCOMM.o(i._RFCOMM_Open_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = _RFCOMM_Open_Request &rArr; RFCOMM_Start_Link_Negotiation &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMMessageInfoEntryByTEIAndDLCI
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByBD_ADDR
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveRFCOMMChannelInfoEntry
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveL2CAPConnectionInfoEntry
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Start_Link_Negotiation
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextRFCOMMChannelInfoEntry
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRFCOMMChannelInfoEntry
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddL2CAPConnectionInfoEntry
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
</UL>

<P><STRONG><a name="[442]"></a>_RFCOMM_Open_Response</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, RFCOMM.o(i._RFCOMM_Open_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = _RFCOMM_Open_Response &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByCID
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPServerHandler
</UL>

<P><STRONG><a name="[441]"></a>_RFCOMM_Parameter_Negotiation_Response</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, RFCOMM.o(i._RFCOMM_Parameter_Negotiation_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = _RFCOMM_Parameter_Negotiation_Response &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMServerInfoEntryByTEI
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByCID
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPServerHandler
</UL>

<P><STRONG><a name="[44e]"></a>_RFCOMM_Register_Server_Channel</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, RFCOMM.o(i._RFCOMM_Register_Server_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _RFCOMM_Register_Server_Channel &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Server_Port
</UL>

<P><STRONG><a name="[444]"></a>_RFCOMM_Release_Request</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, RFCOMM.o(i._RFCOMM_Release_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = _RFCOMM_Release_Request &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByCID
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Server_Port
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Port
</UL>

<P><STRONG><a name="[450]"></a>_RFCOMM_Remote_Port_Negotiation_Response</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, RFCOMM.o(i._RFCOMM_Remote_Port_Negotiation_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = _RFCOMM_Remote_Port_Negotiation_Response &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Respond_Port_Information
</UL>

<P><STRONG><a name="[42c]"></a>_RFCOMM_Send_Credits</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, RFCOMM.o(i._RFCOMM_Send_Credits))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = _RFCOMM_Send_Credits &rArr; _RFCOMM_Send_Data_With_Credits &rArr; RFCOMM_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Data_With_Credits
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
</UL>

<P><STRONG><a name="[447]"></a>_RFCOMM_Send_Data</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, RFCOMM.o(i._RFCOMM_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = _RFCOMM_Send_Data &rArr; _RFCOMM_Send_Data_With_Credits &rArr; RFCOMM_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Data_With_Credits
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
</UL>

<P><STRONG><a name="[446]"></a>_RFCOMM_Send_Data_With_Credits</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, RFCOMM.o(i._RFCOMM_Send_Data_With_Credits))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = _RFCOMM_Send_Data_With_Credits &rArr; RFCOMM_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByCID
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Data_Write
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchFlowEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Data
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Credits
</UL>

<P><STRONG><a name="[453]"></a>_RFCOMM_Set_Data_Queuing_Parameters</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, RFCOMM.o(i._RFCOMM_Set_Data_Queuing_Parameters))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Set_Queuing_Parameters
</UL>

<P><STRONG><a name="[44a]"></a>_RFCOMM_Set_System_Parameters</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, RFCOMM.o(i._RFCOMM_Set_System_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RFCOMM_Set_System_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Set_Configuration_Parameters
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Initialize
</UL>

<P><STRONG><a name="[426]"></a>_RFCOMM_Un_Register_Server_Channel</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, RFCOMM.o(i._RFCOMM_Un_Register_Server_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _RFCOMM_Un_Register_Server_Channel &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Server_Port
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Server_Port
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMCleanupHandler
</UL>

<P><STRONG><a name="[469]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[486]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[487]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1da]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>

<P><STRONG><a name="[488]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[46b]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[489]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[48a]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1df]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_SprintF
</UL>

<P><STRONG><a name="[48b]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[48c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[48d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[48e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = main &rArr; MainThread &rArr; InitializeApplication &rArr; CloseStack &rArr; GAPS_Cleanup_Service &rArr; GATT_Un_Register_Service &rArr; GATT_Error_Response &rArr; PrepareWriteRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleLED
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_Delay
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConfigureHardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[463]"></a>AddCommand</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, sppledemo.o(i.AddCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AddCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Server
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Selection
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Client
</UL>

<P><STRONG><a name="[153]"></a>AddDataToBuffer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sppledemo.o(i.AddDataToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AddDataToBuffer &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendProcess
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendData
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEDataIndicationEvent
</UL>

<P><STRONG><a name="[cb]"></a>AdvertiseLE</STRONG> (Thumb, 578 bytes, Stack size 96 bytes, sppledemo.o(i.AdvertiseLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = AdvertiseLE &rArr; GAP_LE_Advertising_Enable &rArr; _HCI_LE_Set_Advertising_Parameters &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_Set_Random_Address
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Scan_Response_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Advertising_Data
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Disable
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[45b]"></a>AppearanceIndexToAppearance</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sppledemo.o(i.AppearanceIndexToAppearance))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAppearance
</UL>

<P><STRONG><a name="[345]"></a>AppearanceToString</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sppledemo.o(i.AppearanceToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppearanceToString
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLocalAppearance
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_GAPS
</UL>

<P><STRONG><a name="[c4]"></a>AutomaticReadMode</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sppledemo.o(i.AutomaticReadMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AutomaticReadMode &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[18e]"></a>BD_ADDRToStr</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, sppledemo.o(i.BD_ADDRToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BD_ADDRToStr &rArr; BTPS_SprintF &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_SprintF
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePairingRequestResponse
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPairingRequest
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Event_Callback
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalAddress
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_SPPLE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_GAPS
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Event_Callback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayInquiryList
</UL>

<P><STRONG><a name="[d0]"></a>CancelConnectLE</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sppledemo.o(i.CancelConnectLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = CancelConnectLE &rArr; CancelConnectLEDevice &rArr; GAP_LE_Cancel_Create_Connection &rArr; _HCI_LE_Create_Connection_Cancel &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelConnectLEDevice
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[1fa]"></a>CancelConnectLEDevice</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sppledemo.o(i.CancelConnectLEDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = CancelConnectLEDevice &rArr; GAP_LE_Cancel_Create_Connection &rArr; _HCI_LE_Create_Connection_Cancel &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Create_Connection
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelConnectLE
</UL>

<P><STRONG><a name="[ca]"></a>ChangeLEPairingParameters</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sppledemo.o(i.ChangeLEPairingParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ChangeLEPairingParameters &rArr; DisplayIOCapabilities &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIOCapabilities
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[b1]"></a>ChangeSimplePairingParameters</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sppledemo.o(i.ChangeSimplePairingParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ChangeSimplePairingParameters &rArr; DisplayUsage &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIOCapabilities
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[462]"></a>ClearCommands</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sppledemo.o(i.ClearCommands))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Server
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Selection
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Client
</UL>

<P><STRONG><a name="[e3]"></a>ClientMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sppledemo.o(i.ClientMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ClientMode &rArr; UserInterface_Client &rArr; DisplayHelp &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Client
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sppledemo.o(i.UserInterface_Selection)
</UL>
<P><STRONG><a name="[21d]"></a>ClosePortByNumber</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, sppledemo.o(i.ClosePortByNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = ClosePortByNumber &rArr; SPP_Close_Server_Port &rArr; _RFCOMM_Release_Request &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSPPPortIndex
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Server_Port
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Port
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Delete_Service_Record
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseServer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseRemoteServer
</UL>

<P><STRONG><a name="[bb]"></a>CloseRemoteServer</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sppledemo.o(i.CloseRemoteServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = CloseRemoteServer &rArr; ClosePortByNumber &rArr; SPP_Close_Server_Port &rArr; _RFCOMM_Release_Request &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePortByNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineInterpreter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sppledemo.o(i.UserInterface_Client)
</UL>
<P><STRONG><a name="[e5]"></a>CloseServer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sppledemo.o(i.CloseServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = CloseServer &rArr; ClosePortByNumber &rArr; SPP_Close_Server_Port &rArr; _RFCOMM_Release_Request &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePortByNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineInterpreter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[222]"></a>CloseStack</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sppledemo.o(i.CloseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = CloseStack &rArr; GAPS_Cleanup_Service &rArr; GATT_Un_Register_Service &rArr; GATT_Error_Response &rArr; PrepareWriteRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDeviceInfoList
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cleanup
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Cleanup_Service
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_DeInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
</UL>

<P><STRONG><a name="[228]"></a>CommandInterpreter</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sppledemo.o(i.CommandInterpreter))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CommandInterpreter &rArr; FindCommand &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCommand
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineInterpreter
</UL>

<P><STRONG><a name="[22a]"></a>CommandLineInterpreter</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, sppledemo.o(i.CommandLineInterpreter))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = CommandLineInterpreter &rArr; CloseServer &rArr; ClosePortByNumber &rArr; SPP_Close_Server_Port &rArr; _RFCOMM_Release_Request &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Selection
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandInterpreter
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseServer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseRemoteServer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommandLine
</UL>

<P><STRONG><a name="[22b]"></a>CommandParser</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sppledemo.o(i.CommandParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CommandParser &rArr; StringToUnsignedInteger &rArr; BTPS_StringLength
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToUnsignedInteger
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringParser
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineInterpreter
</UL>

<P><STRONG><a name="[457]"></a>ConfigureCapabilities</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sppledemo.o(i.ConfigureCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePairingRequestResponse
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPairingRequest
</UL>

<P><STRONG><a name="[d7]"></a>ConfigureSPPLE</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, sppledemo.o(i.ConfigureSPPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = ConfigureSPPLE &rArr; EnableDisableNotificationsIndications &rArr; GATT_Write_Request &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendCredits
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableNotificationsIndications
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[ce]"></a>ConnectLE</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, sppledemo.o(i.ConnectLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ConnectLE &rArr; ConnectLEDevice &rArr; GAP_LE_Create_Connection &rArr; _HCI_LE_Create_Connection &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveRemoteAddressHelper
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayConnectLEUsage
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLEDevice
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[23b]"></a>ConnectLEDevice</STRONG> (Thumb, 334 bytes, Stack size 96 bytes, sppledemo.o(i.ConnectLEDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ConnectLEDevice &rArr; GAP_LE_Create_Connection &rArr; _HCI_LE_Create_Connection &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeLEIndex
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Remove_Device_From_White_List
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Add_Device_To_White_List
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLE
</UL>

<P><STRONG><a name="[244]"></a>CreateNewDeviceInfoEntry</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, sppledemo.o(i.CreateNewDeviceInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CreateNewDeviceInfoEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[256]"></a>DeleteDeviceInfoEntry</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, sppledemo.o(i.DeleteDeviceInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DeleteDeviceInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[25b]"></a>DeleteLinkKey</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, sppledemo.o(i.DeleteLinkKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = DeleteLinkKey &rArr; HCI_Delete_Stored_Link_Key &rArr; _HCI_Delete_Stored_Link_Key &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Delete_Stored_Link_Key
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[cf]"></a>DisconnectLE</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sppledemo.o(i.DisconnectLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = DisconnectLE &rArr; DisconnectLEDevice &rArr; GAP_LE_Disconnect &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectLEDevice
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[273]"></a>DisconnectLEDevice</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sppledemo.o(i.DisconnectLEDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = DisconnectLEDevice &rArr; GAP_LE_Disconnect &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Disconnect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectLE
</UL>

<P><STRONG><a name="[d8]"></a>DiscoverGAPS</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, sppledemo.o(i.DiscoverGAPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = DiscoverGAPS &rArr; GATT_Start_Service_Discovery &rArr; StartServiceDiscovery &rArr; GATT_Discover_Services &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Start_Service_Discovery
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[d5]"></a>DiscoverSPPLE</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, sppledemo.o(i.DiscoverSPPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = DiscoverSPPLE &rArr; GATT_Start_Service_Discovery &rArr; StartServiceDiscovery &rArr; GATT_Discover_Services &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Start_Service_Discovery
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[281]"></a>DisplayAdvertisingData</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sppledemo.o(i.DisplayAdvertisingData))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = DisplayAdvertisingData &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[282]"></a>DisplayClassOfDevice</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sppledemo.o(i.DisplayClassOfDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DisplayClassOfDevice &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClassOfDevice
</UL>

<P><STRONG><a name="[23c]"></a>DisplayConnectLEUsage</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sppledemo.o(i.DisplayConnectLEUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DisplayConnectLEUsage &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLE
</UL>

<P><STRONG><a name="[283]"></a>DisplayFWVersion</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sppledemo.o(i.DisplayFWVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = DisplayFWVersion &rArr; HCI_Read_Local_Version_Information &rArr; _HCI_Read_Local_Version_Information &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Read_Local_Version_Information
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
</UL>

<P><STRONG><a name="[169]"></a>DisplayFunctionError</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sppledemo.o(i.DisplayFunctionError))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = DisplayFunctionError &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserConfirmationResponse
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPairable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEPairabilityMode
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisc
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConnect
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClassOfDevice
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBPairabilityMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBDiscoverabilityMode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBConnectabilityMode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Event_Callback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassKeyResponse
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenStack
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenRemoteServer
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEPassKeyResponse
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inquiry
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemoteName
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Event_Callback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPairing
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFWVersion
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePortByNumber
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
</UL>

<P><STRONG><a name="[285]"></a>DisplayFunctionSuccess</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sppledemo.o(i.DisplayFunctionSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DisplayFunctionSuccess &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserConfirmationResponse
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SniffMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassKeyResponse
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEPassKeyResponse
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemoteName
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Event_Callback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitSniffMode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPairing
</UL>

<P><STRONG><a name="[e0]"></a>DisplayHelp</STRONG> (Thumb, 672 bytes, Stack size 8 bytes, sppledemo.o(i.DisplayHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DisplayHelp &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Server
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Selection
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Client
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Selection)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[1ff]"></a>DisplayIOCapabilities</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sppledemo.o(i.DisplayIOCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DisplayIOCapabilities &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEPairabilityMode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBPairabilityMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeSimplePairingParameters
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLEPairingParameters
</UL>

<P><STRONG><a name="[a8]"></a>DisplayInquiryList</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, sppledemo.o(i.DisplayInquiryList))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = DisplayInquiryList &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[286]"></a>DisplayPairingInformation</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, sppledemo.o(i.DisplayPairingInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = DisplayPairingInformation &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[22d]"></a>DisplayPrompt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sppledemo.o(i.DisplayPrompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DisplayPrompt &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Event_Callback
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendProcess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Service_Discovery_Event_Callback
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_SPPLE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_GAPS
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Event_Callback
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineInterpreter
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
</UL>

<P><STRONG><a name="[c3]"></a>DisplayRawModeData</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sppledemo.o(i.DisplayRawModeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = DisplayRawModeData &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[287]"></a>DisplayUUID</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, sppledemo.o(i.DisplayUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = DisplayUUID &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Service_Discovery_Event_Callback
</UL>

<P><STRONG><a name="[171]"></a>DisplayUsage</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sppledemo.o(i.DisplayUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DisplayUsage &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserConfirmationResponse
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SniffMode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetQueueParams
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEPairabilityMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDiscoverabilityMode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEConnectabilityMode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfigParams
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClassOfDevice
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBPairabilityMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBDiscoverabilityMode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCBConnectabilityMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCommand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCodeResponse
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenServer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenRemoteServer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemoteName
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitSniffMode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPairing
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeSimplePairingParameters
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
</UL>

<P><STRONG><a name="[28c]"></a>DumpAppearanceMappings</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sppledemo.o(i.DumpAppearanceMappings))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DumpAppearanceMappings &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAppearance
</UL>

<P><STRONG><a name="[239]"></a>EnableDisableNotificationsIndications</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, sppledemo.o(i.EnableDisableNotificationsIndications))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = EnableDisableNotificationsIndications &rArr; GATT_Write_Request &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureSPPLE
</UL>

<P><STRONG><a name="[294]"></a>EncryptionInformationRequestResponse</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, sppledemo.o(i.EncryptionInformationRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = EncryptionInformationRequestResponse &rArr; GAP_LE_Authentication_Response &rArr; AuthenticationResponsePasskeyConfirmationResponse &rArr; BuildAndSendPairingConfirmPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Generate_Long_Term_Key
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[aa]"></a>EndPairing</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, sppledemo.o(i.EndPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = EndPairing &rArr; GAP_End_Bonding &rArr; GAP_Cancel_Bonding &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionSuccess
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_End_Bonding
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[b9]"></a>ExitSniffMode</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, sppledemo.o(i.ExitSniffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ExitSniffMode &rArr; HCI_Exit_Sniff_Mode &rArr; _HCI_Exit_Sniff_Mode &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSPPPortIndex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionSuccess
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Exit_Sniff_Mode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[2a0]"></a>FillBufferWithString</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, sppledemo.o(i.FillBufferWithString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FillBufferWithString &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendProcess
</UL>

<P><STRONG><a name="[229]"></a>FindCommand</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sppledemo.o(i.FindCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FindCommand &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandInterpreter
</UL>

<P><STRONG><a name="[23d]"></a>FindFreeLEIndex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sppledemo.o(i.FindFreeLEIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FindFreeLEIndex &rArr; FindLEIndexByAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSPPLE
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLEDevice
</UL>

<P><STRONG><a name="[2a1]"></a>FindFreeSPPPortIndex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sppledemo.o(i.FindFreeSPPPortIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindFreeSPPPortIndex &rArr; FindSPPPortIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSPPPortIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenServer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenRemoteServer
</UL>

<P><STRONG><a name="[1f9]"></a>FindLEIndexByAddress</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sppledemo.o(i.FindLEIndexByAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindLEIndexByAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConnectionID
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCommand
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveConnectionInfo
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteName
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteAppearance
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataCommand
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PairLE
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEQueryEncryption
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_SPPLE
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeLEIndex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverSPPLE
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverGAPS
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectLEDevice
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectLE
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLEDevice
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureSPPLE
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelConnectLEDevice
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelConnectLE
</UL>

<P><STRONG><a name="[356]"></a>FindLEIndexByConnectionID</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sppledemo.o(i.FindLEIndexByConnectionID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindLEIndexByConnectionID
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Service_Discovery_Event_Callback
</UL>

<P><STRONG><a name="[21e]"></a>FindSPPPortIndex</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sppledemo.o(i.FindSPPPortIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindSPPPortIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SniffMode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Event_Callback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeSPPPortIndex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitSniffMode
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePortByNumber
</UL>

<P><STRONG><a name="[40d]"></a>FindSPPPortIndexByAddress</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, sppledemo.o(i.FindSPPPortIndexByAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FindSPPPortIndexByAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair
</UL>

<P><STRONG><a name="[40b]"></a>FindSPPPortIndexByServerPortNumber</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sppledemo.o(i.FindSPPPortIndexByServerPortNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindSPPPortIndexByServerPortNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenServer
</UL>

<P><STRONG><a name="[2c0]"></a>FreeDeviceInfoEntryMemory</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sppledemo.o(i.FreeDeviceInfoEntryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FreeDeviceInfoEntryMemory &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[227]"></a>FreeDeviceInfoList</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sppledemo.o(i.FreeDeviceInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FreeDeviceInfoList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseStack
</UL>

<P><STRONG><a name="[357]"></a>GAPSPopulateHandles</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sppledemo.o(i.GAPSPopulateHandles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAPSPopulateHandles
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Service_Discovery_Event_Callback
</UL>

<P><STRONG><a name="[84]"></a>GAP_Event_Callback</STRONG> (Thumb, 2960 bytes, Stack size 112 bytes, sppledemo.o(i.GAP_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = GAP_Event_Callback &rArr; GAP_Authentication_Response &rArr; _HCI_PIN_Code_Request_Reply &rArr; BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionSuccess
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sppledemo.o(i.GetRemoteName)
<LI> sppledemo.o(i.Inquiry)
<LI> sppledemo.o(i.Pair)
<LI> sppledemo.o(i.SetPairable)
</UL>
<P><STRONG><a name="[5f]"></a>GAP_LE_Event_Callback</STRONG> (Thumb, 4178 bytes, Stack size 160 bytes, sppledemo.o(i.GAP_LE_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = GAP_LE_Event_Callback &rArr; SlavePairingRequestResponse &rArr; GAP_LE_Authentication_Response &rArr; AuthenticationResponsePasskeyConfirmationResponse &rArr; BuildAndSendPairingConfirmPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePairingRequestResponse
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPairingRequest
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveConnectionInfo
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDeviceInfoEntryMemory
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeLEIndex
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptionInformationRequestResponse
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPairingInformation
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAdvertisingData
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDeviceInfoEntry
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewDeviceInfoEntry
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Regenerate_Long_Term_Key
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Disconnect
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Connection_Parameter_Update_Response
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Address Reference Count : 6]<UL><LI> sppledemo.o(i.AdvertiseLE)
<LI> sppledemo.o(i.ConnectLEDevice)
<LI> sppledemo.o(i.GAP_LE_Event_Callback)
<LI> sppledemo.o(i.SendPairingRequest)
<LI> sppledemo.o(i.SetPairable)
<LI> sppledemo.o(i.StartScan)
</UL>
<P><STRONG><a name="[9c]"></a>GATT_ClientEventCallback_GAPS</STRONG> (Thumb, 510 bytes, Stack size 56 bytes, sppledemo.o(i.GATT_ClientEventCallback_GAPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GATT_ClientEventCallback_GAPS &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppearanceToString
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.ReadRemoteAppearance)
<LI> sppledemo.o(i.ReadRemoteName)
</UL>
<P><STRONG><a name="[66]"></a>GATT_ClientEventCallback_SPPLE</STRONG> (Thumb, 726 bytes, Stack size 56 bytes, sppledemo.o(i.GATT_ClientEventCallback_SPPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = GATT_ClientEventCallback_SPPLE &rArr; SPPLEReceiveCreditEvent &rArr; SPPLEDataIndicationEvent &rArr; SPPLEReadData &rArr; SPPLESendCredits &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEReceiveCreditEvent
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.ConfigureSPPLE)
<LI> sppledemo.o(i.GATT_Connection_Event_Callback)
</UL>
<P><STRONG><a name="[99]"></a>GATT_Connection_Event_Callback</STRONG> (Thumb, 896 bytes, Stack size 56 bytes, sppledemo.o(i.GATT_Connection_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = GATT_Connection_Event_Callback &rArr; SPPLEReceiveCreditEvent &rArr; SPPLEDataIndicationEvent &rArr; SPPLEReadData &rArr; SPPLESendCredits &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConnectionID
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendCredits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEReceiveCreditEvent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEDataIndicationEvent
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveConnectionInfo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeBuffer
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Exchange_MTU_Request
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sppledemo.o(i.OpenStack)
</UL>
<P><STRONG><a name="[9d]"></a>GATT_ServerEventCallback</STRONG> (Thumb, 738 bytes, Stack size 48 bytes, sppledemo.o(i.GATT_ServerEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = GATT_ServerEventCallback &rArr; SPPLEReceiveCreditEvent &rArr; SPPLEDataIndicationEvent &rArr; SPPLEReadData &rArr; SPPLESendCredits &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendCredits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEReceiveCreditEvent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEDataIndicationEvent
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Response
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sppledemo.o(i.RegisterSPPLE)
</UL>
<P><STRONG><a name="[69]"></a>GATT_Service_Discovery_Event_Callback</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, sppledemo.o(i.GATT_Service_Discovery_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = GATT_Service_Discovery_Event_Callback &rArr; DisplayUUID &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEPopulateHandles
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPSPopulateHandles
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByConnectionID
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUUID
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.DiscoverGAPS)
<LI> sppledemo.o(i.DiscoverSPPLE)
</UL>
<P><STRONG><a name="[b6]"></a>GetClassOfDevice</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sppledemo.o(i.GetClassOfDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = GetClassOfDevice &rArr; GAP_Query_Class_Of_Device &rArr; _HCI_Read_Class_of_Device &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Class_Of_Device
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[be]"></a>GetConfigParams</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sppledemo.o(i.GetConfigParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GetConfigParams &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Get_Configuration_Parameters
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[b2]"></a>GetLocalAddress</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, sppledemo.o(i.GetLocalAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GetLocalAddress &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_BD_ADDR
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[b4]"></a>GetLocalName</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sppledemo.o(i.GetLocalName))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = GetLocalName &rArr; GAP_Query_Local_Device_Name &rArr; _HCI_Read_Local_Name &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_Device_Name
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[c0]"></a>GetQueueParams</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sppledemo.o(i.GetQueueParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GetQueueParams &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Get_Queuing_Parameters
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[b7]"></a>GetRemoteName</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, sppledemo.o(i.GetRemoteName))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = GetRemoteName &rArr; GAP_Query_Remote_Device_Name &rArr; _HCI_Remote_Name_Request &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionSuccess
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[8d]"></a>HCI_Event_Callback</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sppledemo.o(i.HCI_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = HCI_Event_Callback &rArr; DisplayPrompt &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sppledemo.o(i.InitializeApplication)
</UL>
<P><STRONG><a name="[348]"></a>InitializeBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sppledemo.o(i.InitializeBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveConnectionInfo
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
</UL>

<P><STRONG><a name="[a7]"></a>Inquiry</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sppledemo.o(i.Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Inquiry &rArr; GAP_Perform_Inquiry &rArr; _HCI_Periodic_Inquiry_Mode &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Perform_Inquiry
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[d2]"></a>LEPassKeyResponse</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, sppledemo.o(i.LEPassKeyResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = LEPassKeyResponse &rArr; GAP_LE_Authentication_Response &rArr; AuthenticationResponsePasskeyConfirmationResponse &rArr; BuildAndSendPairingConfirmPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionSuccess
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[d3]"></a>LEQueryEncryption</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, sppledemo.o(i.LEQueryEncryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LEQueryEncryption &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Query_Encryption_Mode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[d4]"></a>LESetPasskey</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sppledemo.o(i.LESetPasskey))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LESetPasskey &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Fixed_Passkey
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[c2]"></a>Loopback</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sppledemo.o(i.Loopback))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Loopback &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[ba]"></a>OpenRemoteServer</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, sppledemo.o(i.OpenRemoteServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = OpenRemoteServer &rArr; SPP_Open_Remote_Port &rArr; _RFCOMM_Open_Request &rArr; RFCOMM_Start_Link_Negotiation &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeSPPPortIndex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sppledemo.o(i.UserInterface_Client)
</UL>
<P><STRONG><a name="[e4]"></a>OpenServer</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, sppledemo.o(i.OpenServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = OpenServer &rArr; SPP_Close_Server_Port &rArr; _RFCOMM_Release_Request &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSPPPortIndexByServerPortNumber
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeSPPPortIndex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Server_Port
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Server_Port
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_SprintF
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[3d0]"></a>OpenStack</STRONG> (Thumb, 820 bytes, Stack size 80 bytes, sppledemo.o(i.OpenStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = OpenStack &rArr; BSC_Initialize &rArr; HCI_Initialize &rArr; HCI_Reset &rArr; HCI_VS_InitializeAfterHCIReset &rArr; DownloadPatch &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFWVersion
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLinkKey
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Set_Link_Connection_Configuration
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Write_Default_Link_Policy_Settings
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Version_Supported
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_Read_Buffer_Size
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Command_Supported
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Queuing_Parameters
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cleanup
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Local_Device_Name
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_BD_ADDR
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Diversify_Function
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Set_Device_Name
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Set_Device_Appearance
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Initialize_Service
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_EnableFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
</UL>

<P><STRONG><a name="[ab]"></a>PINCodeResponse</STRONG> (Thumb, 318 bytes, Stack size 80 bytes, sppledemo.o(i.PINCodeResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PINCodeResponse &rArr; GAP_Authentication_Response &rArr; _HCI_PIN_Code_Request_Reply &rArr; BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[a9]"></a>Pair</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, sppledemo.o(i.Pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Pair &rArr; GAP_Initiate_Bonding &rArr; HCI_Build_ACL_Packet_Type_Mask &rArr; _HCI_Read_Local_Supported_Features &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSPPPortIndexByAddress
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLinkKey
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[d1]"></a>PairLE</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sppledemo.o(i.PairLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = PairLE &rArr; SendPairingRequest &rArr; GAP_LE_Pair_Remote_Device &rArr; BuildAndSendPairingPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPairingRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[ac]"></a>PassKeyResponse</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, sppledemo.o(i.PassKeyResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PassKeyResponse &rArr; GAP_Authentication_Response &rArr; _HCI_PIN_Code_Request_Reply &rArr; BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionSuccess
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[e1]"></a>QueryMemory</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, sppledemo.o(i.QueryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = QueryMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_QueryMemoryUsage
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[bc]"></a>Read</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, sppledemo.o(i.Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = Read &rArr; SPP_Data_Read &rArr; SPP_Port_Status &rArr; _RFCOMM_Modem_Status &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSPPPortIndex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Read
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[df]"></a>ReadDataCommand</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, sppledemo.o(i.ReadDataCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = ReadDataCommand &rArr; SPPLEReadData &rArr; SPPLESendCredits &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEReadData
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[db]"></a>ReadLocalAppearance</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sppledemo.o(i.ReadLocalAppearance))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ReadLocalAppearance &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppearanceToString
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Query_Device_Appearance
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[d9]"></a>ReadLocalName</STRONG> (Thumb, 92 bytes, Stack size 264 bytes, sppledemo.o(i.ReadLocalName))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ReadLocalName &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Query_Device_Name
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[dd]"></a>ReadRemoteAppearance</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, sppledemo.o(i.ReadRemoteAppearance))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = ReadRemoteAppearance &rArr; GATT_Read_Value_Request &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Value_Request
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[da]"></a>ReadRemoteName</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, sppledemo.o(i.ReadRemoteName))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = ReadRemoteName &rArr; GATT_Read_Value_Request &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Value_Request
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[d6]"></a>RegisterSPPLE</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, sppledemo.o(i.RegisterSPPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = RegisterSPPLE &rArr; GATT_Register_Service &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeLEIndex
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Register_Service
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[30f]"></a>RemoveConnectionInfo</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, sppledemo.o(i.RemoveConnectionInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RemoveConnectionInfo &rArr; FindLEIndexByAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeBuffer
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[436]"></a>RemoveDataFromBuffer</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sppledemo.o(i.RemoveDataFromBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RemoveDataFromBuffer &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendProcess
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendData
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEReadData
</UL>

<P><STRONG><a name="[23a]"></a>ResolveRemoteAddressHelper</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sppledemo.o(i.ResolveRemoteAddressHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ResolveRemoteAddressHelper &rArr; GAP_LE_Resolve_Address &rArr; SM_Random_Address_Hash &rArr; _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Resolve_Address
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLE
</UL>

<P><STRONG><a name="[34a]"></a>SPPLEDataIndicationEvent</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, sppledemo.o(i.SPPLEDataIndicationEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = SPPLEDataIndicationEvent &rArr; SPPLEReadData &rArr; SPPLESendCredits &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendData
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendCredits
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEReadData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDataToBuffer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEReceiveCreditEvent
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
</UL>

<P><STRONG><a name="[358]"></a>SPPLEPopulateHandles</STRONG> (Thumb, 616 bytes, Stack size 20 bytes, sppledemo.o(i.SPPLEPopulateHandles))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPPLEPopulateHandles
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Service_Discovery_Event_Callback
</UL>

<P><STRONG><a name="[434]"></a>SPPLEReadData</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, sppledemo.o(i.SPPLEReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = SPPLEReadData &rArr; SPPLESendCredits &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendCredits
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveDataFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEDataIndicationEvent
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataCommand
</UL>

<P><STRONG><a name="[346]"></a>SPPLEReceiveCreditEvent</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sppledemo.o(i.SPPLEReceiveCreditEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = SPPLEReceiveCreditEvent &rArr; SPPLEDataIndicationEvent &rArr; SPPLEReadData &rArr; SPPLESendCredits &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendProcess
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendData
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEDataIndicationEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_SPPLE
</UL>

<P><STRONG><a name="[238]"></a>SPPLESendCredits</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, sppledemo.o(i.SPPLESendCredits))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = SPPLESendCredits &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Without_Response_Request
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Handle_Value_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEReadData
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEDataIndicationEvent
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureSPPLE
</UL>

<P><STRONG><a name="[43f]"></a>SPPLESendData</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, sppledemo.o(i.SPPLESendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = SPPLESendData &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveDataFromBuffer
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDataToBuffer
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Without_Response_Request
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Handle_Value_Notification
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEReceiveCreditEvent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEDataIndicationEvent
</UL>

<P><STRONG><a name="[440]"></a>SPPLESendProcess</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, sppledemo.o(i.SPPLESendProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = SPPLESendProcess &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveDataFromBuffer
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBufferWithString
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDataToBuffer
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Without_Response_Request
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Handle_Value_Notification
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCommand
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLEReceiveCreditEvent
</UL>

<P><STRONG><a name="[98]"></a>SPP_Event_Callback</STRONG> (Thumb, 2484 bytes, Stack size 80 bytes, sppledemo.o(i.SPP_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = SPP_Event_Callback &rArr; SPP_Data_Write &rArr;  SPP_Data_Write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSPPPortIndex
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Respond_Port_Information
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Read
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Connection_Handle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.OpenRemoteServer)
<LI> sppledemo.o(i.OpenServer)
</UL>
<P><STRONG><a name="[1fb]"></a>SearchDeviceInfoEntryByBD_ADDR</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, sppledemo.o(i.SearchDeviceInfoEntryByBD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SearchDeviceInfoEntryByBD_ADDR &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCommand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteName
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteAppearance
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataCommand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Service_Discovery_Event_Callback
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_SPPLE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback_GAPS
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverSPPLE
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverGAPS
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureSPPLE
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelConnectLEDevice
</UL>

<P><STRONG><a name="[c6]"></a>SendData</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, sppledemo.o(i.SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = SendData &rArr; SPP_Data_Write &rArr;  SPP_Data_Write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSPPPortIndex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[de]"></a>SendDataCommand</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, sppledemo.o(i.SendDataCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = SendDataCommand &rArr; SPPLESendProcess &rArr; GATT_Handle_Value_Notification &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBD_ADDR
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDeviceInfoEntryByBD_ADDR
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPLESendProcess
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[311]"></a>SendPairingRequest</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, sppledemo.o(i.SendPairingRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = SendPairingRequest &rArr; GAP_LE_Pair_Remote_Device &rArr; BuildAndSendPairingPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureCapabilities
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PairLE
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[e2]"></a>ServerMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sppledemo.o(i.ServerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ServerMode &rArr; UserInterface_Server &rArr; DisplayHelp &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterface_Server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sppledemo.o(i.UserInterface_Selection)
</UL>
<P><STRONG><a name="[c5]"></a>SetBaudRate</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sppledemo.o(i.SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = SetBaudRate &rArr; VS_Update_UART_Baud_Rate &rArr; HCI_Reconfigure_Driver &rArr; HCI_ReconfigureDriver &rArr; ReconfigureComm &rArr; InitializeProtocol &rArr; TWUART_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Update_UART_Baud_Rate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[af]"></a>SetCBConnectabilityMode</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sppledemo.o(i.SetCBConnectabilityMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = SetCBConnectabilityMode &rArr; GAP_Set_Connectability_Mode &rArr; _HCI_Read_Scan_Enable &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Connectability_Mode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[ae]"></a>SetCBDiscoverabilityMode</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, sppledemo.o(i.SetCBDiscoverabilityMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SetCBDiscoverabilityMode &rArr; GAP_Set_Discoverability_Mode &rArr; _HCI_Write_Current_IAC_LAP &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[b0]"></a>SetCBPairabilityMode</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sppledemo.o(i.SetCBPairabilityMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SetCBPairabilityMode &rArr; GAP_Set_Pairability_Mode &rArr; GAP_Cancel_Bonding &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIOCapabilities
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Pairability_Mode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[b5]"></a>SetClassOfDevice</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sppledemo.o(i.SetClassOfDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = SetClassOfDevice &rArr; GAP_Set_Class_Of_Device &rArr; _HCI_Write_Class_of_Device &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayClassOfDevice
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Class_Of_Device
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[bf]"></a>SetConfigParams</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sppledemo.o(i.SetConfigParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SetConfigParams &rArr; DisplayUsage &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Set_Configuration_Parameters
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[3d1]"></a>SetConnect</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sppledemo.o(i.SetConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = SetConnect &rArr; GAP_Set_Connectability_Mode &rArr; _HCI_Read_Scan_Enable &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Connectability_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
</UL>

<P><STRONG><a name="[3d2]"></a>SetDisc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sppledemo.o(i.SetDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SetDisc &rArr; GAP_Set_Discoverability_Mode &rArr; _HCI_Write_Current_IAC_LAP &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
</UL>

<P><STRONG><a name="[c8]"></a>SetLEConnectabilityMode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sppledemo.o(i.SetLEConnectabilityMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SetLEConnectabilityMode &rArr; DisplayUsage &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[c7]"></a>SetLEDiscoverabilityMode</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sppledemo.o(i.SetLEDiscoverabilityMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SetLEDiscoverabilityMode &rArr; DisplayUsage &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[c9]"></a>SetLEPairabilityMode</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sppledemo.o(i.SetLEPairabilityMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SetLEPairabilityMode &rArr; DisplayFunctionError &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIOCapabilities
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Pairability_Mode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[dc]"></a>SetLocalAppearance</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sppledemo.o(i.SetLocalAppearance))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SetLocalAppearance &rArr; DumpAppearanceMappings &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpAppearanceMappings
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppearanceIndexToAppearance
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Set_Device_Appearance
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[b3]"></a>SetLocalName</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sppledemo.o(i.SetLocalName))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SetLocalName &rArr; GAP_Set_Local_Device_Name &rArr; _HCI_Change_Local_Name &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Local_Device_Name
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Set_Device_Name
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[3d3]"></a>SetPairable</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sppledemo.o(i.SetPairable))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = SetPairable &rArr; GAP_Set_Pairability_Mode &rArr; GAP_Cancel_Bonding &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Pairability_Mode
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Register_Remote_Authentication
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Pairability_Mode
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Register_Remote_Authentication
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
</UL>

<P><STRONG><a name="[c1]"></a>SetQueueParams</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sppledemo.o(i.SetQueueParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SetQueueParams &rArr; DisplayUsage &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Set_Queuing_Parameters
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[312]"></a>SlavePairingRequestResponse</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, sppledemo.o(i.SlavePairingRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = SlavePairingRequestResponse &rArr; GAP_LE_Authentication_Response &rArr; AuthenticationResponsePasskeyConfirmationResponse &rArr; BuildAndSendPairingConfirmPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureCapabilities
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BD_ADDRToStr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Event_Callback
</UL>

<P><STRONG><a name="[b8]"></a>SniffMode</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, sppledemo.o(i.SniffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SniffMode &rArr; HCI_Sniff_Mode &rArr; _HCI_Sniff_Mode &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSPPPortIndex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionSuccess
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Sniff_Mode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[45d]"></a>StartScan</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, sppledemo.o(i.StartScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = StartScan &rArr; GAP_LE_Perform_Scan &rArr; _HCI_LE_Set_Scan_Enable &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScanning
</UL>

<P><STRONG><a name="[cc]"></a>StartScanning</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sppledemo.o(i.StartScanning))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = StartScanning &rArr; StartScan &rArr; GAP_LE_Perform_Scan &rArr; _HCI_LE_Set_Scan_Enable &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScan
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[45e]"></a>StopScan</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sppledemo.o(i.StopScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = StopScan &rArr; GAP_LE_Cancel_Scan &rArr; _HCI_LE_Set_Scan_Enable &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Scan
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopScanning
</UL>

<P><STRONG><a name="[cd]"></a>StopScanning</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sppledemo.o(i.StopScanning))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = StopScanning &rArr; StopScan &rArr; GAP_LE_Cancel_Scan &rArr; _HCI_LE_Set_Scan_Enable &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopScan
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[16b]"></a>StrToBD_ADDR</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sppledemo.o(i.StrToBD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StrToBD_ADDR &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCommand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteName
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRemoteAppearance
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataCommand
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PairLE
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEQueryEncryption
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverSPPLE
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverGAPS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectLE
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectLE
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureSPPLE
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelConnectLE
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvertiseLE
</UL>

<P><STRONG><a name="[22e]"></a>StringParser</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sppledemo.o(i.StringParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StringParser &rArr; BTPS_StringLength
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
</UL>

<P><STRONG><a name="[22f]"></a>StringToUnsignedInteger</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, sppledemo.o(i.StringToUnsignedInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StringToUnsignedInteger &rArr; BTPS_StringLength
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StringLength
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
</UL>

<P><STRONG><a name="[347]"></a>UpdateConnectionID</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sppledemo.o(i.UpdateConnectionID))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = UpdateConnectionID &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLEIndexByAddress
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Event_Callback
</UL>

<P><STRONG><a name="[ad]"></a>UserConfirmationResponse</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, sppledemo.o(i.UserConfirmationResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = UserConfirmationResponse &rArr; GAP_Authentication_Response &rArr; _HCI_PIN_Code_Request_Reply &rArr; BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionSuccess
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayFunctionError
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[214]"></a>UserInterface_Client</STRONG> (Thumb, 1508 bytes, Stack size 8 bytes, sppledemo.o(i.UserInterface_Client))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = UserInterface_Client &rArr; DisplayHelp &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayHelp
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCommands
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientMode
</UL>

<P><STRONG><a name="[22c]"></a>UserInterface_Selection</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sppledemo.o(i.UserInterface_Selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = UserInterface_Selection &rArr; DisplayHelp &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayHelp
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCommands
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineInterpreter
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
</UL>

<P><STRONG><a name="[459]"></a>UserInterface_Server</STRONG> (Thumb, 1514 bytes, Stack size 8 bytes, sppledemo.o(i.UserInterface_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = UserInterface_Server &rArr; DisplayHelp &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayHelp
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCommands
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerMode
</UL>

<P><STRONG><a name="[bd]"></a>Write</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, sppledemo.o(i.Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = Write &rArr; SPP_Data_Write &rArr;  SPP_Data_Write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSPPPortIndex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUsage
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sppledemo.o(i.UserInterface_Client)
<LI> sppledemo.o(i.UserInterface_Server)
</UL>
<P><STRONG><a name="[370]"></a>HAL_RxInterrupt</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, hal.o(i.HAL_RxInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RxInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[373]"></a>HAL_TxInterrupt</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, hal.o(i.HAL_TxInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TxInterrupt &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[35f]"></a>GetInput</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, main.o(i.GetInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetInput &rArr; HAL_ConsoleWrite &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConsoleWrite
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConsoleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCharacters
</UL>

<P><STRONG><a name="[94]"></a>HCI_Sleep_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HCI_Sleep_Callback))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MainThread)
</UL>
<P><STRONG><a name="[96]"></a>IdleFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.IdleFunction))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MainThread)
</UL>
<P><STRONG><a name="[407]"></a>MainThread</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, main.o(i.MainThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = MainThread &rArr; InitializeApplication &rArr; CloseStack &rArr; GAPS_Cleanup_Service &rArr; GATT_Un_Register_Service &rArr; GATT_Error_Response &rArr; PrepareWriteRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reconfigure_Driver
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_ExecuteScheduler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AddFunctionToScheduler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeApplication
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>ProcessCharacters</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i.ProcessCharacters))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = ProcessCharacters &rArr; ProcessCommandLine &rArr; CommandLineInterpreter &rArr; CloseServer &rArr; ClosePortByNumber &rArr; SPP_Close_Server_Port &rArr; _RFCOMM_Release_Request &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInput
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommandLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MainThread)
</UL>
<P><STRONG><a name="[460]"></a>ToggleLED</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.ToggleLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ToggleLED &rArr; HAL_LedToggle &rArr; HAL_LedOn
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LedToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[464]"></a>MapSendRawResults</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, btvs.o(i.MapSendRawResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MapSendRawResults
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Update_HCILL_Parameters
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Enable_Sleep_Mode
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_AVPR_Enable
</UL>

<P><STRONG><a name="[1de]"></a>GetHeapStatistics</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, btpskrnl.o(i.GetHeapStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetHeapStatistics &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_QueryMemoryUsage
</UL>

<P><STRONG><a name="[1d3]"></a>HeapInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, btpskrnl.o(i.HeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HeapInit &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_Init
</UL>

<P><STRONG><a name="[1c8]"></a>MemAlloc</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, btpskrnl.o(i.MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>

<P><STRONG><a name="[1d1]"></a>MemFree</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, btpskrnl.o(i.MemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>

<P><STRONG><a name="[28a]"></a>DownloadPatch</STRONG> (Thumb, 134 bytes, Stack size 192 bytes, btpsvend.o(i.DownloadPatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = DownloadPatch &rArr; HCI_Send_Raw_Command &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_InitializeAfterHCIReset
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_VS_EnableFeature
</UL>

<P><STRONG><a name="[236]"></a>ConfigureGPIO</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hcitrans.o(i.ConfigureGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ConfigureGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSuspendGPIO
</UL>

<P><STRONG><a name="[37d]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hcitrans.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMClose
</UL>

<P><STRONG><a name="[382]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hcitrans.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSuspendGPIO
</UL>

<P><STRONG><a name="[381]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hcitrans.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSuspendGPIO
</UL>

<P><STRONG><a name="[439]"></a>RxInterrupt</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, hcitrans.o(i.RxInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = RxInterrupt &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_TestDebugZone
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_OutputMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[380]"></a>SetBaudRate</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, hcitrans.o(i.SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetBaudRate &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMReconfigure
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMOpen
</UL>

<P><STRONG><a name="[28e]"></a>SetSuspendGPIO</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hcitrans.o(i.SetSuspendGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetSuspendGPIO &rArr; ConfigureGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureGPIO
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMWrite
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[461]"></a>TxInterrupt</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, hcitrans.o(i.TxInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TxInterrupt &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[386]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hcitrans.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMWrite
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMReconfigure
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMProcess
</UL>

<P><STRONG><a name="[45f]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[425]"></a>CalculateBufferOffset</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, BSC.o(i.CalculateBufferOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalculateBufferOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySharedBuffer
</UL>

<P><STRONG><a name="[190]"></a>CompareListEntryKeys</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, BSC.o(i.CompareListEntryKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry
</UL>

<P><STRONG><a name="[1c6]"></a>DeleteBSCTimerEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, BSC.o(i.DeleteBSCTimerEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteBSCTimerEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StopTimer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[1a2]"></a>DeleteBTStackEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, BSC.o(i.DeleteBTStackEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteBTStackEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[1be]"></a>FreeBSCTimerEntryList</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, BSC.o(i.FreeBSCTimerEntryList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeBSCTimerEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Initialize
</UL>

<P><STRONG><a name="[12e]"></a>SearchBTStackEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, BSC.o(i.SearchBTStackEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>

<P><STRONG><a name="[62]"></a>TimerCallback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, BSC.o(i.TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TimerCallback &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteBSCTimerEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> BSC.o(i.BSC_StartTimer)
</UL>
<P><STRONG><a name="[131]"></a>AcquireGAPStackACLInfo</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, GAP.o(i.AcquireGAPStackACLInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AcquireGAPStackACLInfo &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLLinkEntryBD_ADDR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Connection_Handle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate_Remote_Device
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Event_Callback
</UL>

<P><STRONG><a name="[135]"></a>AcquireGAPStackInformation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, GAP.o(i.AcquireGAPStackInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AcquireGAPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Pairability_Mode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Local_Device_Name
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Connectability_Mode
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Class_Of_Device
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Register_Remote_Authentication
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_Device_Name
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Local_BD_ADDR
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Class_Of_Device
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Perform_Inquiry
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_End_Bonding
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Encryption_Mode
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
</UL>

<P><STRONG><a name="[14e]"></a>AddCallbackEntry</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, GAP.o(i.AddCallbackEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AddCallbackEntry &rArr; BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
</UL>

<P><STRONG><a name="[6c]"></a>BSC_Event_Callback</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, GAP.o(i.BSC_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = BSC_Event_Callback &rArr; GAP_Authenticate_Remote_Device &rArr; _HCI_Authentication_Requested &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate_Remote_Device
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackACLInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAP.o(i.GAP_Initialize)
</UL>
<P><STRONG><a name="[208]"></a>CleanUpInquiry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, GAP.o(i.CleanUpInquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CleanUpInquiry &rArr; FreeInquiryResultList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeInquiryResultList
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchInquiryEvent
</UL>

<P><STRONG><a name="[24e]"></a>DeleteACLLinkEntryConnection_Handle</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GAP.o(i.DeleteACLLinkEntryConnection_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteACLLinkEntryConnection_Handle &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[250]"></a>DeleteCallbackEntry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GAP.o(i.DeleteCallbackEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DeleteCallbackEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueRemoteNameCallback
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueBondingCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondingEventHandler
</UL>

<P><STRONG><a name="[7a]"></a>Discoverability_Timeout_Callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, GAP.o(i.Discoverability_Timeout_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Discoverability_Timeout_Callback &rArr; GAP_Set_Discoverability_Mode &rArr; _HCI_Write_Current_IAC_LAP &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAP.o(i.GAP_Set_Discoverability_Mode)
</UL>
<P><STRONG><a name="[2a2]"></a>FormatAndDispatchAuthenticationEvent</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, GAP.o(i.FormatAndDispatchAuthenticationEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FormatAndDispatchAuthenticationEvent &rArr; SearchACLLinkEntryBD_ADDR &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLLinkEntryBD_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2d3]"></a>FormatAndDispatchAuthenticationStatusEvent</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, GAP.o(i.FormatAndDispatchAuthenticationStatusEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FormatAndDispatchAuthenticationStatusEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueBondingCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondingEventHandler
</UL>

<P><STRONG><a name="[396]"></a>FormatAndDispatchEncryptionChangeEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, GAP.o(i.FormatAndDispatchEncryptionChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FormatAndDispatchEncryptionChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2a8]"></a>FormatAndDispatchInquiryEvent</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, GAP.o(i.FormatAndDispatchInquiryEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FormatAndDispatchInquiryEvent &rArr; CleanUpInquiry &rArr; FreeInquiryResultList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanUpInquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPInquiryEventHandler
</UL>

<P><STRONG><a name="[2b3]"></a>FreeACLLinkList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GAP.o(i.FreeACLLinkList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeACLLinkList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
</UL>

<P><STRONG><a name="[2b8]"></a>FreeCallbackList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GAP.o(i.FreeCallbackList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeCallbackList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
</UL>

<P><STRONG><a name="[209]"></a>FreeInquiryResultList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GAP.o(i.FreeInquiryResultList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeInquiryResultList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanUpInquiry
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cleanup
</UL>

<P><STRONG><a name="[6d]"></a>GAPBondingEventHandler</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, GAP.o(i.GAPBondingEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = GAPBondingEventHandler &rArr; GAP_Authenticate_Remote_Device &rArr; _HCI_Authentication_Requested &rArr; BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Disconnect
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Get_Link_Connection_State
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate_Remote_Device
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackEntry
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueBondingCallback
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchAuthenticationStatusEvent
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAP.o(i.GAP_Initiate_Bonding)
</UL>
<P><STRONG><a name="[78]"></a>GAPInquiryEventHandler</STRONG> (Thumb, 466 bytes, Stack size 48 bytes, GAP.o(i.GAPInquiryEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GAPInquiryEventHandler &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchInquiryEvent
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAP.o(i.GAP_Perform_Inquiry)
</UL>
<P><STRONG><a name="[79]"></a>GAPRemoteNameEventHandler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, GAP.o(i.GAPRemoteNameEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GAPRemoteNameEventHandler &rArr; IssueRemoteNameCallback &rArr; DeleteCallbackEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueRemoteNameCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAP.o(i.GAP_Query_Remote_Device_Name)
</UL>
<P><STRONG><a name="[6b]"></a>HCI_Event_Callback</STRONG> (Thumb, 1692 bytes, Stack size 112 bytes, GAP.o(i.HCI_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = HCI_Event_Callback &rArr; GAP_Set_Discoverability_Mode &rArr; _HCI_Write_Current_IAC_LAP &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverability_Mode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Simple_Pairing_Mode
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_PIN_Code_Request_Negative_Reply
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Link_Key_Request_Negative_Reply
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Disconnect
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Get_Link_Connection_State
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Encryption_Mode
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackEntry
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLLinkEntryConnection_Handle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLLinkEntryBD_ADDR
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueBondingCallback
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchInquiryEvent
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchEncryptionChangeEvent
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchAuthenticationStatusEvent
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchAuthenticationEvent
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackEntry
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLLinkEntryConnection_Handle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInformation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAP.o(i.GAP_Initialize)
</UL>
<P><STRONG><a name="[2d5]"></a>IssueBondingCallback</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, GAP.o(i.IssueBondingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = IssueBondingCallback &rArr; DeleteCallbackEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchAuthenticationStatusEvent
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondingEventHandler
</UL>

<P><STRONG><a name="[2db]"></a>IssueRemoteNameCallback</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, GAP.o(i.IssueRemoteNameCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = IssueRemoteNameCallback &rArr; DeleteCallbackEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRemoteNameEventHandler
</UL>

<P><STRONG><a name="[132]"></a>SearchACLLinkEntryBD_ADDR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GAP.o(i.SearchACLLinkEntryBD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SearchACLLinkEntryBD_ADDR &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Encryption_Mode
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Cancel_Bonding
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchAuthenticationEvent
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackACLInfo
</UL>

<P><STRONG><a name="[397]"></a>SearchACLLinkEntryConnection_Handle</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GAP.o(i.SearchACLLinkEntryConnection_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchACLLinkEntryConnection_Handle &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2d1]"></a>SearchCallbackEntry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GAP.o(i.SearchCallbackEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SearchCallbackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Query_Remote_Device_Name
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Initiate_Bonding
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_End_Bonding
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authentication_Response
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondingEventHandler
</UL>

<P><STRONG><a name="[133]"></a>AcquireGAPStackInfo</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, GAPLE.o(i.AcquireGAPStackInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AcquireGAPStackInfo &rArr; AcquireGAPLEContext &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseGAPLEContext
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPLEContext
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Scan_Response_Data
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Pairability_Mode
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Fixed_Passkey
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Set_Advertising_Data
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Resolve_Address
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Remove_Device_From_White_List
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Register_Remote_Authentication
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Regenerate_Long_Term_Key
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Generate_Long_Term_Key
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Diversify_Function
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Scan
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Create_Connection
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Disable
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Add_Device_To_White_List
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfoConnection_Handle
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Event_Callback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[136]"></a>AcquireGAPStackLELinkInfo</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, GAPLE.o(i.AcquireGAPStackLELinkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = AcquireGAPStackLELinkInfo &rArr; AcquireGAPStackInfo &rArr; AcquireGAPLEContext &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseGAPLEContext
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchLELinkEntryBD_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Query_Encryption_Mode
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Disconnect
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Connection_Parameter_Update_Response
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Update_Connection_Parameters
</UL>

<P><STRONG><a name="[138]"></a>AcquireGAPStackLELinkInfoConnection_Handle</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, GAPLE.o(i.AcquireGAPStackLELinkInfoConnection_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = AcquireGAPStackLELinkInfoConnection_Handle &rArr; AcquireGAPStackInfo &rArr; AcquireGAPLEContext &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseGAPLEContext
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchLELinkEntryConnection_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousPairingStatusCallbackFunction
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Event_Callback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase3DistributionScheduler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasskeyEventDispatcher
</UL>

<P><STRONG><a name="[146]"></a>AcquirePairingCallbackInformation</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, GAPLE.o(i.AcquirePairingCallbackInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AcquirePairingCallbackInformation &rArr; SearchCallbackInfoByType &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackInfoByType
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchAuthenticationCallback
</UL>

<P><STRONG><a name="[158]"></a>AddLELinkEntry</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, GAPLE.o(i.AddLELinkEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = AddLELinkEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeLELinkEntryMemory
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[172]"></a>AllocateSecurityManagerContext</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, GAPLE.o(i.AllocateSecurityManagerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = AllocateSecurityManagerContext &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
</UL>

<P><STRONG><a name="[399]"></a>AssignGAPAddressType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GAPLE.o(i.AssignGAPAddressType))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2fd]"></a>AssignHCIAddressType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GAPLE.o(i.AssignHCIAddressType))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Remove_Device_From_White_List
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Add_Device_To_White_List
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Confirm_Value_Generation
</UL>

<P><STRONG><a name="[61]"></a>AsynchronousPairingStatusCallbackFunction</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, GAPLE.o(i.AsynchronousPairingStatusCallbackFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = AsynchronousPairingStatusCallbackFunction &rArr; DispatchPairingStatusCallback &rArr; DispatchAuthenticationCallback &rArr; AcquirePairingCallbackInformation &rArr; SearchCallbackInfoByType &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfoConnection_Handle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAPLE.o(i.AuthenticationResponseZeroLengthResponse)
</UL>
<P><STRONG><a name="[182]"></a>AuthenticationResponsePasskeyConfirmationResponse</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, GAPLE.o(i.AuthenticationResponsePasskeyConfirmationResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = AuthenticationResponsePasskeyConfirmationResponse &rArr; BuildAndSendPairingConfirmPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Rand
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Confirm_Value_Generation
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatConfirmValueParameters
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingConfirmPDU
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasskeyEventDispatcher
</UL>

<P><STRONG><a name="[189]"></a>AuthenticationResponseZeroLengthResponse</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, GAPLE.o(i.AuthenticationResponseZeroLengthResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = AuthenticationResponseZeroLengthResponse &rArr; BuildAndSendPairingFailedPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ScheduleAsynchronousCallback
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Long_Term_Key_Request_Negative_Reply
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSecurityManagerResources
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingFailedPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
</UL>

<P><STRONG><a name="[1e5]"></a>BuildAndSendEncryptKey</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, GAPLE.o(i.BuildAndSendEncryptKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = BuildAndSendEncryptKey &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityManagerChannelWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
</UL>

<P><STRONG><a name="[187]"></a>BuildAndSendPairingConfirmPDU</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, GAPLE.o(i.BuildAndSendPairingConfirmPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = BuildAndSendPairingConfirmPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityManagerChannelWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
</UL>

<P><STRONG><a name="[18b]"></a>BuildAndSendPairingFailedPDU</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, GAPLE.o(i.BuildAndSendPairingFailedPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = BuildAndSendPairingFailedPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityManagerChannelWrite
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSecurityManagerResources
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponseZeroLengthResponse
</UL>

<P><STRONG><a name="[1e7]"></a>BuildAndSendPairingPDU</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, GAPLE.o(i.BuildAndSendPairingPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = BuildAndSendPairingPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityManagerChannelWrite
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildKeyDistributionField
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
</UL>

<P><STRONG><a name="[1e9]"></a>BuildAndSendPairingRandom</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, GAPLE.o(i.BuildAndSendPairingRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = BuildAndSendPairingRandom &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityManagerChannelWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
</UL>

<P><STRONG><a name="[1ea]"></a>BuildAndSendSlaveSecurityRequestPDU</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, GAPLE.o(i.BuildAndSendSlaveSecurityRequestPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = BuildAndSendSlaveSecurityRequestPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityManagerChannelWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
</UL>

<P><STRONG><a name="[1e8]"></a>BuildKeyDistributionField</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, GAPLE.o(i.BuildKeyDistributionField))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BuildKeyDistributionField
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingPDU
</UL>

<P><STRONG><a name="[207]"></a>CheckRemoteConfirmValue</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, GAPLE.o(i.CheckRemoteConfirmValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = CheckRemoteConfirmValue &rArr; SM_Confirm_Value_Generation &rArr; _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Confirm_Value_Generation
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatConfirmValueParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[2ab]"></a>ConvertFromTwoBasebandSlots</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, GAPLE.o(i.ConvertFromTwoBasebandSlots))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLEConnectionUpdateIndicationEventHandler
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatConnectionParametersFromHCI
</UL>

<P><STRONG><a name="[300]"></a>ConvertToBasebandSlots</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, GAPLE.o(i.ConvertToBasebandSlots))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Update_Connection_Parameters
</UL>

<P><STRONG><a name="[30a]"></a>ConvertToTwoBasebandSlots</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, GAPLE.o(i.ConvertToTwoBasebandSlots))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Update_Connection_Parameters
</UL>

<P><STRONG><a name="[410]"></a>CountAdvertisingDataRecords</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, GAPLE.o(i.CountAdvertisingDataRecords))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CountAdvertisingDataRecords
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAdvertisingDataRecords
</UL>

<P><STRONG><a name="[241]"></a>CreateCallbackInfoEntry</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, GAPLE.o(i.CreateCallbackInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CreateCallbackInfoEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Register_Remote_Authentication
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[252]"></a>DeleteCallbackInfoByType</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GAPLE.o(i.DeleteCallbackInfoByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteCallbackInfoByType &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cancel_Scan
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Enable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Advertising_Disable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSecurityManagerResources
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchSecurityEstablishmentCallback
</UL>

<P><STRONG><a name="[25a]"></a>DeleteLELinkEntryConnection_Handle</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GAPLE.o(i.DeleteLELinkEntryConnection_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteLELinkEntryConnection_Handle &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[264]"></a>DeterminePairingAlgorithm</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, GAPLE.o(i.DeterminePairingAlgorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DeterminePairingAlgorithm &rArr; ParsePairingPDU &rArr; ParseKeyDistributionField
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParsePairingPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasskeyEventDispatcher
</UL>

<P><STRONG><a name="[277]"></a>DispatchAuthenticationCallback</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, GAPLE.o(i.DispatchAuthenticationCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DispatchAuthenticationCallback &rArr; AcquirePairingCallbackInformation &rArr; SearchCallbackInfoByType &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquirePairingCallbackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase3DistributionScheduler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasskeyEventDispatcher
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PairingEncryptionChange
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchSecurityEstablishmentCallback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
</UL>

<P><STRONG><a name="[27a]"></a>DispatchDisconnectionCompleteCallback</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, GAPLE.o(i.DispatchDisconnectionCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DispatchDisconnectionCompleteCallback &rArr; SearchCallbackInfoByType &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackInfoByType
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[181]"></a>DispatchPairingStatusCallback</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, GAPLE.o(i.DispatchPairingStatusCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DispatchPairingStatusCallback &rArr; DispatchAuthenticationCallback &rArr; AcquirePairingCallbackInformation &rArr; SearchCallbackInfoByType &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquirePairingCallbackInformation
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSecurityManagerResources
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchAuthenticationCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousPairingStatusCallbackFunction
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Event_Callback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase3DistributionScheduler
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PairingEncryptionChange
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
</UL>

<P><STRONG><a name="[27b]"></a>DispatchSecurityEstablishmentCallback</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, GAPLE.o(i.DispatchSecurityEstablishmentCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DispatchSecurityEstablishmentCallback &rArr; DispatchAuthenticationCallback &rArr; AcquirePairingCallbackInformation &rArr; SearchCallbackInfoByType &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchAuthenticationCallback
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Event_Callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
</UL>

<P><STRONG><a name="[288]"></a>DivMaskGeneration</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, GAPLE.o(i.DivMaskGeneration))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = DivMaskGeneration &rArr; _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Regenerate_Long_Term_Key
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Generate_Long_Term_Key
</UL>

<P><STRONG><a name="[184]"></a>FormatConfirmValueParameters</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, GAPLE.o(i.FormatConfirmValueParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FormatConfirmValueParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRemoteConfirmValue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
</UL>

<P><STRONG><a name="[2aa]"></a>FormatConnectionParametersFromHCI</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, GAPLE.o(i.FormatConnectionParametersFromHCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FormatConnectionParametersFromHCI
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFromTwoBasebandSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2b7]"></a>FreeCallbackInfoList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GAPLE.o(i.FreeCallbackInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeCallbackInfoList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cleanup
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeLELinkEntryMemory
</UL>

<P><STRONG><a name="[15d]"></a>FreeLELinkEntryMemory</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, GAPLE.o(i.FreeLELinkEntryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FreeLELinkEntryMemory &rArr; FreeSecurityManagerResources &rArr; DeleteCallbackInfoByType &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSecurityManagerResources
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCallbackInfoList
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLELinkEntry
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeLELinkList
</UL>

<P><STRONG><a name="[2c8]"></a>FreeLELinkList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, GAPLE.o(i.FreeLELinkList))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FreeLELinkList &rArr; FreeLELinkEntryMemory &rArr; FreeSecurityManagerResources &rArr; DeleteCallbackInfoByType &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeLELinkEntryMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Cleanup
</UL>

<P><STRONG><a name="[18d]"></a>FreeSecurityManagerResources</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, GAPLE.o(i.FreeSecurityManagerResources))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FreeSecurityManagerResources &rArr; DeleteCallbackInfoByType &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Request_Security
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Pair_Remote_Device
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeLELinkEntryMemory
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingFailedPDU
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponseZeroLengthResponse
</UL>

<P><STRONG><a name="[73]"></a>GAPLEConnectionUpdateIndicationEventHandler</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, GAPLE.o(i.GAPLEConnectionUpdateIndicationEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = GAPLEConnectionUpdateIndicationEventHandler &rArr; _L2CA_Connection_Parameter_Update_Response &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connection_Parameter_Update_Response
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchLELinkEntryBD_ADDR
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackInfoByType
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFromTwoBasebandSlots
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAPLE.o(i.GAP_LE_Create_Connection)
</UL>
<P><STRONG><a name="[77]"></a>GAPLEScanningEventHandler</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, GAPLE.o(i.GAPLEScanningEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = GAPLEScanningEventHandler &rArr; ParseAdvertisingDataRecords &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackInfoByType
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAdvertisingDataRecords
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAPLE.o(i.GAP_LE_Perform_Scan)
</UL>
<P><STRONG><a name="[74]"></a>GAPLESecurityManagerMasterEventHandler</STRONG> (Thumb, 394 bytes, Stack size 112 bytes, GAPLE.o(i.GAPLESecurityManagerMasterEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = GAPLESecurityManagerMasterEventHandler &rArr; PasskeyEventDispatcher &rArr; AuthenticationResponsePasskeyConfirmationResponse &rArr; BuildAndSendPairingConfirmPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquirePairingCallbackInformation
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Start_Encryption
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Key_Generation
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasskeyEventDispatcher
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParsePairingPDU
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskEncryptionKey
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchAuthenticationCallback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingFailedPDU
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAPLE.o(i.GAP_LE_Create_Connection)
</UL>
<P><STRONG><a name="[70]"></a>GAPLESecurityManagerSlaveEventHandler</STRONG> (Thumb, 306 bytes, Stack size 88 bytes, GAPLE.o(i.GAPLESecurityManagerSlaveEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = GAPLESecurityManagerSlaveEventHandler &rArr; BuildAndSendPairingRandom &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSecurityManagerContext
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquirePairingCallbackInformation
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Key_Generation
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParsePairingPDU
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskEncryptionKey
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchSecurityEstablishmentCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchAuthenticationCallback
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingRandom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingFailedPDU
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAPLE.o(i.GAP_LE_Advertising_Enable)
</UL>
<P><STRONG><a name="[6e]"></a>HCI_Event_Callback</STRONG> (Thumb, 1268 bytes, Stack size 168 bytes, GAPLE.o(i.HCI_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = HCI_Event_Callback &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignGAPAddressType
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLELinkEntry
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Disconnect
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Long_Term_Key_Request_Reply
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Long_Term_Key_Request_Negative_Reply
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchLELinkEntryConnection_Handle
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCallbackInfoByType
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PairingEncryptionChange
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeLELinkEntryMemory
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCallbackInfoList
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatConnectionParametersFromHCI
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchSecurityEstablishmentCallback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchDisconnectionCompleteCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchAuthenticationCallback
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLELinkEntryConnection_Handle
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackInfoByType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCallbackInfoEntry
</UL>
<BR>[Address Reference Count : 3]<UL><LI> GAPLE.o(i.GAP_LE_Advertising_Enable)
<LI> GAPLE.o(i.GAP_LE_Create_Connection)
<LI> GAPLE.o(i.GAP_LE_Perform_Scan)
</UL>
<P><STRONG><a name="[6f]"></a>L2CA_Event_Callback</STRONG> (Thumb, 824 bytes, Stack size 104 bytes, GAPLE.o(i.L2CA_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = L2CA_Event_Callback &rArr; BuildAndSendPairingRandom &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignGAPAddressType
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ScheduleAsynchronousCallback
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyExchange
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchLELinkEntryBD_ADDR
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchAuthenticationCallback
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRemoteConfirmValue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingRandom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingFailedPDU
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingConfirmPDU
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> GAPLE.o(i.GAP_LE_Advertising_Enable)
<LI> GAPLE.o(i.GAP_LE_Create_Connection)
</UL>
<P><STRONG><a name="[2d9]"></a>MaskEncryptionKey</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, GAPLE.o(i.MaskEncryptionKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MaskEncryptionKey &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Reestablish_Security
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
</UL>

<P><STRONG><a name="[398]"></a>PairingEncryptionChange</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, GAPLE.o(i.PairingEncryptionChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = PairingEncryptionChange &rArr; DispatchPairingStatusCallback &rArr; DispatchAuthenticationCallback &rArr; AcquirePairingCallbackInformation &rArr; SearchCallbackInfoByType &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyExchange
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchAuthenticationCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2d7]"></a>ParseAdvertisingDataRecords</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, GAPLE.o(i.ParseAdvertisingDataRecords))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ParseAdvertisingDataRecords &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountAdvertisingDataRecords
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLEScanningEventHandler
</UL>

<P><STRONG><a name="[414]"></a>ParseKeyDistributionField</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, GAPLE.o(i.ParseKeyDistributionField))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ParseKeyDistributionField
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParsePairingPDU
</UL>

<P><STRONG><a name="[265]"></a>ParsePairingPDU</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, GAPLE.o(i.ParsePairingPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ParsePairingPDU &rArr; ParseKeyDistributionField
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseKeyDistributionField
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeterminePairingAlgorithm
</UL>

<P><STRONG><a name="[71]"></a>PasskeyEventDispatcher</STRONG> (Thumb, 238 bytes, Stack size 112 bytes, GAPLE.o(i.PasskeyEventDispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = PasskeyEventDispatcher &rArr; AuthenticationResponsePasskeyConfirmationResponse &rArr; BuildAndSendPairingConfirmPDU &rArr; SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfoConnection_Handle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Rand
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchAuthenticationCallback
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeterminePairingAlgorithm
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAPLE.o(i.GAP_LE_Authentication_Response)
</UL>
<P><STRONG><a name="[43d]"></a>PerformArrayXOR</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, GAPLE.o(i.PerformArrayXOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PerformArrayXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Confirm_Value_Generation
</UL>

<P><STRONG><a name="[72]"></a>Phase3DistributionScheduler</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, GAPLE.o(i.Phase3DistributionScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Phase3DistributionScheduler &rArr; DispatchPairingStatusCallback &rArr; DispatchAuthenticationCallback &rArr; AcquirePairingCallbackInformation &rArr; SearchCallbackInfoByType &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfoConnection_Handle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyExchange
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchAuthenticationCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> GAPLE.o(i.GAP_LE_Authentication_Response)
<LI> GAPLE.o(i.L2CA_Event_Callback)
</UL>
<P><STRONG><a name="[185]"></a>SM_Confirm_Value_Generation</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, GAPLE.o(i.SM_Confirm_Value_Generation))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = SM_Confirm_Value_Generation &rArr; _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignHCIAddressType
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Encrypt
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformArrayXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRemoteConfirmValue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthenticationResponsePasskeyConfirmationResponse
</UL>

<P><STRONG><a name="[30d]"></a>SM_Diversify_Function</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, GAPLE.o(i.SM_Diversify_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = SM_Diversify_Function &rArr; _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Regenerate_Long_Term_Key
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Generate_Long_Term_Key
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Diversify_Function
</UL>

<P><STRONG><a name="[2d8]"></a>SM_Key_Generation</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, GAPLE.o(i.SM_Key_Generation))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SM_Key_Generation &rArr; _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerSlaveEventHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLESecurityManagerMasterEventHandler
</UL>

<P><STRONG><a name="[31e]"></a>SM_Random_Address_Hash</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, GAPLE.o(i.SM_Random_Address_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SM_Random_Address_Hash &rArr; _HCI_LE_Encrypt &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Resolve_Address
</UL>

<P><STRONG><a name="[147]"></a>SearchCallbackInfoByType</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GAPLE.o(i.SearchCallbackInfoByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchCallbackInfoByType &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Register_Remote_Authentication
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquirePairingCallbackInformation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLEScanningEventHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLEConnectionUpdateIndicationEventHandler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchDisconnectionCompleteCallback
</UL>

<P><STRONG><a name="[137]"></a>SearchLELinkEntryBD_ADDR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GAPLE.o(i.SearchLELinkEntryBD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SearchLELinkEntryBD_ADDR &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfo
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPLEConnectionUpdateIndicationEventHandler
</UL>

<P><STRONG><a name="[139]"></a>SearchLELinkEntryConnection_Handle</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GAPLE.o(i.SearchLELinkEntryConnection_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchLELinkEntryConnection_Handle &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfoConnection_Handle
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[1e6]"></a>SecurityManagerChannelWrite</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, GAPLE.o(i.SecurityManagerChannelWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = SecurityManagerChannelWrite &rArr; L2CA_Fixed_Channel_Data_Write &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Fixed_Channel_Data_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Authentication_Response
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendSlaveSecurityRequestPDU
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingRandom
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingPDU
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingFailedPDU
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendPairingConfirmPDU
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSendEncryptKey
</UL>

<P><STRONG><a name="[3ee]"></a>TestKeyExchange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, GAPLE.o(i.TestKeyExchange))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase3DistributionScheduler
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PairingEncryptionChange
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[307]"></a>TestValidConnectionParameters</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, GAPLE.o(i.TestValidConnectionParameters))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Connection_Parameter_Update_Response
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Update_Connection_Parameters
</UL>

<P><STRONG><a name="[309]"></a>TestValidScanParameters</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, GAPLE.o(i.TestValidScanParameters))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Perform_Scan
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LE_Create_Connection
</UL>

<P><STRONG><a name="[60]"></a>Timer_Event_Callback</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, GAPLE.o(i.Timer_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Timer_Event_Callback &rArr; DispatchPairingStatusCallback &rArr; DispatchAuthenticationCallback &rArr; AcquirePairingCallbackInformation &rArr; SearchCallbackInfoByType &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackLELinkInfoConnection_Handle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchSecurityEstablishmentCallback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchPairingStatusCallback
</UL>
<BR>[Address Reference Count : 8]<UL><LI> GAPLE.o(i.AuthenticationResponsePasskeyConfirmationResponse)
<LI> GAPLE.o(i.GAPLESecurityManagerMasterEventHandler)
<LI> GAPLE.o(i.GAPLESecurityManagerSlaveEventHandler)
<LI> GAPLE.o(i.GAP_LE_Authentication_Response)
<LI> GAPLE.o(i.GAP_LE_Pair_Remote_Device)
<LI> GAPLE.o(i.GAP_LE_Reestablish_Security)
<LI> GAPLE.o(i.GAP_LE_Request_Security)
<LI> GAPLE.o(i.L2CA_Event_Callback)
</UL>
<P><STRONG><a name="[75]"></a>_HCI_Event_Callback</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, GAPLE.o(i._HCI_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _HCI_Event_Callback &rArr; AcquireGAPStackInfo &rArr; AcquireGAPLEContext &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAPLE.o(i.GAP_LE_Initialize)
</UL>
<P><STRONG><a name="[76]"></a>_L2CA_Event_Callback</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, GAPLE.o(i._L2CA_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _L2CA_Event_Callback &rArr; AcquireGAPStackInfo &rArr; AcquireGAPLEContext &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGAPStackInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAPLE.o(i.GAP_LE_Initialize)
</UL>
<P><STRONG><a name="[8a]"></a>AsynchronousACLDataCallback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, HCI.o(i.AsynchronousACLDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AsynchronousACLDataCallback &rArr; BTPS_AddMailbox &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AddMailbox
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCI.o(i.HCI_Initialize)
</UL>
<P><STRONG><a name="[89]"></a>AsynchronousHCIEventCallback</STRONG> (Thumb, 1668 bytes, Stack size 48 bytes, HCI.o(i.AsynchronousHCIEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = AsynchronousHCIEventCallback &rArr; BuildEventBD_ADDRVariableData &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AddMailbox
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventWord
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventByteWordWord
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventByteWordByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventByteBD_ADDRByte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventByte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventBD_ADDRVariableData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventBD_ADDRDWord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCI.o(i.HCI_Initialize)
</UL>
<P><STRONG><a name="[8b]"></a>AsynchronousSCODataCallback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, HCI.o(i.AsynchronousSCODataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AsynchronousSCODataCallback &rArr; BTPS_AddMailbox &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AddMailbox
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCI.o(i.HCI_Initialize)
</UL>
<P><STRONG><a name="[1eb]"></a>BuildAndSubmitCommandBD_ADDRByte</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, HCI.o(i.BuildAndSubmitCommandBD_ADDRByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Passkey_Request_Negative_Reply
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Confirmation_Request_Reply
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Confirmation_Request_Negative_Reply
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Send_Keypress_Notification
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_OOB_Data_Request_Negative_Reply
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_PIN_Code_Request_Negative_Reply
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Link_Key_Request_Negative_Reply
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_IO_Capability_Request_Negative_Reply
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Delete_Stored_Link_Key
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Create_Connection_Cancel
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Reject_Connection_Request
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Accept_Connection_Request
</UL>

<P><STRONG><a name="[1ee]"></a>BuildAndSubmitCommandBD_ADDRByteVariable</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, HCI.o(i.BuildAndSubmitCommandBD_ADDRByteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = BuildAndSubmitCommandBD_ADDRByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_User_Passkey_Request_Reply
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_PIN_Code_Request_Reply
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Link_Key_Request_Reply
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Random_Address
</UL>

<P><STRONG><a name="[1ef]"></a>BuildAndSubmitCommandByte</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, HCI.o(i.BuildAndSubmitCommandByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = BuildAndSubmitCommandByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Simple_Pairing_Mode
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Scan_Enable
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Encryption_Mode
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertise_Enable
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_SCO_Flow_Control_Enable
</UL>

<P><STRONG><a name="[1f0]"></a>BuildAndSubmitCommandByteVariable</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, HCI.o(i.BuildAndSubmitCommandByteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Current_IAC_LAP
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Class_of_Device
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_IO_Capability_Request_Reply
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Response_Data
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Enable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertising_Data
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Remove_Device_From_White_List
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Add_Device_To_White_List
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_LE_Host_Supported
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Set_Event_Mask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandNoData
</UL>

<P><STRONG><a name="[1f1]"></a>BuildAndSubmitCommandNoData</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, HCI.o(i.BuildAndSubmitCommandNoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Scan_Enable
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Name
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Class_of_Device
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_BD_ADDR
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Read_White_List_Size
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Rand
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Create_Connection_Cancel
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Clear_White_List
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Simple_Pairing_Mode
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Version_Information
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Supported_Features
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Supported_Commands
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_LE_Host_Supported
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Buffer_Size
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Read_Buffer_Size
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
</UL>

<P><STRONG><a name="[1f2]"></a>BuildAndSubmitCommandThreeWords</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, HCI.o(i.BuildAndSubmitCommandThreeWords))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = BuildAndSubmitCommandThreeWords &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Link_Supervision_Timeout
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Automatic_Flush_Timeout
</UL>

<P><STRONG><a name="[1f3]"></a>BuildAndSubmitCommandWord</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, HCI.o(i.BuildAndSubmitCommandWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = BuildAndSubmitCommandWord &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Authentication_Requested
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Long_Term_Key_Request_Negative_Reply
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Write_Default_Link_Policy_Settings
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Flush
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Exit_Sniff_Mode
</UL>

<P><STRONG><a name="[1f4]"></a>BuildAndSubmitCommandWordByte</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, HCI.o(i.BuildAndSubmitCommandWordByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommandHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Set_Connection_Encryption
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Disconnect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Remote_Extended_Features
</UL>

<P><STRONG><a name="[1ec]"></a>BuildCommandHeader</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, HCI.o(i.BuildCommandHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BuildCommandHeader &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_OOB_Data_Request_Reply
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_Name_Request
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Periodic_Inquiry_Mode
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Inquiry
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Create_Connection
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Change_Local_Name
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Start_Encryption
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Parameters
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertising_Parameters
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Long_Term_Key_Request_Reply
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Encrypt
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Create_Connection
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Connection_Update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Sniff_Mode
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Host_Number_Of_Completed_Packets
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWordByte
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWord
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandThreeWords
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByte
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByteVariable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>

<P><STRONG><a name="[17f]"></a>BuildEventBD_ADDRDWord</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, HCI.o(i.BuildEventBD_ADDRDWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = BuildEventBD_ADDRDWord &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
</UL>

<P><STRONG><a name="[180]"></a>BuildEventBD_ADDRVariableData</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, HCI.o(i.BuildEventBD_ADDRVariableData))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BuildEventBD_ADDRVariableData &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
</UL>

<P><STRONG><a name="[17a]"></a>BuildEventByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, HCI.o(i.BuildEventByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BuildEventByte &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
</UL>

<P><STRONG><a name="[17c]"></a>BuildEventByteBD_ADDRByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, HCI.o(i.BuildEventByteBD_ADDRByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = BuildEventByteBD_ADDRByte &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
</UL>

<P><STRONG><a name="[17b]"></a>BuildEventByteWordByte</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, HCI.o(i.BuildEventByteWordByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = BuildEventByteWordByte &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
</UL>

<P><STRONG><a name="[17d]"></a>BuildEventByteWordWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, HCI.o(i.BuildEventByteWordWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = BuildEventByteWordWord &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
</UL>

<P><STRONG><a name="[178]"></a>BuildEventHeader</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, HCI.o(i.BuildEventHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIRemoteNameEventHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILEAdvertisingEventHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIInquiryEventHandler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventWord
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventByteWordWord
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventByteWordByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventByteBD_ADDRByte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventByte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventBD_ADDRVariableData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventBD_ADDRDWord
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
</UL>

<P><STRONG><a name="[17e]"></a>BuildEventWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, HCI.o(i.BuildEventWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BuildEventWord &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousHCIEventCallback
</UL>

<P><STRONG><a name="[248]"></a>CreditDataPacket</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, HCI.o(i.CreditDataPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = CreditDataPacket &rArr; _HCI_Host_Number_Of_Completed_Packets &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Host_Number_Of_Completed_Packets
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHCICallbackThread
</UL>

<P><STRONG><a name="[251]"></a>DeleteCallbackEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, HCI.o(i.DeleteCallbackEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteCallbackEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHCICallbackThread
</UL>

<P><STRONG><a name="[262]"></a>DetermineLEControllerSupport</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, HCI.o(i.DetermineLEControllerSupport))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = DetermineLEControllerSupport &rArr; _HCI_Read_Local_Supported_Features &rArr; BuildAndSubmitCommandNoData &rArr; BuildAndSubmitCommandByteVariable &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Local_Supported_Features
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Query_LE_Controller_Support
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Initialize
</UL>

<P><STRONG><a name="[2b9]"></a>FreeCallbackList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, HCI.o(i.FreeCallbackList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeCallbackList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Cleanup
</UL>

<P><STRONG><a name="[e6]"></a>HCIInquiryEventHandler</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, HCI.o(i.HCIInquiryEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = HCIInquiryEventHandler &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseInquiryResultRSSI
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>
<BR>[Address Reference Count : 2]<UL><LI> HCI.o(i._HCI_Inquiry)
<LI> HCI.o(i._HCI_Periodic_Inquiry_Mode)
</UL>
<P><STRONG><a name="[e7]"></a>HCILEAdvertisingEventHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, HCI.o(i.HCILEAdvertisingEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HCILEAdvertisingEventHandler &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCI.o(i._HCI_LE_Set_Advertise_Enable)
</UL>
<P><STRONG><a name="[e8]"></a>HCILEScanningEventHandler</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, HCI.o(i.HCILEScanningEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HCILEScanningEventHandler &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>
<BR>[Address Reference Count : 2]<UL><LI> HCI.o(i._HCI_LE_Set_Scan_Enable)
<LI> HCI.o(i._HCI_LE_Set_Scan_Parameters)
</UL>
<P><STRONG><a name="[e9]"></a>HCIRemoteNameEventHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, HCI.o(i.HCIRemoteNameEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HCIRemoteNameEventHandler &rArr; BuildEventHeader &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildEventHeader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCI.o(i._HCI_Remote_Name_Request)
</UL>
<P><STRONG><a name="[1ed]"></a>HCISendPacket</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, HCI.o(i.HCISendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_GetTickCount
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendPacket
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ProcessHCIDriverInformation
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CancelPacket
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_ProcessAsynchronousTimers
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_Raw_Command
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_OOB_Data_Request_Reply
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_Name_Request
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Periodic_Inquiry_Mode
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Inquiry
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Create_Connection
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Change_Local_Name
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Start_Encryption
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Parameters
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertising_Parameters
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Long_Term_Key_Request_Reply
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Encrypt
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Create_Connection
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Connection_Update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Sniff_Mode
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Host_Number_Of_Completed_Packets
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataPacket
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWordByte
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandWord
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandThreeWords
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByteVariable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandByte
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByteVariable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildAndSubmitCommandBD_ADDRByte
</UL>

<P><STRONG><a name="[86]"></a>MailboxDeleteDataCallback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, HCI.o(i.MailboxDeleteDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MailboxDeleteDataCallback &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Address Reference Count : 2]<UL><LI> HCI.o(i.HCI_Cleanup)
<LI> HCI.o(i.HCI_Initialize)
</UL>
<P><STRONG><a name="[375]"></a>ParseInquiryResultRSSI</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, HCI.o(i.ParseInquiryResultRSSI))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIInquiryEventHandler
</UL>

<P><STRONG><a name="[3bc]"></a>RegisterCallback</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, HCI.o(i.RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = RegisterCallback &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Register_Event_Callback
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Register_SCO_Data_Callback
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Register_ACL_Data_Callback
</UL>

<P><STRONG><a name="[3c1]"></a>SendDataPacket</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, HCI.o(i.SendDataPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifySharedBufferPointer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustSharedBuffer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCISendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_ACL_Data
</UL>

<P><STRONG><a name="[45a]"></a>SetEventHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, HCI.o(i.SetEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Remote_Name_Request
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Periodic_Inquiry_Mode
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Inquiry
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Parameters
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Scan_Enable
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_LE_Set_Advertise_Enable
</UL>

<P><STRONG><a name="[64]"></a>SynchronousHCICommandCallback</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, HCI.o(i.SynchronousHCICommandCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SynchronousHCICommandCallback &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Address Reference Count : 23]<UL><LI> HCI.o(i.BuildAndSubmitCommandByteVariable)
<LI> HCI.o(i.BuildAndSubmitCommandThreeWords)
<LI> HCI.o(i.BuildAndSubmitCommandWord)
<LI> HCI.o(i.BuildAndSubmitCommandWordByte)
<LI> HCI.o(i.HCI_Send_Raw_Command)
<LI> HCI.o(i._HCI_Change_Local_Name)
<LI> HCI.o(i._HCI_Create_Connection)
<LI> HCI.o(i._HCI_Host_Number_Of_Completed_Packets)
<LI> HCI.o(i._HCI_Inquiry)
<LI> HCI.o(i._HCI_LE_Connection_Update)
<LI> HCI.o(i._HCI_LE_Create_Connection)
<LI> HCI.o(i._HCI_LE_Encrypt)
<LI> HCI.o(i._HCI_LE_Long_Term_Key_Request_Reply)
<LI> HCI.o(i._HCI_LE_Set_Advertising_Parameters)
<LI> HCI.o(i._HCI_LE_Set_Scan_Parameters)
<LI> HCI.o(i._HCI_LE_Start_Encryption)
<LI> HCI.o(i._HCI_Periodic_Inquiry_Mode)
<LI> HCI.o(i.BuildAndSubmitCommandBD_ADDRByte)
<LI> HCI.o(i.BuildAndSubmitCommandBD_ADDRByteVariable)
<LI> HCI.o(i.BuildAndSubmitCommandByte)
<LI> HCI.o(i._HCI_Remote_Name_Request)
<LI> HCI.o(i._HCI_Remote_OOB_Data_Request_Reply)
<LI> HCI.o(i._HCI_Sniff_Mode)
</UL>
<P><STRONG><a name="[87]"></a>UpdateHCICallbackThread</STRONG> (Thumb, 550 bytes, Stack size 64 bytes, HCI.o(i.UpdateHCICallbackThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = UpdateHCICallbackThread &rArr; BSC_Shutdown &rArr; SDP_Cleanup &rArr; FreeConnectionInfoList &rArr; CleanupSDPConnection &rArr; _L2CA_Disconnect_Request &rArr; L2CAP_DisconnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_WaitMailbox
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_Shutdown
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ProcessHCIDriverInformation
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCallbackEntry
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreditDataPacket
</UL>
<BR>[Address Reference Count : 2]<UL><LI> HCI.o(i.HCI_Cleanup)
<LI> HCI.o(i.HCI_Initialize)
</UL>
<P><STRONG><a name="[145]"></a>AcquireL2CAPStackInformation</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, L2CAP.o(i.AcquireL2CAPStackInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AcquireL2CAPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Set_Link_Connection_Configuration
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Get_Link_Connection_State
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Register_Fixed_Channel
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Un_Register_Fixed_Channel
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Enhanced_Fixed_Channel_Data_Write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_StateTimeout
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReceiveTimeout
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayedAuthenticationProcess
</UL>

<P><STRONG><a name="[150]"></a>AddConnectionInfoEntry</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, L2CAP.o(i.AddConnectionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AddConnectionInfoEntry &rArr; BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByBD_ADDRType
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectRequest
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectIndication
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[160]"></a>AddRegistryInfoEntry</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, L2CAP.o(i.AddRegistryInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AddRegistryInfoEntry &rArr; BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Register_Fixed_Channel
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Register_PSM
</UL>

<P><STRONG><a name="[206]"></a>CheckQueuedDataWrite</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, L2CAP.o(i.CheckQueuedDataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CheckQueuedDataWrite &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Enhanced_Data_Write
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Enhanced_Fixed_Channel_Data_Write
</UL>

<P><STRONG><a name="[20c]"></a>CleanupChannel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, L2CAP.o(i.CleanupChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CleanupChannel &rArr; _L2CA_Flush_Channel_Data &rArr; DeleteIdentifierInfoEntryByIdentifier &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Flush_Channel_Data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChannelInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfmNeg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_StateTimeout
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
</UL>

<P><STRONG><a name="[242]"></a>CreateNewChannel</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, L2CAP.o(i.CreateNewChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CreateNewChannel &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestEvent
</UL>

<P><STRONG><a name="[247]"></a>CreateNewIdentifierEntry</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, L2CAP.o(i.CreateNewIdentifierEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CreateNewIdentifierEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfm
</UL>

<P><STRONG><a name="[88]"></a>DelayedAuthenticationProcess</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, L2CAP.o(i.DelayedAuthenticationProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = DelayedAuthenticationProcess &rArr; LP_ConnectCfmNeg &rArr; L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AuthenticateDevice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfmNeg
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> L2CAP.o(i.HCI_Event_Callback)
</UL>
<P><STRONG><a name="[24f]"></a>DeleteACLPacketEntry</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, L2CAP.o(i.DeleteACLPacketEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteACLPacketEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Flush_Channel_Data
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReceiveTimeout
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectResponseEvent
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionParameterUpdateResponseEvent
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectResponseEvent
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigResponseEvent
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedFragmentPacket
</UL>

<P><STRONG><a name="[20e]"></a>DeleteChannelInfoEntry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, L2CAP.o(i.DeleteChannelInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteChannelInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Response
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeChannelInfoList
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupChannel
</UL>

<P><STRONG><a name="[253]"></a>DeleteConnectionInfoEntry</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, L2CAP.o(i.DeleteConnectionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteConnectionInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFixedChannelInfoList
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfmNeg
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
</UL>

<P><STRONG><a name="[259]"></a>DeleteIdentifierInfoEntryByIdentifier</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, L2CAP.o(i.DeleteIdentifierInfoEntryByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DeleteIdentifierInfoEntryByIdentifier &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Flush_Channel_Data
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectResponseEvent
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionParameterUpdateResponseEvent
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectResponseEvent
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigResponseEvent
</UL>

<P><STRONG><a name="[25e]"></a>DeleteRegistryInfoEntry</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, L2CAP.o(i.DeleteRegistryInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteRegistryInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Un_Register_Fixed_Channel
</UL>

<P><STRONG><a name="[3a4]"></a>DispatchFixedChannelConnectDisconnect</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, L2CAP.o(i.DispatchFixedChannelConnectDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DispatchFixedChannelConnectDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[298]"></a>EnhancedFragmentPacket</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, L2CAP.o(i.EnhancedFragmentPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLPacketEntryByIdentifier
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragmentPacket
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Enhanced_Data_Write
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Enhanced_Fixed_Channel_Data_Write
</UL>

<P><STRONG><a name="[420]"></a>FormatEventCIDOnly</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, L2CAP.o(i.FormatEventCIDOnly))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
</UL>

<P><STRONG><a name="[2ad]"></a>FormatEventConfigConfirmation</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, L2CAP.o(i.FormatEventConfigConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FormatEventConfigConfirmation &rArr; ParseOptionsToAPI &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseOptionsToAPI
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigResponseEvent
</UL>

<P><STRONG><a name="[3a0]"></a>FormatEventConnectConfirmation</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, L2CAP.o(i.FormatEventConnectConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FormatEventConnectConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfmNeg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestEvent
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectResponseEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[3e4]"></a>FormatEventDisconnectConfirmation</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, L2CAP.o(i.FormatEventDisconnectConfirmation))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectResponseEvent
</UL>

<P><STRONG><a name="[3e1]"></a>FormatEventDisconnectIndication</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, L2CAP.o(i.FormatEventDisconnectIndication))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_StateTimeout
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestEvent
</UL>

<P><STRONG><a name="[299]"></a>FragmentPacket</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, L2CAP.o(i.FragmentPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedFragmentPacket
</UL>

<P><STRONG><a name="[2b2]"></a>FreeACLDataList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, L2CAP.o(i.FreeACLDataList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeACLDataList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2bb]"></a>FreeChannelInfoList</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, L2CAP.o(i.FreeChannelInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FreeChannelInfoList &rArr; DeleteChannelInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChannelInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2be]"></a>FreeConnectionInfoList</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, L2CAP.o(i.FreeConnectionInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FreeConnectionInfoList &rArr; FreeFixedChannelInfoList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFixedChannelInfoList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[254]"></a>FreeFixedChannelInfoList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, L2CAP.o(i.FreeFixedChannelInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeFixedChannelInfoList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeConnectionInfoList
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntry
</UL>

<P><STRONG><a name="[2c4]"></a>FreeIdentifierInfoList</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, L2CAP.o(i.FreeIdentifierInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeIdentifierInfoList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[2c7]"></a>FreeL2CAPContextInformation</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, L2CAP.o(i.FreeL2CAPContextInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FreeL2CAPContextInformation &rArr; VerifySharedBufferPointer &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifySharedBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Initialize
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
</UL>

<P><STRONG><a name="[2cd]"></a>FreeRegistryInfoList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, L2CAP.o(i.FreeRegistryInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeRegistryInfoList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
</UL>

<P><STRONG><a name="[361]"></a>GetNextChannelInfoEntry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, L2CAP.o(i.GetNextChannelInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetNextChannelInfoEntry &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfmNeg
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[3ed]"></a>GetNextDataIdentifier</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, L2CAP.o(i.GetNextDataIdentifier))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Enhanced_Data_Write
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Enhanced_Fixed_Channel_Data_Write
</UL>

<P><STRONG><a name="[402]"></a>GetNextIDNumber</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, L2CAP.o(i.GetNextIDNumber))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Register_Fixed_Channel
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Register_PSM
</UL>

<P><STRONG><a name="[92]"></a>HCI_ACL_Data_Callback</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, L2CAP.o(i.HCI_ACL_Data_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = HCI_ACL_Data_Callback &rArr; ProcessL2CAPDataPacket &rArr; L2CAP_ConfigRequestEvent &rArr; L2CAP_ConfigRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_ChangeTimer
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyACLHeader
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLPacketEntryByConnectionHandle
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueACLPacket
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReceiveTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> L2CAP.o(i.L2CAP_Initialize)
</UL>
<P><STRONG><a name="[91]"></a>HCI_Event_Callback</STRONG> (Thumb, 1270 bytes, Stack size 72 bytes, L2CAP.o(i.HCI_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = HCI_Event_Callback &rArr; LP_ConnectCfmNeg &rArr; L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Schedule_Asynchronous_Callback
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByBD_ADDRType
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectIndication
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfmNeg
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfm
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessACLQueue
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestResponse
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextChannelInfoEntry
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeIdentifierInfoList
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeConnectionInfoList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeChannelInfoList
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeACLDataList
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventConnectConfirmation
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchFixedChannelConnectDisconnect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddConnectionInfoEntry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Simple_Pairing_Mode
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Read_Remote_Extended_Features
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> L2CAP.o(i.L2CAP_Initialize)
</UL>
<P><STRONG><a name="[3a2]"></a>HandleChannelDisconnection</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, L2CAP.o(i.HandleChannelDisconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = HandleChannelDisconnection &rArr; LP_DisconnectReq &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByBD_ADDRType
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntry
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Cleanup
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectResponseEvent
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestEvent
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectResponseEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[3e9]"></a>HandleReadDataError</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, L2CAP.o(i.HandleReadDataError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HandleReadDataError
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReceiveTimeout
</UL>

<P><STRONG><a name="[3d7]"></a>L2CAP_ConfigRequestEvent</STRONG> (Thumb, 528 bytes, Stack size 72 bytes, L2CAP.o(i.L2CAP_ConfigRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = L2CAP_ConfigRequestEvent &rArr; L2CAP_ConfigRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseOptionsToAPI
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RejectCommand
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>

<P><STRONG><a name="[3d8]"></a>L2CAP_ConfigRequestResponse</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, L2CAP.o(i.L2CAP_ConfigRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = L2CAP_ConfigRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Response
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestEvent
</UL>

<P><STRONG><a name="[3da]"></a>L2CAP_ConfigResponseEvent</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, L2CAP.o(i.L2CAP_ConfigResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = L2CAP_ConfigResponseEvent &rArr; DeleteIdentifierInfoEntryByIdentifier &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLPacketEntryByIdentifier
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventConfigConfirmation
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>

<P><STRONG><a name="[3db]"></a>L2CAP_ConnectRequestEvent</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, L2CAP.o(i.L2CAP_ConnectRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = L2CAP_ConnectRequestEvent &rArr; L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRegistryByValue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestResponse
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>

<P><STRONG><a name="[3a3]"></a>L2CAP_ConnectRequestResponse</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, L2CAP.o(i.L2CAP_ConnectRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Response
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfmNeg
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfm
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[3dd]"></a>L2CAP_ConnectResponseEvent</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, L2CAP.o(i.L2CAP_ConnectResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = L2CAP_ConnectResponseEvent &rArr; HandleChannelDisconnection &rArr; LP_DisconnectReq &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLPacketEntryByIdentifier
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventConnectConfirmation
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>

<P><STRONG><a name="[3de]"></a>L2CAP_ConnectionParameterUpdateRequestEvent</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, L2CAP.o(i.L2CAP_ConnectionParameterUpdateRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = L2CAP_ConnectionParameterUpdateRequestEvent &rArr; L2CAP_RejectCommand &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRegistryByValue
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RejectCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>

<P><STRONG><a name="[3df]"></a>L2CAP_ConnectionParameterUpdateResponseEvent</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, L2CAP.o(i.L2CAP_ConnectionParameterUpdateResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = L2CAP_ConnectionParameterUpdateResponseEvent &rArr; DeleteIdentifierInfoEntryByIdentifier &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRegistryByValue
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLPacketEntryByIdentifier
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>

<P><STRONG><a name="[67]"></a>L2CAP_ConnectionTimeout</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, L2CAP.o(i.L2CAP_ConnectionTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = L2CAP_ConnectionTimeout &rArr; LP_DisconnectReq &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Address Reference Count : 4]<UL><LI> L2CAP.o(i.HCI_Event_Callback)
<LI> L2CAP.o(i.HandleChannelDisconnection)
<LI> L2CAP.o(i._L2CA_Connect_Request)
<LI> L2CAP.o(i.DelayedAuthenticationProcess)
</UL>
<P><STRONG><a name="[2b1]"></a>L2CAP_DataWrite</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, L2CAP.o(i.L2CAP_DataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueACLPacket
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessACLQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connection_Parameter_Update_Response
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RejectCommand
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_InformationRequestResponse
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_EchoRequestResponse
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestResponse
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestResponse
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestResponse
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragmentPacket
</UL>

<P><STRONG><a name="[3e0]"></a>L2CAP_DisconnectRequestEvent</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, L2CAP.o(i.L2CAP_DisconnectRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = L2CAP_DisconnectRequestEvent &rArr; L2CAP_RejectCommand &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Flush_Channel_Data
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RejectCommand
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestResponse
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventDisconnectIndication
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventConnectConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>

<P><STRONG><a name="[3e2]"></a>L2CAP_DisconnectRequestResponse</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, L2CAP.o(i.L2CAP_DisconnectRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = L2CAP_DisconnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestEvent
</UL>

<P><STRONG><a name="[3e3]"></a>L2CAP_DisconnectResponseEvent</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, L2CAP.o(i.L2CAP_DisconnectResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = L2CAP_DisconnectResponseEvent &rArr; HandleChannelDisconnection &rArr; LP_DisconnectReq &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLPacketEntryByIdentifier
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventDisconnectConfirmation
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>

<P><STRONG><a name="[3e5]"></a>L2CAP_EchoRequestResponse</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, L2CAP.o(i.L2CAP_EchoRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = L2CAP_EchoRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>

<P><STRONG><a name="[3e6]"></a>L2CAP_InformationRequestResponse</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, L2CAP.o(i.L2CAP_InformationRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = L2CAP_InformationRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>

<P><STRONG><a name="[39e]"></a>L2CAP_ProcessACLQueue</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, L2CAP.o(i.L2CAP_ProcessACLQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[85]"></a>L2CAP_ReceiveTimeout</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, L2CAP.o(i.L2CAP_ReceiveTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = L2CAP_ReceiveTimeout &rArr; AcquireL2CAPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadDataError
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> L2CAP.o(i.HCI_ACL_Data_Callback)
</UL>
<P><STRONG><a name="[3d9]"></a>L2CAP_RejectCommand</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, L2CAP.o(i.L2CAP_RejectCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = L2CAP_RejectCommand &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyACLHeader
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestEvent
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionParameterUpdateRequestEvent
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestEvent
</UL>

<P><STRONG><a name="[90]"></a>L2CAP_RequestTimeout</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, L2CAP.o(i.L2CAP_RequestTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = L2CAP_RequestTimeout &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_ChangeTimer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchIdentifierInfoEntryByIdentifier
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLPacketEntryByIdentifier
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessACLQueue
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventDisconnectIndication
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventDisconnectConfirmation
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventConnectConfirmation
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventConfigConfirmation
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
</UL>
<BR>[Address Reference Count : 2]<UL><LI> L2CAP.o(i.L2CAP_ConnectResponseEvent)
<LI> L2CAP.o(i.ProcessSendQueueData)
</UL>
<P><STRONG><a name="[8f]"></a>L2CAP_StateTimeout</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, L2CAP.o(i.L2CAP_StateTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = L2CAP_StateTimeout &rArr; _L2CA_Disconnect_Request &rArr; L2CAP_DisconnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventDisconnectIndication
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupChannel
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireL2CAPStackInformation
</UL>
<BR>[Address Reference Count : 5]<UL><LI> L2CAP.o(i.L2CAP_ConfigRequestEvent)
<LI> L2CAP.o(i.L2CAP_ConnectRequestEvent)
<LI> L2CAP.o(i.L2CAP_ConnectResponseEvent)
<LI> L2CAP.o(i._L2CA_Config_Request)
<LI> L2CAP.o(i._L2CA_Connect_Response)
</UL>
<P><STRONG><a name="[24d]"></a>LP_ConnectCfm</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, L2CAP.o(i.LP_ConnectCfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = LP_ConnectCfm &rArr; L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestResponse
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextChannelInfoEntry
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewIdentifierEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayedAuthenticationProcess
</UL>

<P><STRONG><a name="[24b]"></a>LP_ConnectCfmNeg</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, L2CAP.o(i.LP_ConnectCfmNeg))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = LP_ConnectCfmNeg &rArr; L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByBD_ADDRType
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestResponse
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextChannelInfoEntry
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventConnectConfirmation
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntry
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayedAuthenticationProcess
</UL>

<P><STRONG><a name="[39c]"></a>LP_ConnectIndication</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, L2CAP.o(i.LP_ConnectIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = LP_ConnectIndication &rArr; _HCI_Reject_Connection_Request &rArr; BuildAndSubmitCommandBD_ADDRByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByBD_ADDRType
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddConnectionInfoEntry
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Reject_Connection_Request
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Accept_Connection_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[406]"></a>LP_ConnectRequest</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, L2CAP.o(i.LP_ConnectRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = LP_ConnectRequest &rArr; _HCI_Create_Connection &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Create_Connection
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddConnectionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
</UL>

<P><STRONG><a name="[39d]"></a>LP_DisconnectCfm</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, L2CAP.o(i.LP_DisconnectCfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LP_DisconnectCfm &rArr; CleanupChannel &rArr; _L2CA_Flush_Channel_Data &rArr; DeleteIdentifierInfoEntryByIdentifier &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextChannelInfoEntry
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventDisconnectIndication
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventConnectConfirmation
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchFixedChannelConnectDisconnect
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteIdentifierInfoEntryByIdentifier
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntry
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[24c]"></a>LP_DisconnectReq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, L2CAP.o(i.LP_DisconnectReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = LP_DisconnectReq &rArr; _HCI_Disconnect &rArr; BuildAndSubmitCommandWordByte &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Disconnect
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectCfm
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfm
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_StateTimeout
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionTimeout
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestEvent
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayedAuthenticationProcess
</UL>

<P><STRONG><a name="[467]"></a>ParseAPIOptions</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, L2CAP.o(i.ParseAPIOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParseAPIOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Response
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
</UL>

<P><STRONG><a name="[2ae]"></a>ParseOptionsToAPI</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, L2CAP.o(i.ParseOptionsToAPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ParseOptionsToAPI &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestEvent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventConfigConfirmation
</UL>

<P><STRONG><a name="[38a]"></a>ProcessL2CAPDataPacket</STRONG> (Thumb, 822 bytes, Stack size 56 bytes, L2CAP.o(i.ProcessL2CAPDataPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = ProcessL2CAPDataPacket &rArr; L2CAP_ConfigRequestEvent &rArr; L2CAP_ConfigRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRegistryByValue
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchIdentifierInfoEntryByIdentifier
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RejectCommand
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_InformationRequestResponse
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_EchoRequestResponse
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectResponseEvent
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestEvent
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionParameterUpdateResponseEvent
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionParameterUpdateRequestEvent
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectResponseEvent
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestEvent
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigResponseEvent
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestEvent
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadDataError
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
</UL>

<P><STRONG><a name="[3e8]"></a>ProcessSendQueueData</STRONG> (Thumb, 458 bytes, Stack size 64 bytes, L2CAP.o(i.ProcessSendQueueData))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_ChangeTimer
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRegistryByValue
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchIdentifierInfoEntryByIdentifier
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFixedChannelInfoEntry
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchACLPacketEntryByIdentifier
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatEventCIDOnly
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteACLPacketEntry
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Send_ACL_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessACLQueue
</UL>

<P><STRONG><a name="[38c]"></a>QueueACLPacket</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, L2CAP.o(i.QueueACLPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = QueueACLPacket &rArr; BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DataWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
</UL>

<P><STRONG><a name="[389]"></a>SearchACLPacketEntryByConnectionHandle</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, L2CAP.o(i.SearchACLPacketEntryByConnectionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchACLPacketEntryByConnectionHandle &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
</UL>

<P><STRONG><a name="[29a]"></a>SearchACLPacketEntryByIdentifier</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, L2CAP.o(i.SearchACLPacketEntryByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchACLPacketEntryByIdentifier &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectResponseEvent
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionParameterUpdateResponseEvent
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectResponseEvent
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigResponseEvent
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedFragmentPacket
</UL>

<P><STRONG><a name="[3a1]"></a>SearchChannelInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, L2CAP.o(i.SearchChannelInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchChannelInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Flush_Channel_Data
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Enhanced_Data_Write
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Response
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Response
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Response
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyACLHeader
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_StateTimeout
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReceiveTimeout
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectResponseEvent
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectRequestEvent
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectResponseEvent
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigResponseEvent
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConfigRequestEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
</UL>

<P><STRONG><a name="[151]"></a>SearchConnectionInfoEntryByBD_ADDRType</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, L2CAP.o(i.SearchConnectionInfoEntryByBD_ADDRType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SearchConnectionInfoEntryByBD_ADDRType
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Get_Link_Connection_State
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Request
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Enhanced_Fixed_Channel_Data_Write
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectIndication
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConnectCfmNeg
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddConnectionInfoEntry
</UL>

<P><STRONG><a name="[24a]"></a>SearchConnectionInfoEntryByConnectionHandle</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, L2CAP.o(i.SearchConnectionInfoEntryByConnectionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchConnectionInfoEntryByConnectionHandle &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connection_Parameter_Update_Response
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyACLHeader
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_DisconnectReq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReceiveTimeout
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionTimeout
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelDisconnection
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_Callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayedAuthenticationProcess
</UL>

<P><STRONG><a name="[3ec]"></a>SearchFixedChannelInfoEntry</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, L2CAP.o(i.SearchFixedChannelInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SearchFixedChannelInfoEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Enhanced_Fixed_Channel_Data_Write
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
</UL>

<P><STRONG><a name="[3ea]"></a>SearchIdentifierInfoEntryByIdentifier</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, L2CAP.o(i.SearchIdentifierInfoEntryByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchIdentifierInfoEntryByIdentifier &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RequestTimeout
</UL>

<P><STRONG><a name="[3eb]"></a>SearchRegistryByID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, L2CAP.o(i.SearchRegistryByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchRegistryByID &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Un_Register_Fixed_Channel
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Enhanced_Fixed_Channel_Data_Write
</UL>

<P><STRONG><a name="[3dc]"></a>SearchRegistryByValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, L2CAP.o(i.SearchRegistryByValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchRegistryByValue &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Register_Fixed_Channel
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSendQueueData
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessL2CAPDataPacket
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionParameterUpdateResponseEvent
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectionParameterUpdateRequestEvent
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRequestEvent
</UL>

<P><STRONG><a name="[38b]"></a>VerifyACLHeader</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, L2CAP.o(i.VerifyACLHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = VerifyACLHeader &rArr; L2CAP_RejectCommand &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByConnectionHandle
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchChannelInfoEntry
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RejectCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ACL_Data_Callback
</UL>

<P><STRONG><a name="[149]"></a>AcquireSDPStackInformation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, SDP.o(i.AcquireSDPStackInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AcquireSDPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Delete_Service_Record
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Cleanup
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Create_Service_Record
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Add_Raw_Attribute
</UL>

<P><STRONG><a name="[152]"></a>AddConnectionInfoEntry</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, SDP.o(i.AddConnectionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AddConnectionInfoEntry &rArr; BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[43b]"></a>AddServiceAttributeEntry</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, SDP.o(i.AddServiceAttributeEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddServiceAttributeEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Create_Service_Record
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Add_Raw_Attribute
</UL>

<P><STRONG><a name="[164]"></a>AddServiceRecordEntry</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, SDP.o(i.AddServiceRecordEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AddServiceRecordEntry &rArr; BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Initialize
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Create_Service_Record
</UL>

<P><STRONG><a name="[421]"></a>CalculateAttributeRequestParameters</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, SDP.o(i.CalculateAttributeRequestParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalculateAttributeRequestParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
</UL>

<P><STRONG><a name="[3f9]"></a>CalculateDataTypeLength</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, SDP.o(i.CalculateDataTypeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalculateDataTypeLength
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[212]"></a>CleanupSDPConnection</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, SDP.o(i.CleanupSDPConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = CleanupSDPConnection &rArr; _L2CA_Disconnect_Request &rArr; L2CAP_DisconnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessConnectionError
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeConnectionInfoList
</UL>

<P><STRONG><a name="[230]"></a>CompareServiceRecordWithServiceList</STRONG> (Thumb, 514 bytes, Stack size 96 bytes, SDP.o(i.CompareServiceRecordWithServiceList))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CompareServiceRecordWithServiceList &rArr; GetNextServiceAttribute &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServiceAttributeListValid
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextServiceAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchRequest
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
</UL>

<P><STRONG><a name="[255]"></a>DeleteConnectionInfoEntryCID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, SDP.o(i.DeleteConnectionInfoEntryCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteConnectionInfoEntryCID &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectionResponse
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSDPConnectionRequest
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessConnectionError
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[3f6]"></a>DispatchSDPConnectionEvent</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, SDP.o(i.DispatchSDPConnectionEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DispatchSDPConnectionEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSDPConnectionRequest
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessConnectionError
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[2af]"></a>FormatResponsePDUHeaderAndSend</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, SDP.o(i.FormatResponsePDUHeaderAndSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = FormatResponsePDUHeaderAndSend &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Data_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchRequest
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[2bf]"></a>FreeConnectionInfoList</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, SDP.o(i.FreeConnectionInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = FreeConnectionInfoList &rArr; CleanupSDPConnection &rArr; _L2CA_Disconnect_Request &rArr; L2CAP_DisconnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupSDPConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Cleanup
</UL>

<P><STRONG><a name="[2c5]"></a>FreeL2CAPConnectionInfoList</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, SDP.o(i.FreeL2CAPConnectionInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = FreeL2CAPConnectionInfoList &rArr; _L2CA_Disconnect_Request &rArr; L2CAP_DisconnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Cleanup
</UL>

<P><STRONG><a name="[2ce]"></a>FreeServiceAttributeList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, SDP.o(i.FreeServiceAttributeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeServiceAttributeList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Delete_Service_Record
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Create_Service_Record
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceRecordList
</UL>

<P><STRONG><a name="[2cf]"></a>FreeServiceRecordList</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, SDP.o(i.FreeServiceRecordList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FreeServiceRecordList &rArr; FreeServiceAttributeList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceAttributeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Cleanup
</UL>

<P><STRONG><a name="[232]"></a>GetNextServiceAttribute</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, SDP.o(i.GetNextServiceAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetNextServiceAttribute &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServiceAttributeListValid
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseRecordAttributes
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareServiceRecordWithServiceList
</UL>

<P><STRONG><a name="[a0]"></a>L2CA_Event_Callback</STRONG> (Thumb, 1768 bytes, Stack size 160 bytes, SDP.o(i.L2CA_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = L2CA_Event_Callback &rArr; ProcessServiceSearchAttributeRequest &rArr; FormatResponsePDUHeaderAndSend &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectionResponse
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntry
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchRequest
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSDPConnectionRequest
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessConnectionError
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseServiceSearchPattern
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAttributeIDList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatResponsePDUHeaderAndSend
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchSDPConnectionEvent
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntryCID
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDataTypeLength
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddConnectionInfoEntry
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Response
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Response
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Response
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SDP.o(i.SDP_Initialize)
</UL>
<P><STRONG><a name="[408]"></a>NormalizeUUID</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, SDP.o(i.NormalizeUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NormalizeUUID &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseServiceSearchPattern
</UL>

<P><STRONG><a name="[40e]"></a>ParseAPIUUIDs</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, SDP.o(i.ParseAPIUUIDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ParseAPIUUIDs &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCompare
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataElementSequenceHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Create_Service_Record
</UL>

<P><STRONG><a name="[3fb]"></a>ParseAttributeIDList</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, SDP.o(i.ParseAttributeIDList))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParseAttributeIDList &rArr; ReadDataElementSequenceLength
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataElementSequenceLength
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[415]"></a>ParseRecordAttributes</STRONG> (Thumb, 330 bytes, Stack size 96 bytes, SDP.o(i.ParseRecordAttributes))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ParseRecordAttributes &rArr; GetNextServiceAttribute &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextServiceAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
</UL>

<P><STRONG><a name="[3f8]"></a>ParseServiceSearchPattern</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, SDP.o(i.ParseServiceSearchPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ParseServiceSearchPattern &rArr; NormalizeUUID &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataElementSequenceLength
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalizeUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[3f2]"></a>ProcessConnectionError</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, SDP.o(i.ProcessConnectionError))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ProcessConnectionError &rArr; CleanupSDPConnection &rArr; _L2CA_Disconnect_Request &rArr; L2CAP_DisconnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchSDPConnectionEvent
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntryCID
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupSDPConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[3ef]"></a>ProcessSDPConnectionRequest</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, SDP.o(i.ProcessSDPConnectionRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ProcessSDPConnectionRequest &rArr; _L2CA_Connect_Response &rArr; L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchSDPConnectionEvent
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntryCID
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[3fc]"></a>ProcessServiceAttributeRequest</STRONG> (Thumb, 428 bytes, Stack size 88 bytes, SDP.o(i.ProcessServiceAttributeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ProcessServiceAttributeRequest &rArr; FormatResponsePDUHeaderAndSend &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifySharedBufferPointer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySharedBuffer
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataElementSequenceHeader
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAttributeRequestContinuationInformation
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceRecordEntry
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseRecordAttributes
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatResponsePDUHeaderAndSend
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAttributeRequestParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[3fd]"></a>ProcessServiceSearchAttributeRequest</STRONG> (Thumb, 602 bytes, Stack size 96 bytes, SDP.o(i.ProcessServiceSearchAttributeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = ProcessServiceSearchAttributeRequest &rArr; FormatResponsePDUHeaderAndSend &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifySharedBufferPointer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySharedBuffer
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataElementSequenceHeader
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAttributeRequestContinuationInformation
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseRecordAttributes
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatResponsePDUHeaderAndSend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareServiceRecordWithServiceList
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAttributeRequestParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[3fa]"></a>ProcessServiceSearchRequest</STRONG> (Thumb, 408 bytes, Stack size 72 bytes, SDP.o(i.ProcessServiceSearchRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ProcessServiceSearchRequest &rArr; FormatResponsePDUHeaderAndSend &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifySharedBufferPointer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySharedBuffer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatResponsePDUHeaderAndSend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareServiceRecordWithServiceList
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[411]"></a>ReadDataElementSequenceLength</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, SDP.o(i.ReadDataElementSequenceLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReadDataElementSequenceLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseServiceSearchPattern
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseAttributeIDList
</UL>

<P><STRONG><a name="[3f3]"></a>SearchConnectionInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, SDP.o(i.SearchConnectionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchConnectionInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[422]"></a>SearchServiceRecordEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, SDP.o(i.SearchServiceRecordEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchServiceRecordEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Add_Raw_Attribute
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
</UL>

<P><STRONG><a name="[3f0]"></a>SendConnectionResponse</STRONG> (Thumb, 88 bytes, Stack size 88 bytes, SDP.o(i.SendConnectionResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = SendConnectionResponse &rArr; _L2CA_Connect_Response &rArr; L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConnectionInfoEntryCID
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Response
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[231]"></a>ServiceAttributeListValid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, SDP.o(i.ServiceAttributeListValid))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextServiceAttribute
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareServiceRecordWithServiceList
</UL>

<P><STRONG><a name="[423]"></a>WriteAttributeRequestContinuationInformation</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, SDP.o(i.WriteAttributeRequestContinuationInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WriteAttributeRequestContinuationInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceSearchAttributeRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessServiceAttributeRequest
</UL>

<P><STRONG><a name="[14a]"></a>AcquireSPPStackInformation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, SPP.o(i.AcquireSPPStackInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AcquireSPPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Set_Queuing_Parameters
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Set_Configuration_Parameters
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Server_Port
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Get_Queuing_Parameters
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Get_Configuration_Parameters
</UL>

<P><STRONG><a name="[14b]"></a>AcquireSPPStackPortInformation</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, SPP.o(i.AcquireSPPStackPortInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AcquireSPPStackPortInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchPortInformationEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Respond_Port_Information
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register_Raw_SDP_Record
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Server_Port
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Port
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Send_Break
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Port_Status
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Line_Status
</UL>

<P><STRONG><a name="[15f]"></a>AddPortInformationEntry</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, SPP.o(i.AddPortInformationEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AddPortInformationEntry &rArr; BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Server_Port
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
</UL>

<P><STRONG><a name="[1f6]"></a>BuildPortInformationStructure</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, SPP.o(i.BuildPortInformationStructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BuildPortInformationStructure &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchEventPortInformation
</UL>

<P><STRONG><a name="[1f8]"></a>BuildRemotePortNegotiationStructure</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, SPP.o(i.BuildRemotePortNegotiationStructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BuildRemotePortNegotiationStructure &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Respond_Port_Information
</UL>

<P><STRONG><a name="[43e]"></a>CalculateCreditThreshold</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, SPP.o(i.CalculateCreditThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPServerHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPClientHandler
</UL>

<P><STRONG><a name="[20f]"></a>CleanupPortInformationEntry</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, SPP.o(i.CleanupPortInformationEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CleanupPortInformationEntry &rArr; DeletePortInformationEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInformationEntryMemory
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeletePortInformationEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Port
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPServerHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPClientHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
</UL>

<P><STRONG><a name="[210]"></a>DeletePortInformationEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, SPP.o(i.DeletePortInformationEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeletePortInformationEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Server_Port
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupPortInformationEntry
</UL>

<P><STRONG><a name="[443]"></a>FormatAndDispatchEventBD_ADDR</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, SPP.o(i.FormatAndDispatchEventBD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FormatAndDispatchEventBD_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPServerHandler
</UL>

<P><STRONG><a name="[2a7]"></a>FormatAndDispatchEventPortInformation</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, SPP.o(i.FormatAndDispatchEventPortInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FormatAndDispatchEventPortInformation &rArr; BuildPortInformationStructure &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPortInformationStructure
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
</UL>

<P><STRONG><a name="[42b]"></a>FormatAndDispatchEventUnsignedInteger</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, SPP.o(i.FormatAndDispatchEventUnsignedInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FormatAndDispatchEventUnsignedInteger
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueuedData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPClientHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
</UL>

<P><STRONG><a name="[211]"></a>FreePortInformationEntryMemory</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, SPP.o(i.FreePortInformationEntryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FreePortInformationEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close_Server_Port
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInformationList
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupPortInformationEntry
</UL>

<P><STRONG><a name="[2cb]"></a>FreePortInformationList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, SPP.o(i.FreePortInformationList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FreePortInformationList &rArr; FreePortInformationEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInformationEntryMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Cleanup
</UL>

<P><STRONG><a name="[44c]"></a>GetNextSerialPortID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, SPP.o(i.GetNextSerialPortID))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Server_Port
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open_Remote_Port
</UL>

<P><STRONG><a name="[a2]"></a>RFCOMM_Event_Callback</STRONG> (Thumb, 912 bytes, Stack size 64 bytes, SPP.o(i.RFCOMM_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = RFCOMM_Event_Callback &rArr; SendQueuedData &rArr; SPP_Data_Write &rArr;  SPP_Data_Write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemMove
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Credits
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Send_Break
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Port_Status
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Line_Status
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueuedData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchPortInformationEntry
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchEventUnsignedInteger
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchEventPortInformation
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupPortInformationEntry
</UL>
<BR>[Address Reference Count : 2]<UL><LI> SPP.o(i.SPP_Open_Remote_Port)
<LI> SPP.o(i.SPP_Open_Server_Port)
</UL>
<P><STRONG><a name="[a1]"></a>SPPClientHandler</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, SPP.o(i.SPPClientHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = SPPClientHandler &rArr; SPP_Port_Status &rArr; _RFCOMM_Modem_Status &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Port_Status
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchPortInformationEntry
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchEventUnsignedInteger
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupPortInformationEntry
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCreditThreshold
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPP.o(i.SPP_Open_Remote_Port)
</UL>
<P><STRONG><a name="[a4]"></a>SPPServerHandler</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, SPP.o(i.SPPServerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = SPPServerHandler &rArr; SPP_Port_Status &rArr; _RFCOMM_Modem_Status &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Parameter_Negotiation_Response
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Response
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Port_Status
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchPortInformationEntry
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchEventBD_ADDR
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupPortInformationEntry
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCreditThreshold
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPP.o(i.SPP_Open_Server_Port)
</UL>
<P><STRONG><a name="[14c]"></a>SearchPortInformationEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, SPP.o(i.SearchPortInformationEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchPortInformationEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPServerHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPClientHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireSPPStackPortInformation
</UL>

<P><STRONG><a name="[42d]"></a>SendQueuedData</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, SPP.o(i.SendQueuedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = SendQueuedData &rArr; SPP_Data_Write &rArr;  SPP_Data_Write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Data_Write
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchEventUnsignedInteger
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Event_Callback
</UL>

<P><STRONG><a name="[a3]"></a>_RFCOMM_Event_Callback</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, SPP.o(i._RFCOMM_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _RFCOMM_Event_Callback &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Address Reference Count : 2]<UL><LI> SPP.o(i.SPP_Open_Remote_Port)
<LI> SPP.o(i.SPP_Open_Server_Port)
</UL>
<P><STRONG><a name="[14d]"></a>AcquireServiceInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, GAPS.o(i.AcquireServiceInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AcquireServiceInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_LockBluetoothStack
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Set_Device_Name
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Set_Device_Appearance
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Query_Device_Name
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Query_Device_Appearance
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Cleanup_Service
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServerEventCallback
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPSRegisterService
</UL>

<P><STRONG><a name="[2dc]"></a>GAPSRegisterService</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, GAPS.o(i.GAPSRegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = GAPSRegisterService &rArr; GATT_Register_Service &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Register_Service
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPS_Initialize_Service
</UL>

<P><STRONG><a name="[6a]"></a>GATT_ServerEventCallback</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, GAPS.o(i.GATT_ServerEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = GATT_ServerEventCallback &rArr; GATT_Read_Response &rArr; ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireServiceInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GAPS.o(i.GAPSRegisterService)
</UL>
<P><STRONG><a name="[112]"></a>ATT_PDU_Event</STRONG> (Thumb, 760 bytes, Stack size 48 bytes, GATT.o(i.ATT_PDU_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = ATT_PDU_Event &rArr; ReadByUUIDRequestEvent &rArr; DispatchServerReadRequestEvent &rArr; HandleReadRequestEvent &rArr; GATT_Read_Response &rArr; ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StopTimer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRequestEvent
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedWriteCommandEvent
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNextQueuedServerIndication
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNextQueuedClientRequest
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionInfoEntryByType
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestEvent
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObtainOutstandingClientTransaction
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationEvent
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericReadRequestEvent
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoEntryMemory
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatConnectionEventWord
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEvent
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExchangeMtuRequestEvent
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerWriteRequestEvent
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerReadRequestEvent
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerConfirmationEvent
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchConnectionEvent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchClientRequestErrorEvent
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[13a]"></a>AcquireGATTStackConnectionInformationByConnectionID</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, GATT.o(i.AcquireGATTStackConnectionInformationByConnectionID))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = AcquireGATTStackConnectionInformationByConnectionID &rArr; AcquireGATTStackInformation &rArr; SearchGATTContextInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Without_Response_Request
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Handle_Value_Notification
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Exchange_MTU_Request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Request_Timeout
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousCallback
</UL>

<P><STRONG><a name="[13e]"></a>AcquireGATTStackConnectionInformationByServerTransactionID</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, GATT.o(i.AcquireGATTStackConnectionInformationByServerTransactionID))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AcquireGATTStackConnectionInformationByServerTransactionID &rArr; AcquireGATTStackInformation &rArr; SearchGATTContextInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionInfoEntry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextConnectionInfoEntry
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Response
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousCallback
</UL>

<P><STRONG><a name="[13b]"></a>AcquireGATTStackInformation</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, GATT.o(i.AcquireGATTStackInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AcquireGATTStackInformation &rArr; SearchGATTContextInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_LockBluetoothStack
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchGATTContextInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Queuing_Parameters
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Register_Service
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cancel_Transaction
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByServerTransactionID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByConnectionID
</UL>

<P><STRONG><a name="[155]"></a>AddDiscoveredServiceInfoEntry</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, GATT.o(i.AddDiscoveredServiceInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = AddDiscoveredServiceInfoEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[161]"></a>AddServiceInfoEntry</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, GATT.o(i.AddServiceInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AddServiceInfoEntry &rArr; BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddServiceInformation
</UL>

<P><STRONG><a name="[162]"></a>AddServiceInformation</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, GATT.o(i.AddServiceInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AddServiceInformation &rArr; AddServiceInfoEntry &rArr; BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextServiceInfoEntry
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddServiceInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Register_Service
</UL>

<P><STRONG><a name="[a5]"></a>AsynchronousCallback</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, GATT.o(i.AsynchronousCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = AsynchronousCallback &rArr; DispatchServerReadRequestEvent &rArr; HandleReadRequestEvent &rArr; GATT_Read_Response &rArr; ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchConnectionEvent
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEventHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteConfirmationEventHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerReadRequestEvent
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByServerTransactionID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByConnectionID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.ScheduleAsynchronousDispatch)
</UL>
<P><STRONG><a name="[1f5]"></a>BuildPacketByteTwoWordsVariable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, GATT.o(i.BuildPacketByteTwoWordsVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BuildPacketByteTwoWordsVariable &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Handle_Value_Notification
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
</UL>

<P><STRONG><a name="[1f7]"></a>BuildRecordTwoWordsVariable</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, GATT.o(i.BuildRecordTwoWordsVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BuildRecordTwoWordsVariable &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestResponse
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
</UL>

<P><STRONG><a name="[200]"></a>CharacteristicDescriptorDiscoveryRequest</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, GATT.o(i.CharacteristicDescriptorDiscoveryRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = CharacteristicDescriptorDiscoveryRequest &rArr; GATT_Discover_Characteristic_Descriptors &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Discover_Characteristic_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServiceDiscoveryStateMachine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[202]"></a>CharacteristicDiscoveryRequest</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, GATT.o(i.CharacteristicDiscoveryRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = CharacteristicDiscoveryRequest &rArr; GATT_Discover_Characteristics &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Discover_Characteristics
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServiceDiscoveryStateMachine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[7c]"></a>CharacteristicDiscoveryResponseEvent</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, GATT.o(i.CharacteristicDiscoveryResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = CharacteristicDiscoveryResponseEvent &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatClientEventWordPointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.GATT_Discover_Characteristics)
</UL>
<P><STRONG><a name="[215]"></a>ClientRequestWithData</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, GATT.o(i.ClientRequestWithData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimerAndSendPDU
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineClientRequestStatus
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewTransactionInfoEntry
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPacketByteTwoWordsVariable
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByConnectionID
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Request
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Value_Request
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Exchange_MTU_Request
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithUUID
</UL>

<P><STRONG><a name="[21a]"></a>ClientRequestWithUUID</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, GATT.o(i.ClientRequestWithUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Discover_Services
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Discover_Included_Services
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Discover_Characteristics
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Discover_Characteristic_Descriptors
</UL>

<P><STRONG><a name="[233]"></a>CompareServiceToServiceList</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, GATT.o(i.CompareServiceToServiceList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CompareServiceToServiceList &rArr; CompareUUID &rArr; NormalizeUUID &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[234]"></a>CompareUUID</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, GATT.o(i.CompareUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CompareUUID &rArr; NormalizeUUID &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalizeUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareServiceToServiceList
</UL>

<P><STRONG><a name="[243]"></a>CreateNewConnectionCallbackInfoEntry</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, GATT.o(i.CreateNewConnectionCallbackInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CreateNewConnectionCallbackInfoEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
</UL>

<P><STRONG><a name="[245]"></a>CreateNewHandleInfoEntry</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, GATT.o(i.CreateNewHandleInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CreateNewHandleInfoEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchHandleInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericReadRequestEvent
</UL>

<P><STRONG><a name="[217]"></a>CreateNewTransactionInfoEntry</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, GATT.o(i.CreateNewTransactionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CreateNewTransactionInfoEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationEvent
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericReadRequestEvent
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
</UL>

<P><STRONG><a name="[219]"></a>DeleteFreeTransactionInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, GATT.o(i.DeleteFreeTransactionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DeleteFreeTransactionInfoEntry &rArr; DeleteTransactionInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoEntryMemory
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Response
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cancel_Transaction
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestResponse
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestEvent
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestResponse
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareWriteRequestResponse
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericReadRequestEvent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestResponse
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
</UL>

<P><STRONG><a name="[257]"></a>DeleteGATTContextInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.DeleteGATTContextInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteGATTContextInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cleanup
</UL>

<P><STRONG><a name="[258]"></a>DeleteHandleInfoEntryByEntryPointer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GATT.o(i.DeleteHandleInfoEntryByEntryPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DeleteHandleInfoEntryByEntryPointer &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestResponse
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestResponse
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareWriteRequestResponse
</UL>

<P><STRONG><a name="[25f]"></a>DeleteServiceDiscoveryInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.DeleteServiceDiscoveryInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteServiceDiscoveryInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCompleteCallback
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchConnectionEvent
</UL>

<P><STRONG><a name="[114]"></a>DeleteTransactionInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.DeleteTransactionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteTransactionInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Response
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEventHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteConfirmationEventHandler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[260]"></a>DeleteTransactionInfoEntryByTimerID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.DeleteTransactionInfoEntryByTimerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteTransactionInfoEntryByTimerID &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Request_Timeout
</UL>

<P><STRONG><a name="[216]"></a>DetermineClientRequestStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, GATT.o(i.DetermineClientRequestStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DetermineClientRequestStatus &rArr; GetNextTransactionInfoEntry &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
</UL>

<P><STRONG><a name="[7b]"></a>DiscoverAllCharactisticDescriptorsResponseEvent</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, GATT.o(i.DiscoverAllCharactisticDescriptorsResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = DiscoverAllCharactisticDescriptorsResponseEvent &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatClientEventWordPointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.GATT_Discover_Characteristic_Descriptors)
</UL>
<P><STRONG><a name="[7e]"></a>DiscoverAllPrimaryServicesResponseEvent</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, GATT.o(i.DiscoverAllPrimaryServicesResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = DiscoverAllPrimaryServicesResponseEvent &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatClientEventWordPointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.GATT_Discover_Services)
</UL>
<P><STRONG><a name="[118]"></a>DispatchClientRequestErrorEvent</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, GATT.o(i.DispatchClientRequestErrorEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DispatchClientRequestErrorEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatTwoIntegersAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Request_Timeout
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[12a]"></a>DispatchConnectionEvent</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, GATT.o(i.DispatchConnectionEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DispatchConnectionEvent &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationEvent
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchConnectionEvent
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[127]"></a>DispatchServerConfirmationEvent</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, GATT.o(i.DispatchServerConfirmationEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DispatchServerConfirmationEvent &rArr; FormatServerEventIntegerByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatServerEventIntegerByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Request_Timeout
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[11c]"></a>DispatchServerReadRequestEvent</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, GATT.o(i.DispatchServerReadRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = DispatchServerReadRequestEvent &rArr; HandleReadRequestEvent &rArr; GATT_Read_Response &rArr; ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextHandleInfoEntry
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatServerEventIntegerThreeWordsPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestEvent
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousCallback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[125]"></a>DispatchServerWriteRequestEvent</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, GATT.o(i.DispatchServerWriteRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DispatchServerWriteRequestEvent &rArr; SearchServiceInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextHandleInfoEntry
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatServerEventIntegerThreeWordsPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRequestEvent
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[121]"></a>ExchangeMtuRequestEvent</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, GATT.o(i.ExchangeMtuRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ExchangeMtuRequestEvent &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchConnectionEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[7f]"></a>ExchangeMtuRequestResponseEvent</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, GATT.o(i.ExchangeMtuRequestResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ExchangeMtuRequestResponseEvent &rArr; FormatAndDispatchConnectionEvent &rArr; DeleteServiceDiscoveryInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatClientEventWordPointer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchConnectionEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.GATT_Exchange_MTU_Request)
</UL>
<P><STRONG><a name="[176]"></a>ExecuteWriteConfirmationEventHandler</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, GATT.o(i.ExecuteWriteConfirmationEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = ExecuteWriteConfirmationEventHandler &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextHandleInfoEntry
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoEntryMemory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatServerEventIntegerByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousCallback
</UL>

<P><STRONG><a name="[120]"></a>ExecuteWriteRequestEvent</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, GATT.o(i.ExecuteWriteRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ExecuteWriteRequestEvent &rArr; ExecuteWriteRequestEventHandler &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNoOutstandingServerRequests
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionInfoEntryByType
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextHandleInfoEntry
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[175]"></a>ExecuteWriteRequestEventHandler</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, GATT.o(i.ExecuteWriteRequestEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ExecuteWriteRequestEventHandler &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionInfoEntryByType
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextHandleInfoEntry
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoEntryMemory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatServerEventIntegerByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEvent
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousCallback
</UL>

<P><STRONG><a name="[29d]"></a>ExecuteWriteRequestResponse</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, GATT.o(i.ExecuteWriteRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ExecuteWriteRequestResponse &rArr; ScheduleAsynchronousDispatch &rArr; BSC_ScheduleAsynchronousCallback &rArr; HCI_Schedule_Asynchronous_Callback &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchHandleInfoEntry
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleAsynchronousDispatch
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextHandleInfoEntry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
</UL>

<P><STRONG><a name="[7d]"></a>FindIncludedServicesResponseEvent</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, GATT.o(i.FindIncludedServicesResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = FindIncludedServicesResponseEvent &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatClientEventWordPointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.GATT_Discover_Included_Services)
</UL>
<P><STRONG><a name="[177]"></a>FormatAndDispatchConnectionEvent</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, GATT.o(i.FormatAndDispatchConnectionEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FormatAndDispatchConnectionEvent &rArr; DeleteServiceDiscoveryInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextServiceInfoEntry
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceDiscoveryInfoEntryMemory
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatConnectionEventWord
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchConnectionEvent
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteServiceDiscoveryInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExchangeMtuRequestResponseEvent
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExchangeMtuRequestEvent
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsynchronousCallback
</UL>

<P><STRONG><a name="[2a4]"></a>FormatAndDispatchDiscoveryCallback</STRONG> (Thumb, 368 bytes, Stack size 120 bytes, GATT.o(i.FormatAndDispatchDiscoveryCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = FormatAndDispatchDiscoveryCallback &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDiscoveredServiceInfoEntryMemory
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServiceDiscoveryStateMachine
</UL>

<P><STRONG><a name="[2a6]"></a>FormatAndDispatchDiscoveryCompleteCallback</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, GATT.o(i.FormatAndDispatchDiscoveryCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = FormatAndDispatchDiscoveryCompleteCallback &rArr; DeleteServiceDiscoveryInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceDiscoveryInfoEntryMemory
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteServiceDiscoveryInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServiceDiscoveryStateMachine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[2a9]"></a>FormatClientEventInteger</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, GATT.o(i.FormatClientEventInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FormatClientEventInteger
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatTwoIntegersAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteResponseEvent
</UL>

<P><STRONG><a name="[204]"></a>FormatClientEventWordPointer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, GATT.o(i.FormatClientEventWordPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FormatClientEventWordPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatTwoIntegersAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadResponseEventHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindIncludedServicesResponseEvent
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExchangeMtuRequestResponseEvent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverAllPrimaryServicesResponseEvent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscoverAllCharactisticDescriptorsResponseEvent
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharacteristicDiscoveryResponseEvent
</UL>

<P><STRONG><a name="[129]"></a>FormatConnectionEventWord</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, GATT.o(i.FormatConnectionEventWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FormatConnectionEventWord
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchConnectionEvent
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[2ac]"></a>FormatContextPduHeader</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, GATT.o(i.FormatContextPduHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FormatContextPduHeader &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Response
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
</UL>

<P><STRONG><a name="[27c]"></a>FormatServerEventIntegerByte</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, GATT.o(i.FormatServerEventIntegerByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FormatServerEventIntegerByte
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatTwoIntegersAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatServerEventIntegerThreeWordsPointer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEventHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteConfirmationEventHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerConfirmationEvent
</UL>

<P><STRONG><a name="[280]"></a>FormatServerEventIntegerThreeWordsPointer</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, GATT.o(i.FormatServerEventIntegerThreeWordsPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FormatServerEventIntegerThreeWordsPointer &rArr; FormatServerEventIntegerByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatServerEventIntegerByte
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedWriteCommandEvent
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerWriteRequestEvent
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerReadRequestEvent
</UL>

<P><STRONG><a name="[278]"></a>FormatTwoIntegersAddress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, GATT.o(i.FormatTwoIntegersAddress))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationEvent
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatServerEventIntegerByte
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatClientEventWordPointer
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatClientEventInteger
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchClientRequestErrorEvent
</UL>

<P><STRONG><a name="[2bc]"></a>FreeConnectionInfoEntryMemory</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, GATT.o(i.FreeConnectionInfoEntryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FreeConnectionInfoEntryMemory &rArr; FreeTransactionInfoList &rArr; FreeTransactionInfoEntryMemory &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoList
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGATTContextInfoEntryMemory
</UL>

<P><STRONG><a name="[2a5]"></a>FreeDiscoveredServiceInfoEntryMemory</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, GATT.o(i.FreeDiscoveredServiceInfoEntryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FreeDiscoveredServiceInfoEntryMemory &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceDiscoveryInfoEntryMemory
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCallback
</UL>

<P><STRONG><a name="[2c2]"></a>FreeGATTContextInfoEntryMemory</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, GATT.o(i.FreeGATTContextInfoEntryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FreeGATTContextInfoEntryMemory &rArr; L2CA_Un_Register_Fixed_Channel &rArr; AcquireL2CAPStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeServiceDiscoveryInfoEntryMemory
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeConnectionInfoEntryMemory
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Un_Register_Fixed_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cleanup
</UL>

<P><STRONG><a name="[2a3]"></a>FreeServiceDiscoveryInfoEntryMemory</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, GATT.o(i.FreeServiceDiscoveryInfoEntryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FreeServiceDiscoveryInfoEntryMemory &rArr; FreeDiscoveredServiceInfoEntryMemory &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDiscoveredServiceInfoEntryMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGATTContextInfoEntryMemory
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCompleteCallback
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchConnectionEvent
</UL>

<P><STRONG><a name="[116]"></a>FreeTransactionInfoEntryMemory</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, GATT.o(i.FreeTransactionInfoEntryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FreeTransactionInfoEntryMemory &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Response
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Request_Timeout
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoList
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEventHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteConfirmationEventHandler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[2bd]"></a>FreeTransactionInfoList</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, GATT.o(i.FreeTransactionInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FreeTransactionInfoList &rArr; FreeTransactionInfoEntryMemory &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoEntryMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeConnectionInfoEntryMemory
</UL>

<P><STRONG><a name="[11a]"></a>GATTErrorResponsePDU</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, GATT.o(i.GATTErrorResponsePDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatContextPduHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRequestEvent
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestEvent
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestResponse
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareWriteRequestResponse
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericReadRequestEvent
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEvent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteConfirmationEventHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExchangeMtuRequestEvent
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[65]"></a>GATT_ClientEventCallback</STRONG> (Thumb, 998 bytes, Stack size 104 bytes, GATT.o(i.GATT_ClientEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = GATT_ClientEventCallback &rArr; ServiceDiscoveryStateMachine &rArr; IncludeDiscoveryRequest &rArr; GATT_Discover_Included_Services &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Value_Request
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Discover_Services
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServiceDiscoveryStateMachine
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceHandleInfoEntry
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceDiscoveryInfoEntry
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCharacteristicInfoEntry
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncludeDiscoveryRequest
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCompleteCallback
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareServiceToServiceList
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharacteristicDiscoveryRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharacteristicDescriptorDiscoveryRequest
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscoveredServiceInfoEntry
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 5]<UL><LI> GATT.o(i.CharacteristicDescriptorDiscoveryRequest)
<LI> GATT.o(i.CharacteristicDiscoveryRequest)
<LI> GATT.o(i.GATT_ClientEventCallback)
<LI> GATT.o(i.IncludeDiscoveryRequest)
<LI> GATT.o(i.StartServiceDiscovery)
</UL>
<P><STRONG><a name="[a6]"></a>GATT_Request_Timeout</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, GATT.o(i.GATT_Request_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = GATT_Request_Timeout &rArr; SendNextQueuedServerIndication &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNextQueuedServerIndication
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNextQueuedClientRequest
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransactionInfoEntryMemory
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerConfirmationEvent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchClientRequestErrorEvent
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTransactionInfoEntryByTimerID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByConnectionID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.StartTimerAndSendPDU)
</UL>
<P><STRONG><a name="[81]"></a>GATT_ServerEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, GATT.o(i.GATT_ServerEventCallback))
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.GATT_Initialize)
</UL>
<P><STRONG><a name="[11b]"></a>GenericReadRequestEvent</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, GATT.o(i.GenericReadRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = GenericReadRequestEvent &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNoOutstandingServerRequests
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateServiceConnectionType
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntryByHandle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewTransactionInfoEntry
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewHandleInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestEvent
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[124]"></a>GenericWriteRequestEvent</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, GATT.o(i.GenericWriteRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = GenericWriteRequestEvent &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNoOutstandingServerRequests
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateServiceConnectionType
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntryByHandle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchHandleInfoEntry
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewTransactionInfoEntry
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewHandleInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRequestEvent
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedWriteCommandEvent
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[362]"></a>GetNextCharacteristicDiscoveryService</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, GATT.o(i.GetNextCharacteristicDiscoveryService))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetNextCharacteristicDiscoveryService &rArr; BTPS_MemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateServiceConnectionType
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextServiceInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
</UL>

<P><STRONG><a name="[140]"></a>GetNextConnectionInfoEntry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GATT.o(i.GetNextConnectionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetNextConnectionInfoEntry &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cancel_Transaction
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByServerTransactionID
</UL>

<P><STRONG><a name="[27d]"></a>GetNextHandleInfoEntry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GATT.o(i.GetNextHandleInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetNextHandleInfoEntry &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedWriteCommandEvent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestResponse
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEventHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEvent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteConfirmationEventHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerWriteRequestEvent
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerReadRequestEvent
</UL>

<P><STRONG><a name="[163]"></a>GetNextServiceInfoEntry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GATT.o(i.GetNextServiceInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetNextServiceInfoEntry &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextCharacteristicDiscoveryService
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchConnectionEvent
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddServiceInformation
</UL>

<P><STRONG><a name="[261]"></a>GetNextTransactionInfoEntry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GATT.o(i.GetNextTransactionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetNextTransactionInfoEntry &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNoOutstandingServerRequests
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObtainOutstandingClientTransaction
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineClientRequestStatus
</UL>

<P><STRONG><a name="[364]"></a>GetServiceUUID</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, GATT.o(i.GetServiceUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetServiceUUID &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
</UL>

<P><STRONG><a name="[27f]"></a>HandleReadRequestEvent</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, GATT.o(i.HandleReadRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = HandleReadRequestEvent &rArr; GATT_Read_Response &rArr; ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAttributeTypeUUID
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetServiceUUID
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildPacketByteTwoWordsVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerReadRequestEvent
</UL>

<P><STRONG><a name="[342]"></a>IncludeDiscoveryRequest</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, GATT.o(i.IncludeDiscoveryRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = IncludeDiscoveryRequest &rArr; GATT_Discover_Included_Services &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Discover_Included_Services
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServiceDiscoveryStateMachine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[122]"></a>IndicationEvent</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, GATT.o(i.IndicationEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = IndicationEvent &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatTwoIntegersAddress
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchConnectionEvent
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[29b]"></a>L2CAPSendPDU</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, GATT.o(i.L2CAPSendPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Enhanced_Fixed_Channel_Data_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Without_Response_Request
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Response
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Handle_Value_Notification
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimerAndSendPDU
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestResponse
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestResponse
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareWriteRequestResponse
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicationEvent
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEventHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteConfirmationEventHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExchangeMtuRequestEvent
</UL>

<P><STRONG><a name="[80]"></a>L2CA_Event_Callback</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, GATT.o(i.L2CA_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = L2CA_Event_Callback &rArr; ATT_PDU_Event &rArr; ReadByUUIDRequestEvent &rArr; DispatchServerReadRequestEvent &rArr; HandleReadRequestEvent &rArr; GATT_Read_Response &rArr; ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchConnectionInfoEntryByBD_ADDR
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleAsynchronousDispatch
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeConnectionInfoEntryMemory
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchConnectionEvent
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.GATT_Initialize)
</UL>
<P><STRONG><a name="[235]"></a>NormalizeUUID</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, GATT.o(i.NormalizeUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NormalizeUUID &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareUUID
</UL>

<P><STRONG><a name="[113]"></a>ObtainOutstandingClientTransaction</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, GATT.o(i.ObtainOutstandingClientTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ObtainOutstandingClientTransaction &rArr; GetNextTransactionInfoEntry &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNextQueuedClientRequest
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[34d]"></a>PrepareWriteRequestResponse</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, GATT.o(i.PrepareWriteRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = PrepareWriteRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntryByHandle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchHandleInfoEntry
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteHandleInfoEntryByEntryPointer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Response
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
</UL>

<P><STRONG><a name="[11f]"></a>PreprareWriteRequestEvent</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, GATT.o(i.PreprareWriteRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = PreprareWriteRequestEvent &rArr; GenericWriteRequestEvent &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionInfoEntryByType
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionInfoEntry
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchHandleInfoEntry
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerWriteRequestEvent
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildRecordTwoWordsVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[3cd]"></a>ReadAttributeTypeUUID</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, GATT.o(i.ReadAttributeTypeUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadAttributeTypeUUID &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
</UL>

<P><STRONG><a name="[119]"></a>ReadByUUIDRequestEvent</STRONG> (Thumb, 576 bytes, Stack size 152 bytes, GATT.o(i.ReadByUUIDRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = ReadByUUIDRequestEvent &rArr; DispatchServerReadRequestEvent &rArr; HandleReadRequestEvent &rArr; GATT_Read_Response &rArr; ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionInfoEntry
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAttributeTypeUUID
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetServiceUUID
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextCharacteristicDiscoveryService
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericReadRequestEvent
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerReadRequestEvent
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[352]"></a>ReadByUUIDRequestResponse</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, GATT.o(i.ReadByUUIDRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleAsynchronousDispatch
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteHandleInfoEntryByEntryPointer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildRecordTwoWordsVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
</UL>

<P><STRONG><a name="[11d]"></a>ReadMultipleRequestEvent</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, GATT.o(i.ReadMultipleRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = ReadMultipleRequestEvent &rArr; DispatchServerReadRequestEvent &rArr; HandleReadRequestEvent &rArr; GATT_Read_Response &rArr; ReadByUUIDRequestResponse &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericReadRequestEvent
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerReadRequestEvent
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[353]"></a>ReadMultipleRequestResponse</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, GATT.o(i.ReadMultipleRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ReadMultipleRequestResponse &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleAsynchronousDispatch
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteHandleInfoEntryByEntryPointer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFreeTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Response
</UL>

<P><STRONG><a name="[82]"></a>ReadResponseEvent</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, GATT.o(i.ReadResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadResponseEvent &rArr; ReadResponseEventHandler &rArr; FormatClientEventWordPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadResponseEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.GATT_Read_Value_Request)
</UL>
<P><STRONG><a name="[435]"></a>ReadResponseEventHandler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, GATT.o(i.ReadResponseEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadResponseEventHandler &rArr; FormatClientEventWordPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatClientEventWordPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadResponseEvent
</UL>

<P><STRONG><a name="[29e]"></a>ScheduleAsynchronousDispatch</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, GATT.o(i.ScheduleAsynchronousDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ScheduleAsynchronousDispatch &rArr; BSC_ScheduleAsynchronousCallback &rArr; HCI_Schedule_Asynchronous_Callback &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ScheduleAsynchronousCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleRequestResponse
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestResponse
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestResponse
</UL>

<P><STRONG><a name="[344]"></a>SearchCharacteristicInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.SearchCharacteristicInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchCharacteristicInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServiceDiscoveryStateMachine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[3fe]"></a>SearchConnectionInfoEntryByBD_ADDR</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, GATT.o(i.SearchConnectionInfoEntryByBD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SearchConnectionInfoEntryByBD_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[143]"></a>SearchGATTContextInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.SearchGATTContextInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchGATTContextInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Initialize
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
</UL>

<P><STRONG><a name="[246]"></a>SearchHandleInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.SearchHandleInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchHandleInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareWriteRequestResponse
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestResponse
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewHandleInfoEntry
</UL>

<P><STRONG><a name="[33e]"></a>SearchServiceDiscoveryInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.SearchServiceDiscoveryInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchServiceDiscoveryInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartServiceDiscovery
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[341]"></a>SearchServiceHandleInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.SearchServiceHandleInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchServiceHandleInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[27e]"></a>SearchServiceInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.SearchServiceInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchServiceInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Un_Register_Service
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Handle_Value_Notification
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Error_Response
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedWriteCommandEvent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadRequestEvent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestResponse
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEventHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEvent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteConfirmationEventHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerWriteRequestEvent
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerReadRequestEvent
</UL>

<P><STRONG><a name="[35c]"></a>SearchServiceInfoEntryByHandle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, GATT.o(i.SearchServiceInfoEntryByHandle))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareWriteRequestResponse
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericReadRequestEvent
</UL>

<P><STRONG><a name="[13f]"></a>SearchTransactionInfoEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, GATT.o(i.SearchTransactionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchTransactionInfoEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cancel_Transaction
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByUUIDRequestEvent
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackConnectionInformationByServerTransactionID
</UL>

<P><STRONG><a name="[126]"></a>SearchTransactionInfoEntryByType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, GATT.o(i.SearchTransactionInfoEntryByType))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNextQueuedServerIndication
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreprareWriteRequestEvent
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEventHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEvent
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[117]"></a>SendNextQueuedClientRequest</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, GATT.o(i.SendNextQueuedClientRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = SendNextQueuedClientRequest &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimerAndSendPDU
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObtainOutstandingClientTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Request_Timeout
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[128]"></a>SendNextQueuedServerIndication</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GATT.o(i.SendNextQueuedServerIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = SendNextQueuedServerIndication &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimerAndSendPDU
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionInfoEntryByType
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Request_Timeout
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[33f]"></a>ServiceDiscoveryStateMachine</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, GATT.o(i.ServiceDiscoveryStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = ServiceDiscoveryStateMachine &rArr; IncludeDiscoveryRequest &rArr; GATT_Discover_Included_Services &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCharacteristicInfoEntry
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncludeDiscoveryRequest
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCompleteCallback
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchDiscoveryCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharacteristicDiscoveryRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharacteristicDescriptorDiscoveryRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ClientEventCallback
</UL>

<P><STRONG><a name="[123]"></a>SignedWriteCommandEvent</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, GATT.o(i.SignedWriteCommandEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = SignedWriteCommandEvent &rArr; GenericWriteRequestEvent &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceInfoEntry
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextHandleInfoEntry
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatServerEventIntegerThreeWordsPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[35a]"></a>StartServiceDiscovery</STRONG> (Thumb, 252 bytes, Stack size 96 bytes, GATT.o(i.StartServiceDiscovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = StartServiceDiscovery &rArr; GATT_Discover_Services &rArr; ClientRequestWithUUID &rArr; ClientRequestWithData &rArr; StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_UnLockBluetoothStack
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Discover_Services
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Cancel_Transaction
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchServiceDiscoveryInfoEntry
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireGATTStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Start_Service_Discovery
</UL>

<P><STRONG><a name="[218]"></a>StartTimerAndSendPDU</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, GATT.o(i.StartTimerAndSendPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = StartTimerAndSendPDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StopTimer
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_StartTimer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAPSendPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNextQueuedServerIndication
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNextQueuedClientRequest
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRequestWithData
</UL>

<P><STRONG><a name="[354]"></a>ValidateServiceArray</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, GATT.o(i.ValidateServiceArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ValidateServiceArray
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Register_Service
</UL>

<P><STRONG><a name="[35d]"></a>ValidateServiceConnectionType</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, GATT.o(i.ValidateServiceConnectionType))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextCharacteristicDiscoveryService
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericReadRequestEvent
</UL>

<P><STRONG><a name="[29c]"></a>VerifyNoOutstandingServerRequests</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GATT.o(i.VerifyNoOutstandingServerRequests))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VerifyNoOutstandingServerRequests &rArr; GetNextTransactionInfoEntry &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextTransactionInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericReadRequestEvent
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteWriteRequestEvent
</UL>

<P><STRONG><a name="[11e]"></a>WriteRequestEvent</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, GATT.o(i.WriteRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = WriteRequestEvent &rArr; GenericWriteRequestEvent &rArr; GATTErrorResponsePDU &rArr; L2CAPSendPDU &rArr; L2CA_Enhanced_Fixed_Channel_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericWriteRequestEvent
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTErrorResponsePDU
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchServerWriteRequestEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PDU_Event
</UL>

<P><STRONG><a name="[83]"></a>WriteResponseEvent</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, GATT.o(i.WriteResponseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteResponseEvent &rArr; FormatClientEventInteger
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatClientEventInteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GATT.o(i.GATT_Write_Request)
</UL>
<P><STRONG><a name="[15e]"></a>AddPacketQueueEntry</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, HCIDrv.o(i.AddPacketQueueEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendPacket
</UL>

<P><STRONG><a name="[25d]"></a>DeletePacketQueueEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, HCIDrv.o(i.DeletePacketQueueEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeletePacketQueueEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHCIPacketToLowerDriver
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DriverCallback
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendPacket
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CancelPacket
</UL>

<P><STRONG><a name="[395]"></a>DispatchDebugPacketCallbacks</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, HCIDrv.o(i.DispatchDebugPacketCallbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispatchDebugPacketCallbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHCIPacketToLowerDriver
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DriverCallback
</UL>

<P><STRONG><a name="[2c1]"></a>FreeDriverStructureResources</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, HCIDrv.o(i.FreeDriverStructureResources))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FreeDriverStructureResources &rArr; CloseComm &rArr; DeleteCOMEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseComm
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CloseDriver
</UL>

<P><STRONG><a name="[3b3]"></a>GetNextCallbackPacketID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HCIDrv.o(i.GetNextCallbackPacketID))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_OpenDriver
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendPacket
</UL>

<P><STRONG><a name="[8c]"></a>HCI_DriverCallback</STRONG> (Thumb, 452 bytes, Stack size 64 bytes, HCIDrv.o(i.HCI_DriverCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HCI_DriverCallback &rArr; HCI_CloseDriver &rArr; FreeDriverStructureResources &rArr; CloseComm &rArr; DeleteCOMEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CloseDriver
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_ReleaseListLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AcquireListLock
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHCIPacketToLowerDriver
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchDebugPacketCallbacks
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeletePacketQueueEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIDrv.o(i.HCI_OpenDriver)
</UL>
<P><STRONG><a name="[3ba]"></a>RegisterCallback</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, HCIDrv.o(i.RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RegisterCallback &rArr; SearchDriverEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDriverEntry
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextCallbackPacketID
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterSCODataCallback
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterEventCallback
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterACLDataCallback
</UL>

<P><STRONG><a name="[38e]"></a>SearchDriverEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, HCIDrv.o(i.SearchDriverEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchDriverEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_UnRegisterCallback
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CloseDriver
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterCallback
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DriverCallback
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendPacket
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReconfigureDriver
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ProcessHCIDriverInformation
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ChangeSCOConfigurationHandles
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ChangeSCOConfiguration
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CancelPacket
</UL>

<P><STRONG><a name="[38f]"></a>SendHCIPacketToLowerDriver</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, HCIDrv.o(i.SendHCIPacketToLowerDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + In Cycle
<LI>Call Chain = SendHCIPacketToLowerDriver &rArr;  SendHCIPacketToLowerDriver (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommPacket
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHCIPacketToLowerDriver
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchDebugPacketCallbacks
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeletePacketQueueEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHCIPacketToLowerDriver
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DriverCallback
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendPacket
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CancelPacket
</UL>

<P><STRONG><a name="[1e0]"></a>GetNextTimerID</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, BTPSTMR.o(i.GetNextTimerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetNextTimerID
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
</UL>

<P><STRONG><a name="[1dc]"></a>UpdateAndExpireTimers</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, BTPSTMR.o(i.UpdateAndExpireTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UpdateAndExpireTimers
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_GetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTimerModule
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_ProcessAsynchronousTimers
</UL>

<P><STRONG><a name="[63]"></a>UpdateTimerModule</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, BTPSTMR.o(i.UpdateTimerModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UpdateTimerModule &rArr; UpdateAndExpireTimers
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAndExpireTimers
</UL>
<BR>[Address Reference Count : 2]<UL><LI> BTPSTMR.o(i.BTPS_CleanupTimerModule)
<LI> BTPSTMR.o(i.BTPS_InitializeTimerModule)
</UL>
<P><STRONG><a name="[2c9]"></a>FreePortInfoEntryMemory</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, GOEP.o(i.FreePortInfoEntryMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FreePortInfoEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInfoList
</UL>

<P><STRONG><a name="[2ca]"></a>FreePortInfoList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, GOEP.o(i.FreePortInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FreePortInfoList &rArr; FreePortInfoEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePortInfoEntryMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOEP_Cleanup
</UL>

<P><STRONG><a name="[148]"></a>AcquireRFCOMMStackInformation</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, RFCOMM.o(i.AcquireRFCOMMStackInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AcquireRFCOMMStackInformation &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Cleanup
</UL>

<P><STRONG><a name="[157]"></a>AddL2CAPConnectionInfoEntry</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, RFCOMM.o(i.AddL2CAPConnectionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AddL2CAPConnectionInfoEntry &rArr; BSC_AddGenericListEntry_Actual &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_AddGenericListEntry_Actual
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[428]"></a>AddRFCOMMChannelInfoEntry</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, RFCOMM.o(i.AddRFCOMMChannelInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddRFCOMMChannelInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerSABMMessageHandler
</UL>

<P><STRONG><a name="[456]"></a>AddRFCOMMMessageInfoEntry</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, RFCOMM.o(i.AddRFCOMMMessageInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddRFCOMMMessageInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
</UL>

<P><STRONG><a name="[41b]"></a>CalculateFCS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, RFCOMM.o(i.CalculateFCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalculateFCS
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Data_Write
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control_Message
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMDataMessage
</UL>

<P><STRONG><a name="[266]"></a>Disconnect</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, RFCOMM.o(i.Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByCID
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveRFCOMMChannelInfoEntry
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveL2CAPConnectionInfoEntry
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextRFCOMMServerInfoEntry
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextRFCOMMChannelInfoEntry
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectChannel
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Release_Request
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SignalTimeout
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMClientSABMMessageHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMCleanupHandler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMDataMessage
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[26b]"></a>DisconnectChannel</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, RFCOMM.o(i.DisconnectChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DisconnectChannel &rArr; RemoveRFCOMMMessageInfoEntryByTEIAndMessage &rArr; BTPS_StopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMMessageInfoEntryByTEIAndDLCI
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveRFCOMMMessageInfoEntryByTEIAndMessage
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchOpenConfirmationEvent
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchEventTEIDLCIByte
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>

<P><STRONG><a name="[271]"></a>FormatAndDispatchEventTEIDLCIByte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, RFCOMM.o(i.FormatAndDispatchEventTEIDLCIByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FormatAndDispatchEventTEIDLCIByte
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectChannel
</UL>

<P><STRONG><a name="[419]"></a>FormatAndDispatchFlowEvent</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, RFCOMM.o(i.FormatAndDispatchFlowEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FormatAndDispatchFlowEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Data_With_Credits
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMDataMessage
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
</UL>

<P><STRONG><a name="[272]"></a>FormatAndDispatchOpenConfirmationEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, RFCOMM.o(i.FormatAndDispatchOpenConfirmationEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FormatAndDispatchOpenConfirmationEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMClientSABMMessageHandler
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectChannel
</UL>

<P><STRONG><a name="[2c6]"></a>FreeL2CAPConnectionInfoList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, RFCOMM.o(i.FreeL2CAPConnectionInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeL2CAPConnectionInfoList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMCleanupHandler
</UL>

<P><STRONG><a name="[2cc]"></a>FreeRFCOMMChannelInfoList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, RFCOMM.o(i.FreeRFCOMMChannelInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeRFCOMMChannelInfoList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMCleanupHandler
</UL>

<P><STRONG><a name="[268]"></a>GetNextRFCOMMChannelInfoEntry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, RFCOMM.o(i.GetNextRFCOMMChannelInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetNextRFCOMMChannelInfoEntry &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMClientSABMMessageHandler
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>

<P><STRONG><a name="[26c]"></a>GetNextRFCOMMServerInfoEntry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, RFCOMM.o(i.GetNextRFCOMMServerInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetNextRFCOMMServerInfoEntry &rArr; BSC_GetNextGenericListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMCleanupHandler
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>

<P><STRONG><a name="[ea]"></a>L2CA_Event_Callback</STRONG> (Thumb, 1006 bytes, Stack size 128 bytes, RFCOMM.o(i.L2CA_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = L2CA_Event_Callback &rArr; ProcessRFCOMMDataMessage &rArr; ProcessRFCOMMControlMessage &rArr; RFCOMM_Start_Link_Negotiation &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByCID
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchL2CAPConnectionInfoEntryByBD_ADDR
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveL2CAPConnectionInfoEntry
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMDataMessage
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextRFCOMMChannelInfoEntry
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchEventTEIDLCIByte
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddL2CAPConnectionInfoEntry
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Response
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Response
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Response
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Config_Request
</UL>
<BR>[Address Reference Count : 2]<UL><LI> RFCOMM.o(i._RFCOMM_Open_Request)
<LI> RFCOMM.o(i._RFCOMM_Register_Server_Channel)
</UL>
<P><STRONG><a name="[417]"></a>ProcessRFCOMMControlMessage</STRONG> (Thumb, 1570 bytes, Stack size 96 bytes, RFCOMM.o(i.ProcessRFCOMMControlMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = ProcessRFCOMMControlMessage &rArr; RFCOMM_Start_Link_Negotiation &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveRFCOMMMessageInfoEntryByTEIAndMessage
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Start_Link_Negotiation
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control_Message
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextRFCOMMChannelInfoEntry
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchFlowEvent
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchEventTEIDLCIByte
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMDataMessage
</UL>

<P><STRONG><a name="[400]"></a>ProcessRFCOMMDataMessage</STRONG> (Thumb, 704 bytes, Stack size 64 bytes, RFCOMM.o(i.ProcessRFCOMMDataMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = ProcessRFCOMMDataMessage &rArr; ProcessRFCOMMControlMessage &rArr; RFCOMM_Start_Link_Negotiation &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchFlowEvent
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFCS
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[eb]"></a>RFCOMMCleanupHandler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, RFCOMM.o(i.RFCOMMCleanupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = RFCOMMCleanupHandler &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_GetNextGenericListEntry
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Un_Register_Server_Channel
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextRFCOMMServerInfoEntry
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRFCOMMChannelInfoList
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeL2CAPConnectionInfoList
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>
<BR>[Address Reference Count : 2]<UL><LI> RFCOMM.o(i._RFCOMM_Open_Request)
<LI> RFCOMM.o(i._RFCOMM_Register_Server_Channel)
</UL>
<P><STRONG><a name="[ec]"></a>RFCOMMClientSABMMessageHandler</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, RFCOMM.o(i.RFCOMMClientSABMMessageHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = RFCOMMClientSABMMessageHandler &rArr; RFCOMM_Start_Link_Negotiation &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Start_Link_Negotiation
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextRFCOMMChannelInfoEntry
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAndDispatchOpenConfirmationEvent
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RFCOMM.o(i._RFCOMM_Open_Request)
</UL>
<P><STRONG><a name="[ee]"></a>RFCOMMServerPNMessageHandler</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, RFCOMM.o(i.RFCOMMServerPNMessageHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = RFCOMMServerPNMessageHandler &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMServerInfoEntryByTEI
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMChannelInfoEntryByTEIAndDLCI
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RFCOMM.o(i._RFCOMM_Register_Server_Channel)
</UL>
<P><STRONG><a name="[ed]"></a>RFCOMMServerSABMMessageHandler</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, RFCOMM.o(i.RFCOMMServerSABMMessageHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = RFCOMMServerSABMMessageHandler &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMServerInfoEntryByTEI
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRFCOMMChannelInfoEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RFCOMM.o(i._RFCOMM_Register_Server_Channel)
</UL>
<P><STRONG><a name="[26e]"></a>RFCOMM_Control</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, RFCOMM.o(i.RFCOMM_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFCS
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Data_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Release_Request
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Response
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SignalTimeout
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerSABMMessageHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerPNMessageHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMClientSABMMessageHandler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMDataMessage
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>

<P><STRONG><a name="[41a]"></a>RFCOMM_Control_Message</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, RFCOMM.o(i.RFCOMM_Control_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFCS
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Data_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Remote_Port_Negotiation_Response
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Parameter_Negotiation_Response
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
</UL>

<P><STRONG><a name="[429]"></a>RFCOMM_Data_Write</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, RFCOMM.o(i.RFCOMM_Data_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = RFCOMM_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifySharedBufferPointer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustSharedBuffer
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFCS
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Enhanced_Data_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Data_With_Credits
</UL>

<P><STRONG><a name="[68]"></a>RFCOMM_SignalTimeout</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, RFCOMM.o(i.RFCOMM_SignalTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = RFCOMM_SignalTimeout &rArr; Disconnect &rArr; RFCOMM_Control &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Disconnect_Request
</UL>
<BR>[Address Reference Count : 7]<UL><LI> RFCOMM.o(i.Disconnect)
<LI> RFCOMM.o(i.L2CA_Event_Callback)
<LI> RFCOMM.o(i.ProcessRFCOMMControlMessage)
<LI> RFCOMM.o(i.RFCOMMClientSABMMessageHandler)
<LI> RFCOMM.o(i.SendFormattedControlMessage)
<LI> RFCOMM.o(i._RFCOMM_Open_Request)
<LI> RFCOMM.o(i._RFCOMM_Release_Request)
</UL>
<P><STRONG><a name="[418]"></a>RFCOMM_Start_Link_Negotiation</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, RFCOMM.o(i.RFCOMM_Start_Link_Negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = RFCOMM_Start_Link_Negotiation &rArr; SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMClientSABMMessageHandler
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
</UL>

<P><STRONG><a name="[269]"></a>RemoveL2CAPConnectionInfoEntry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, RFCOMM.o(i.RemoveL2CAPConnectionInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RemoveL2CAPConnectionInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>

<P><STRONG><a name="[26a]"></a>RemoveRFCOMMChannelInfoEntry</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, RFCOMM.o(i.RemoveRFCOMMChannelInfoEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RemoveRFCOMMChannelInfoEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>

<P><STRONG><a name="[26f]"></a>RemoveRFCOMMMessageInfoEntryByTEIAndMessage</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, RFCOMM.o(i.RemoveRFCOMMMessageInfoEntryByTEIAndMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RemoveRFCOMMMessageInfoEntryByTEIAndMessage &rArr; BTPS_StopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectChannel
</UL>

<P><STRONG><a name="[3ff]"></a>SearchL2CAPConnectionInfoEntryByBD_ADDR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, RFCOMM.o(i.SearchL2CAPConnectionInfoEntryByBD_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SearchL2CAPConnectionInfoEntryByBD_ADDR &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
</UL>

<P><STRONG><a name="[267]"></a>SearchL2CAPConnectionInfoEntryByCID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, RFCOMM.o(i.SearchL2CAPConnectionInfoEntryByCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchL2CAPConnectionInfoEntryByCID &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Data_With_Credits
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Release_Request
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Parameter_Negotiation_Response
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Response
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Modem_Status
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CA_Event_Callback
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>

<P><STRONG><a name="[26d]"></a>SearchRFCOMMChannelInfoEntryByTEIAndDLCI</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, RFCOMM.o(i.SearchRFCOMMChannelInfoEntryByTEIAndDLCI))
<BR><BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Send_Data_With_Credits
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Remote_Port_Negotiation_Response
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Release_Request
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Response
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Modem_Status
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Line_Status_Change
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerPNMessageHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMClientSABMMessageHandler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMDataMessage
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRFCOMMControlMessage
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>

<P><STRONG><a name="[455]"></a>SearchRFCOMMMessageInfoEntryByMessageTEIAndDLCI</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, RFCOMM.o(i.SearchRFCOMMMessageInfoEntryByMessageTEIAndDLCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SearchRFCOMMMessageInfoEntryByMessageTEIAndDLCI
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFormattedControlMessage
</UL>

<P><STRONG><a name="[270]"></a>SearchRFCOMMMessageInfoEntryByTEIAndDLCI</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, RFCOMM.o(i.SearchRFCOMMMessageInfoEntryByTEIAndDLCI))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Open_Request
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectChannel
</UL>

<P><STRONG><a name="[427]"></a>SearchRFCOMMServerInfoEntryByTEI</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, RFCOMM.o(i.SearchRFCOMMServerInfoEntryByTEI))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Parameter_Negotiation_Response
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerSABMMessageHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMMServerPNMessageHandler
</UL>

<P><STRONG><a name="[432]"></a>SendFormattedControlMessage</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, RFCOMM.o(i.SendFormattedControlMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = SendFormattedControlMessage &rArr; RFCOMM_Control_Message &rArr; _L2CA_Data_Write &rArr; _L2CA_Enhanced_Data_Write &rArr; EnhancedFragmentPacket &rArr; FragmentPacket &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRFCOMMMessageInfoEntryByMessageTEIAndDLCI
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Control_Message
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRFCOMMMessageInfoEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Modem_Status
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RFCOMM_Line_Status_Change
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Start_Link_Negotiation
</UL>

<P><STRONG><a name="[9b]"></a>_L2CA_Event_Callback</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, RFCOMM.o(i._L2CA_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = _L2CA_Event_Callback &rArr; _L2CA_Connect_Response &rArr; L2CAP_ConnectRequestResponse &rArr; L2CAP_DataWrite &rArr; L2CAP_ProcessACLQueue &rArr; ProcessSendQueueData &rArr; HCI_Send_ACL_Data &rArr; SendDataPacket &rArr; HCISendPacket &rArr; HCI_SendPacket &rArr; AddPacketQueueEntry &rArr; BSC_AddGenericListEntry &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L2CA_Connect_Response
</UL>
<BR>[Address Reference Count : 2]<UL><LI> RFCOMM.o(i.RFCOMM_Initialize)
<LI> RFCOMM.o(i._RFCOMM_Open_Request)
</UL>
<P><STRONG><a name="[2b4]"></a>FreeACLLinkList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, SCO.o(i.FreeACLLinkList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeACLLinkList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Cleanup
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HCI_Event_Callback
</UL>

<P><STRONG><a name="[2ba]"></a>FreeCallbackList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, SCO.o(i.FreeCallbackList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeCallbackList &rArr; BSC_FreeGenericListEntryList &rArr; BSC_FreeGenericListEntryMemory &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_Cleanup
</UL>

<P><STRONG><a name="[9e]"></a>_HCI_Event_Callback</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, SCO.o(i._HCI_Event_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _HCI_Event_Callback &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_FreeGenericListEntryMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareNULLBluetoothAddress
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBluetoothAddress
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeACLLinkList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SCO.o(i.SCO_Initialize)
</UL>
<P><STRONG><a name="[9f]"></a>_HCI_SCO_Callback</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, SCO.o(i._HCI_SCO_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _HCI_SCO_Callback &rArr; AcquireBluetoothStackInformation &rArr; SearchBTStackEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseBluetoothStackInformation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireBluetoothStackInformation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SCO.o(i.SCO_Initialize)
</UL>
<P><STRONG><a name="[21c]"></a>DeleteCOMEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, HCIComm.o(i.DeleteCOMEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeleteCOMEntry &rArr; BSC_DeleteGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_DeleteGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseComm
</UL>

<P><STRONG><a name="[20b]"></a>FreeCOMStructureResources</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, HCIComm.o(i.FreeCOMStructureResources))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FreeCOMStructureResources &rArr; HCITR_COMClose &rArr; BTPS_MemCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMClose
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseComm
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanupCOMMList
</UL>

<P><STRONG><a name="[97]"></a>HCITR_COMDataCallback_UART</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, HCIComm.o(i.HCITR_COMDataCallback_UART))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = HCITR_COMDataCallback_UART &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(i.OpenComm)
</UL>
<P><STRONG><a name="[3d4]"></a>InitializeProtocol</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, HCIComm.o(i.InitializeProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = InitializeProtocol &rArr; TWUART_Initialize &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Initialize
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReconfigureComm
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenComm
</UL>

<P><STRONG><a name="[8e]"></a>ProtocolEventCallback</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, HCIComm.o(i.ProtocolEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ProtocolEventCallback &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMWrite
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCITR_COMReconfigure
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StopTimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(i.InitializeProtocol)
</UL>
<P><STRONG><a name="[9a]"></a>ProtocolTimerCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, HCIComm.o(i.ProtocolTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProtocolTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HCIComm.o(i.ProtocolEventCallback)
</UL>
<P><STRONG><a name="[1fe]"></a>SearchCOMEntry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, HCIComm.o(i.SearchCOMEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SearchCOMEntry &rArr; BSC_SearchGenericListEntry &rArr; CompareListEntryKeys &rArr; BTPS_MemCompare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSC_SearchGenericListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommPacket
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReconfigureComm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessComm
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommSCOConfiguration
</UL>

<P><STRONG><a name="[2d0]"></a>FreeTransmitBufferListHead</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, HCILL.o(i.FreeTransmitBufferListHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FreeTransmitBufferListHead &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueuedPackets
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_Shutdown
</UL>

<P><STRONG><a name="[379]"></a>SendQueuedPackets</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, HCILL.o(i.SendQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendQueuedPackets &rArr; FreeTransmitBufferListHead &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitData
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTransmitBufferListHead
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_ReceiveBytes
</UL>

<P><STRONG><a name="[378]"></a>SendSleepIndication</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HCILL.o(i.SendSleepIndication))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_TransmitBytes
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_ReceiveBytes
</UL>

<P><STRONG><a name="[377]"></a>TransmitData</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, HCILL.o(i.TransmitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueuedPackets
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_TransmitBytes
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCILL_ReceiveBytes
</UL>

<P><STRONG><a name="[fd]"></a>AcknowledgeTimerExpired</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, TWUART.o(i.AcknowledgeTimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AcknowledgeTimerExpired &rArr; SendNullPacket &rArr; SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNullPacket
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIdle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> TWUART.o(.constdata)
</UL>
<P><STRONG><a name="[41d]"></a>CalculateCRC</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, TWUART.o(i.CalculateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSLIPPacket
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedPacket
</UL>

<P><STRONG><a name="[12c]"></a>CheckIdle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, TWUART.o(i.CheckIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckIdle &rArr; SetTWUARTTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetransmitTimerExpired
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcknowledgeTimerExpired
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_TransmitBytes
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_ReceiveBytes
</UL>

<P><STRONG><a name="[292]"></a>EncodeAndSend</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, TWUART.o(i.EncodeAndSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSLIPPacket
</UL>

<P><STRONG><a name="[2b5]"></a>FreeBufferListHead</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, TWUART.o(i.FreeBufferListHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FreeBufferListHead &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedPacket
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Shutdown
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Resynchronize
</UL>

<P><STRONG><a name="[fb]"></a>IdleTimerExpired</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, TWUART.o(i.IdleTimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IdleTimerExpired &rArr; SetTWUARTState &rArr; SendTWUARTMessage &rArr; SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> TWUART.o(.constdata)
</UL>
<P><STRONG><a name="[412]"></a>ParseConfigurationField</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, TWUART.o(i.ParseConfigurationField))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ParseConfigurationField &rArr; SetTransportConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTransportConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTWUARTMessage
</UL>

<P><STRONG><a name="[41c]"></a>ProcessReceivedPacket</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, TWUART.o(i.ProcessReceivedPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ProcessReceivedPacket &rArr; ProcessTWUARTMessage &rArr; TWUART_Resynchronize &rArr; SetTWUARTState &rArr; SendTWUARTMessage &rArr; SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTTimer
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueuedPackets
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNullPacket
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTWUARTMessage
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeBufferListHead
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_ReceiveBytes
</UL>

<P><STRONG><a name="[41f]"></a>ProcessTWUARTMessage</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, TWUART.o(i.ProcessTWUARTMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ProcessTWUARTMessage &rArr; TWUART_Resynchronize &rArr; SetTWUARTState &rArr; SendTWUARTMessage &rArr; SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCompare
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTState
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTWUARTMessage
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseConfigurationField
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Resynchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedPacket
</UL>

<P><STRONG><a name="[437]"></a>RestartPacketizer</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, TWUART.o(i.RestartPacketizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RestartPacketizer &rArr; BTPS_FreeMemory &rArr; MemFree
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_FreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_ReceiveBytes
</UL>

<P><STRONG><a name="[fc]"></a>RetransmitTimerExpired</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, TWUART.o(i.RetransmitTimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RetransmitTimerExpired &rArr; SendTWUARTMessage &rArr; SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTTimer
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTWUARTMessage
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSLIPPacket
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIdle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> TWUART.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>SendNullPacket</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, TWUART.o(i.SendNullPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SendNullPacket &rArr; SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSLIPPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedPacket
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcknowledgeTimerExpired
</UL>

<P><STRONG><a name="[41e]"></a>SendQueuedPackets</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, TWUART.o(i.SendQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SendQueuedPackets &rArr; SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSLIPPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTState
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReliablePacket
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedPacket
</UL>

<P><STRONG><a name="[458]"></a>SendReliablePacket</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, TWUART.o(i.SendReliablePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SendReliablePacket &rArr; BTPS_AllocateMemory &rArr; BTPS_OutputMessage &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemInitialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_AllocateMemory
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTTimer
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_TransmitBytes
</UL>

<P><STRONG><a name="[438]"></a>SendSLIPPacket</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, TWUART.o(i.SendSLIPPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitData
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTTimer
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeAndSend
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTWUARTMessage
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueuedPackets
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendNullPacket
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetransmitTimerExpired
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_TransmitBytes
</UL>

<P><STRONG><a name="[45c]"></a>SendSleepIndication</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, TWUART.o(i.SendSleepIndication))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTState
</UL>

<P><STRONG><a name="[424]"></a>SendTWUARTMessage</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, TWUART.o(i.SendTWUARTMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendTWUARTMessage &rArr; SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPS_MemCopy
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSLIPPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTWUARTState
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetransmitTimerExpired
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTWUARTMessage
</UL>

<P><STRONG><a name="[3ce]"></a>SetTWUARTState</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, TWUART.o(i.SetTWUARTState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SetTWUARTState &rArr; SendTWUARTMessage &rArr; SendSLIPPacket &rArr; EncodeAndSend &rArr; TransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTWUARTMessage
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepIndication
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTWUARTMessage
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTimerExpired
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_TransmitBytes
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Resynchronize
</UL>

<P><STRONG><a name="[205]"></a>SetTWUARTTimer</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, TWUART.o(i.SetTWUARTTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetTWUARTTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSLIPPacket
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReliablePacket
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetransmitTimerExpired
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedPacket
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIdle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Resynchronize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_ReceiveBytes
</UL>

<P><STRONG><a name="[413]"></a>SetTransportConfiguration</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, TWUART.o(i.SetTransportConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetTransportConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseConfigurationField
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Resynchronize
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWUART_Initialize
</UL>

<P><STRONG><a name="[293]"></a>TransmitData</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, TWUART.o(i.TransmitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSLIPPacket
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeAndSend
</UL>

<P><STRONG><a name="[46c]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[46a]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[46f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[46e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ef]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[f0]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
